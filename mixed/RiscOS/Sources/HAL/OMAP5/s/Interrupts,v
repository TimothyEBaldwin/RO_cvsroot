head	1.3;
access;
symbols
	OMAP5-0_11:1.3
	OMAP5-0_10-1_5_2_4:1.2.2.1
	OMAP5-0_10:1.2
	OMAP5-0_09:1.2
	OMAP5-0_08:1.2
	OMAP5-0_07-1_5_2_3:1.2.2.1
	OMAP5-0_07:1.2
	OMAP5-0_06-1_5_2_2:1.2.2.1
	OMAP5-0_06-1_5_2_1:1.2
	OMAP5-0_06:1.2
	SMP:1.2.0.2
	SMP_bp:1.2
	OMAP5-0_05:1.2
	OMAP5-0_04:1.1.1.1
	OMAP5-0_03:1.1.1.1
	OMAP5-0_02:1.1.1.1
	OMAP5-0_01:1.1.1.1
	OMAP5-0_00:1.1.1.1
	wtheiss:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2018.07.07.15.12.11;	author jlee;	state Exp;
branches;
next	1.2;
commitid	yOjMaSVxBy0IudJA;

1.2
date	2016.05.06.21.44.37;	author jlee;	state Exp;
branches
	1.2.2.1;
next	1.1;
commitid	DTdy2J7kWnUJ7t5z;

1.1
date	2015.11.28.10.02.58;	author rool;	state Exp;
branches
	1.1.1.1;
next	;
commitid	gLmEYKUnWLDNnQKy;

1.2.2.1
date	2017.08.12.22.21.54;	author jlee;	state Exp;
branches;
next	;
commitid	CXdrQgoiV7dNrY2A;

1.1.1.1
date	2015.11.28.10.02.58;	author rool;	state Exp;
branches;
next	;
commitid	gLmEYKUnWLDNnQKy;


desc
@@


1.3
log
@Merge SMP branch to trunk
Detail:
  Makefile, s/DBell - Add doorbell HAL device implementation, using GIC SGIs
  hdr/StaticWS, hdr/omap543x - Tidy things up a bit by removing the DebugInterrupts code
  hdr/irqids543x - Offset all the shared interrupt numbers so that RISC OS IRQs 0-31 are core 0 private, 32-63 core 1 private, 64-223 shared
  s/Boot - Implement SMP HAL entry points
  s/Interrupts - Tidy up interrupt handling and implement new HAL IRQ calls
Admin:
  Untested
  Requires Kernel-6_09


Version 0.11. Tagged as 'OMAP5-0_11'
@
text
@; Copyright 2015 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ImageSize.<ImageSize>

        GET     Hdr:OSEntries
        GET     Hdr:HALEntries

        GET     hdr.omap543x
        GET     hdr.StaticWS
        GET     hdr.Interrupts

        AREA    |Asm$$Code|, CODE, READONLY, PIC

        EXPORT  Interrupt_Init
        EXPORT  HAL_IRQEnable
        EXPORT  HAL_IRQDisable
        EXPORT  HAL_IRQClear
        EXPORT  HAL_IRQSource
        EXPORT  HAL_IRQStatus
        EXPORT  HAL_FIQEnable
        EXPORT  HAL_FIQDisable
        EXPORT  HAL_FIQDisableAll
        EXPORT  HAL_FIQClear
        EXPORT  HAL_FIQSource
        EXPORT  HAL_FIQStatus
        EXPORT  HAL_IRQMax
        EXPORT  HAL_IRQProperties
        EXPORT  HAL_IRQSetCores
        EXPORT  HAL_IRQGetCores

        ; $base += ($num >> 5) << 2
        ; $bit = 1 << ($num & 31)
        ; NE if $num >= 32
        ; $temp can be $num
        MACRO
        BitMap  $num, $base, $bit, $temp
        MOVS    $bit, $num, LSR #5
        AND     $temp, $num, #31
        ADD     $base, $base, $bit, LSL #2
        MOV     $bit, #1
        MOV     $bit, $bit, LSL $temp
        MEND

        ; As above, but $base = ($num >> 5) << 2
        MACRO
        BitMap0 $num, $base, $bit, $temp
        MOVS    $base, $num, LSR #5
        AND     $temp, $num, #31
        MOV     $base, $base, LSL #2
        MOV     $bit, #1
        MOV     $bit, $bit, LSL $temp
        MEND

Interrupt_Init
        ; 1. disable Distributor Controller
        LDR     a1, MPU_INTC_Log
        ADD     a1, a1, #GICD_BASE
        MOV     a2, #0          ; disable ICDDCR
        STR     a2, [a1, #GICD_CTLR]

        ; 2. set all global interrupts to be level triggered, active low
        ADD     a3, a1, #GICD_ICFGR
        ADD     a3, a3, #8
        MOV     a4, #INTERRUPT_MAX-32
        MOV     ip, #32
10
        STR     a2, [a3], #4
        ADD     ip, ip, #16
        CMP     ip, a4
        BNE     %BT10

        ; 3. set all global interrupts to this CPU only
        ADD     a3, a1, #(GICD_ITARGETSR + 32)
        MOV     ip, #32
        MOV     a2, #1
        ORR     a2, a2, a2, LSL #8
        ORR     a2, a2, a2, LSL #16
20
        STR     a2, [a3], #4
        ADD     ip, ip, #4
        CMP     ip, a4
        BNE     %BT20

        ; 4. set priority on all interrupts
        ADD     a3, a1, #(GICD_IPRIORITYR + 32)
        MOV     ip, #32
        MOV     a2, #&A0
        ORR     a2, a2, a2, LSL #8
        ORR     a2, a2, a2, LSL #16
30
        STR     a2, [a3], #4
        ADD     ip, ip, #4
        CMP     ip, a4
        BNE     %BT30

        ; 5. disable all interrupts
        ADD     a3, a1, #GICD_ICENABLER
        MOV     ip, #32
        MOV     a2, #-1
40
        STR     a2, [a3], #4
        ADD     ip, ip, #32
        CMP     ip, a4
        BNE     %BT40

        ; 6. enable Distributor Controller
        MOV     a2, #ICDDCR_ENABLE_GRP0
        STR     a2, [a1, #GICD_CTLR]

        ; 7. set PRIMASK in CPU interface
        LDR     a1, MPU_INTC_Log
        ADD     a1, a1, #GICC_BASE
        MOV     a2, #&F0
        STR     a2, [a1, #GICC_PMR]

        ; 8. enable CPU interface
        MOV     a2, #ICCICR_ENABLE_GRP1
        STR     a2, [a1, #GICC_CTLR]
        ; ... and everything else looks good?
        MOV     pc, lr

HAL_IRQEnable   ROUT
        CMP     a1, #INTERRUPT_MAX
        MOVHS   a1, #0
        MOVHS   pc, lr
        BitMap0 a1, a2, a3, a4
        CMP     a1, #32
        LDR     a4, MPU_INTC_Log
        SUBHS   a2, a2, #4 ; Remap to GIC registers (assume we won't get called with wrong private interrupt)
        ADD     a4, a4, #GICD_BASE + GICD_ISENABLER
        LDR     a1, [a4, a2] ; Get old state
        STR     a3, [a4, a2] ; Set new state
        AND     a1, a1, a3 ; Return value
        MOV     pc, lr

HAL_IRQDisable  ROUT
        CMP     a1, #INTERRUPT_MAX
        MOVHS   a1, #0
        MOVHS   pc, lr
        BitMap0 a1, a2, a3, a4
        CMP     a1, #32
        LDR     ip, MPU_INTC_Log
        SUBHS   a2, a2, #4 ; Remap to GIC registers (assume we won't get called with wrong private interrupt)
        ADD     a4, ip, #GICD_BASE + GICD_ICENABLER
        LDR     a2, [a4, a2]! ; Get old state
        STR     a3, [a4] ; Set new state
        LDR     a4, [a4, #GICD_ISACTIVER-GICD_ICENABLER] ; TODO could this be bogus? - if register isn't banked we'll do the wrong thing
        SUBHS   a1, a1, #32
        TST     a4, a3 ; Was it active?
        BEQ     %FT90
        CMPLO   a1, #16 ; LO if this is core 0 private, check to see if SGI
        ORRLO   a1, a1, #1<<10 ; Set opposite to current CPU
        ADD     a4, ip, #GICC_BASE
        STR     a1, [a4, #GICC_EOIR]
90
        AND     a1, a2, a3 ; Return value
        DSB     SY
        MOV     pc, lr

HAL_IRQClear    ROUT
        CMP     a1, #32
        SUBHS   a1, a1, #32     ; Map to GIC interrupt number
        ; Signal End Of Interrupt
        CMP     a1, #16         ; SGI?
        BHS     %FT10
        MRC     p15, 0, a2, c0, c0, 5
        TST     a2, #1
        ADDEQ   a1, a1, #1<<10  ; Assume it came from the other CPU
10
        LDR     a2, MPU_INTC_Log
        ADD     a2, a2, #GICC_BASE
        STR     a1, [a2, #GICC_EOIR]
        ; Data synchronisation barrier to make sure INTC gets the message
        DSB     SY
        MOV     pc, lr

HAL_IRQSource   ROUT
        LDR     a2, MPU_INTC_Log
        ADD     a2, a2, #GICC_BASE
        LDR     a3, [a2, #GICC_IAR]
        BIC     a1, a3, #ICCIAR_CPUID
        CMP     a1, #INTERRUPT_MAX-32
        MOVHI   a1, #-1            ; Spurious interrupt, ignore it
        MOVHI   pc, lr
        MRC     p15, 0, a4, c0, c0, 5
        AND     a4, a4, #1
        CMP     a1, #32
        ADDLO   a1, a1, a4, LSL #5 ; Remap private interrupt
        ADDHS   a1, a1, #32        ; Remap shared interrupt
        MOV     pc, lr

HAL_IRQStatus
        ; Test if IRQ is firing, irrespective of mask state
        CMP     a1, #INTERRUPT_MAX
        MOVHS   a1, #0
        MOVHS   pc, lr
        LDR     a2, MPU_INTC_Log
        ADD     a2, a2, #(GICD_BASE + GICD_ISACTIVER)
        BitMap  a1, a2, a3, a4
        SUBNE   a2, a2, #4      ; Remap to GIC registers
        LDR     a1, [a2]        ; Get status
        AND     a1, a1, a3
        MOV     pc, lr


;
; ToDo: do we have FIQs in Non-Secure environment GIC ???
;    FIQ_Supported part contains register names from OMAP3 implementation;
;    this needs updating for GICv2 naming conventions!
;
                GBLL    FIQ_Supported
FIQ_Supported   SETL    {FALSE}

HAL_FIQEnable
  [ FIQ_Supported
        CMP     a1, #INTERRUPT_MAX
        MOVHS   a1, #0
        MOVHS   pc, lr
        ; Disable interrupts while we update the controller
        MRS     a4, CPSR
        ORR     a3, a4, #F32_bit+I32_bit
        MSR     CPSR_c, a3
        ; Set the interrupt type & priority, and then unmask it
        MOV     a2, #1 ; highest priority for all FIQs.
        LDR     a3, MPU_INTC_Log
        ADD     ip, a3, #INTCPS_ILR
        ASSERT  INTCPS_ILR_SIZE = 4
        STR     a2, [ip, a1, LSL #2]
        AND     a2, a1, #&1F ; Mask bit
        MOV     a1, a1, LSR #5 ; BITS index
        ASSERT  INTCPS_BITS_SIZE = 32
        ADD     ip, a3, a1, LSL #5
        MOV     a1, #1
        MOV     a2, a1, LSL a2
        LDR     a1, [ip, #INTCPS_BITS+INTCPS_BITS_MIR] ; Get old state
        STR     a2, [ip, #INTCPS_BITS+INTCPS_BITS_MIR_CLEAR] ; Write to clear reg to set new state
        MSR     CPSR_c, a4 ; Re-enable interrupts
        MVN     a1, a1 ; Invert so we get a mask of enabled interrupts
        AND     a1, a1, a2 ; Test if it was enabled or not
        MOV     pc, lr
  |
        MOV     a1, #0
        MOV     pc, lr
  ] ; FIQ_Supported

HAL_FIQDisable
  [ FIQ_Supported
        CMP     a1, #INTERRUPT_MAX
        MOVHS   a1, #0
        MOVHS   pc, lr
        Push    "lr"
        ; Disable interrupts while we update the controller (not necessarily needed for disabling them?)
        MRS     a4, CPSR
        ORR     a3, a4, #F32_bit+I32_bit
        MSR     CPSR_c, a3
        ; Check if this is actually an FIQ
        LDR     a3, MPU_INTC_Log
        ASSERT  INTCPS_ILR_SIZE = 4
        ADD     a2, a3, a1, LSL #2
        LDR     a2, [a2, #INTCPS_ILR]
        TST     a2, #1
        MOVEQ   a1, #0 ; This is an IRQ, so don't disable it
        MSREQ   CPSR_c, a4
        Pull    "pc", EQ
        ; Now mask the interrupt
        AND     a2, a1, #&1F ; Mask bit
        MOV     lr, a1, LSR #5 ; BITS index
        ASSERT  INTCPS_BITS_SIZE = 32
        ADD     ip, a3, lr, LSL #5
        MOV     lr, #1
        MOV     a2, lr, LSL a2
        LDR     lr, [ip, #INTCPS_BITS+INTCPS_BITS_MIR] ; Get old state
        STR     a2, [ip, #INTCPS_BITS+INTCPS_BITS_MIR_SET] ; Mask the interrupt
        ; Check if we just disabled the active interrupt
        LDR     ip, [a3, #INTCPS_SIR_FIQ]
        CMP     ip, a1
        MOVEQ   ip, #2
        STREQ   ip, [a3, #INTCPS_CONTROL]
        MSR     CPSR_c, a4 ; Re-enable interrupts
        BIC     a1, a2, lr ; Clear the masked interrupts from a2 to get nonzero result if it was enabled
        Pull    "pc"
  |
        MOV     a1, #0
        MOV     pc, lr
  ] ; FIQ_Supported

HAL_FIQDisableAll
  [ FIQ_Supported
        ; This isn't particularly great, we need to scan the entire ILR array
        ; and work out which are FIQs, and then write to the ISR_SET registers
        ; We should probably keep our own array of enabled FIQs so this can be
        ; done more quickly
        MRS     a4, CPSR
        ORR     a3, a4, #F32_bit+I32_bit
        MSR     CPSR_c, a3
        LDR     a1, MPU_INTC_Log
        ADD     a1, a1, #INTCPS_ILR
        MOV     a2, #1 ; Mask to write
        ADD     a3, a1, #INTCPS_BITS+INTCPS_BITS_MIR_SET-INTCPS_ILR
HAL_FIQDisableAll_Loop1
        LDR     ip, [a1],#INTCPS_ILR_SIZE
        TST     ip, #1 ; 1=FIQ, 0=IRQ
        STRNE   a2, [a3] ; Disable it
        MOVS    a2, a2, LSL #1
        BCC     HAL_FIQDisableAll_Loop1
        ; Move on to next word
        MOV     a2, #1
        ADD     a3, a3, #INTCPS_BITS_SIZE
HAL_FIQDisableAll_Loop2
        LDR     ip, [a1],#INTCPS_ILR_SIZE
        TST     ip, #1 ; 1=FIQ, 0=IRQ
        STRNE   a2, [a3] ; Disable it
        MOVS    a2, a2, LSL #1
        BCC     HAL_FIQDisableAll_Loop2
        ; Move on to last word
        MOV     a2, #1
        ADD     a3, a3, #INTCPS_BITS_SIZE
HAL_FIQDisableAll_Loop3
        LDR     ip, [a1],#INTCPS_ILR_SIZE
        TST     ip, #1 ; 1=FIQ, 0=IRQ
        STRNE   a2, [a3] ; Disable it
        MOVS    a2, a2, LSL #1
        BCC     HAL_FIQDisableAll_Loop3
        ; Done
        ASSERT  INTCPS_BITS_COUNT = 3
        MSR     CPSR_c, a4
        ; FIQDisableAll is only called during emergency situations, so restart INTC priority
        ; sorting to avoid having to rewrite various bits of RISC OS code to query FIQ sources
        ; and call FIQClear on each one (which would otherwise be the only legal way of
        ; stopping all FIQs from firing)
        LDR     a2, MPU_INTC_Log
        MOV     a1, #2
        STR     a1, [a2, #INTCPS_CONTROL]
        ; Data synchronisation barrier to make sure INTC gets the message
        DSB     SY
  ] ; FIQ_Supported
        MOV     pc, lr

HAL_FIQClear
  [ FIQ_Supported
        ; Restart INTC priority sorting
        LDR     a2, MPU_INTC_Log
        MOV     a1, #2
        STR     a1, [a2, #INTCPS_CONTROL]
        ; Data synchronisation barrier to make sure INTC gets the message
        DSB     SY
  ] ; FIQ_Supported
        MOV     pc, lr

HAL_FIQStatus
  [ FIQ_Supported
        ; Test if FIQ is firing, irrespective of mask state
        CMP     a1, #INTERRUPT_MAX
        MOVHS   a1, #0
        MOVHS   pc, lr
        ; First we need to make sure this is an FIQ, not an IRQ?
        MRS     a4, CPSR
        ORR     a3, a4, #F32_bit+I32_bit
        MSR     CPSR_c, a3
        LDR     a2, MPU_INTC_Log
        ASSERT  INTCPS_ILR_SIZE = 4
        ADD     a3, a2, a1, LSL #2
        LDR     a3, [a3, #INTCPS_ILR]
        TST     a3, #1
        MOVEQ   a1, #0 ; This is an IRQ, so it can't fire for FIQ
        MSREQ   CPSR_c, a4
        MOVEQ   pc, lr
        ; Now check if it's firing
        ASSERT  INTCPS_BITS_SIZE = 32
        MOV     a3, a1, LSR #5
        ADD     a3, a2, a3, LSL #5
        LDR     a3, [a3, #INTCPS_BITS+INTCPS_BITS_ITR]
        MSR     CPSR_c, a4
        AND     a1, a1, #31
        MOV     a1, a3, LSR a1 ; Shift and invert so 1=active
        AND     a1, a1, #1 ; 0 = not firing, 1 = firing
        MOV     pc, lr
  |
        MOV     a1, #0
        MOV     pc, lr
  ] ; FIQ_Supported

HAL_FIQSource
  [ FIQ_Supported
        ; Does the ARM think an interrupt is occuring?
        MRC     p15, 0, a1, c12, c1, 0
        TST     a1, #F32_bit
        MOVEQ   a1, #-1
        MOVEQ   pc, lr
        LDR     a2, MPU_INTC_Log
        LDR     a1, [a2, #INTCPS_SIR_FIQ]
        CMP     a1, #INTERRUPT_MAX
        ANDLO   a1, a1, #&7F
        MOVLO   pc, lr
        ; Authentic spurious interrupt - restart INTC and return -1
        MOV     a1, #-1
        MOV     a3, #2
        STR     a3, [a2, #INTCPS_CONTROL]
        ; Data synchronisation barrier to make sure INTC gets the message
        DSB     SY
        MOV     pc, lr
  |
        MOV     a1, #0
        MOV     pc, lr
  ] ; FIQ_Supported

HAL_IRQMax
        MOV     a1, #INTERRUPT_MAX
        MOV     pc, lr

; In: a1 = device number
; Out: a1 = IRQ mask
;      a2 = FIQ mask
;           bits 0-29 of each register give cores that the interrupt can be
;           assigned to
;           bit 30 = private flag
;           bit 31 = interrupt can be routed to multiple cores at once
HAL_IRQProperties
        ; 0-31 for core 0
        ; 32-63 for core 1
        ; 64+ for shared
        CMP     a1, #INTERRUPT_MAX
        MOVHS   a2, #0
        BHS     %FT10
        CMP     a1, #64
        MOVLO   a2, #2 + HALIRQProperty_Private
        MOVHS   a2, #3 + HALIRQProperty_Multicore
        CMP     a1, #32
        MOVLO   a2, #1 + HALIRQProperty_Private
10
        MOV     a1, a2
      [ :LNOT: FIQ_Supported
        MOV     a2, #0
      ]
        MOV     pc, lr

; In: a1 = device number
;     a2 = desired core mask
; Out: a1 = actual core mask
HAL_IRQSetCores
        CMP     a1, #INTERRUPT_MAX
        MOVHS   a1, #0
        MOVHS   pc, lr
        CMP     a1, #64
        BLO     %FT10
        LDR     a3, MPU_INTC_Log
        ADD     a3, a3, #GICD_BASE + GICD_ITARGETSR
        ADD     a3, a3, a1
        AND     a1, a2, #3
        STRB    a1, [a3, #-32] ; Update mapping
        MOV     pc, lr

HAL_IRQGetCores ; read-only version of IRQSetCores
        CMP     a1, #INTERRUPT_MAX
        MOVHS   a1, #0
        MOVHS   pc, lr
        CMP     a1, #64
        BLO     %FT10
        LDR     a3, MPU_INTC_Log
        ADD     a3, a3, #GICD_BASE + GICD_ITARGETSR
        ADD     a3, a3, a1
        LDRB    a1, [a3, #-32] ; Get mapping
        MOV     pc, lr

10
        CMP     a1, #32
        MOVHS   a1, #2
        MOVLO   a1, #1
        MOV     pc, lr

        END
@


1.2
log
@Implement HAL_TimerIRQClear
Detail:
  s/Boot, s/Interrupts, s/Timers - Move timer IRQ clear code out of HAL_IRQClear and into HAL_TimerIRQClear. Streamlines HAL_IRQClear, and necessary to avoid undefined symbols when linking with latest HAL USB library.
Admin:
  Builds, untested


Version 0.05. Tagged as 'OMAP5-0_05'
@
text
@d23 1
d44 26
a69 6

; Debug flag to cause the DebugInterrupts noncleared IRQ detection code to disable the source
; of the noncleared interrupt. This can be useful in debugging issues that cause the
; nonclearance of the IRQ, e.g. if an IRQ handler aborts before it's able to call IRQClear.
                        GBLL    DebugDisablePrevious
DebugDisablePrevious    SETL    {FALSE}
d81 1
a81 1
        MOV     a4, #INTERRUPT_MAX
a136 9
  [ DebugInterrupts
        MOV     a1, #-1
        STR     a1, LastInterrupt_IRQ
        STR     a1, LastInterrupt_FIQ
   [ ExtraDebugInterrupts
        MOV     a1, #0
        STR     a1, ExtraDebugIRQEnabled
   ]
  ]
d139 1
a139 1
HAL_IRQEnable
d143 8
a150 16
        ; Disable interrupts while we update the controller
        MRS     a4, CPSR
        ORR     a3, a4, #F32_bit+I32_bit
        MSR     CPSR_c, a3
        ; Unmask the interrupt
        LDR     a3, MPU_INTC_Log
        ADD     ip, a3, #(GICD_BASE + GICD_ISENABLER)
        AND     a2, a1, #31     ; bit   = intno % 32
        MOV     a1, a1, LSR #5  ; index = intno / 32
        ADD     ip, ip, a1, LSL #2
        MOV     a1, #1
        MOV     a2, a1, LSL a2  ; mask = (1 << bit)
        LDR     a1, [ip, #0]    ; get old state
        STR     a2, [ip, #0]    ; set new state
        MSR     CPSR_c, a4      ; Re-enable interrupts
        AND     a1, a1, a2      ; Test if it was enabled or not
d153 1
a153 1
HAL_IRQDisable
d157 19
a175 46
        Push    "lr"
        ; Disable interrupts while we update the controller
        ; (not necessarily needed for disabling them?)
        MRS     a4, CPSR
        ORR     a3, a4, #F32_bit+I32_bit
        MSR     CPSR_c, a3
        ; Now mask the interrupt
        LDR     a3, MPU_INTC_Log
        ADD     ip, a3, #(GICD_BASE + GICD_ICENABLER)
        AND     a2, a1, #31     ; bit   = intno % 32
        MOV     lr, a1, LSR #5  ; index = intno / 32
        ADD     ip, ip, lr, LSL #2
        MOV     lr, #1
        MOV     a2, lr, LSL a2  ; mask = (1 << bit)
        LDR     lr, [ip, #0]    ; get old state
        STR     a2, [ip, #0]    ; mask the interrupt
  [ {FALSE} ; reading GICC_IAR has side effects on the interrupt system !?
        ; Check if we just disabled the active interrupt
        ADD     a3, a3, #GICC_BASE
        LDR     ip, [a3, #GICC_IAR]
        CMP     ip, a1
        STREQ   ip, [a3, #GICC_EOIR]
    [ DebugInterrupts
        MOVEQ   ip, #-1
        STREQ   ip, LastInterrupt_IRQ
    ]
  |
        ; Clear any pending state of this source
        STR     a2, [ip, #(GICD_ICPENDR - GICD_ICENABLER)]
        Push    "lr"
        ; Was it active?
        LDR     lr, [ip, #(GICD_ISACTIVER - GICD_ICENABLER)]
        TST     lr, a2
        Pull    "lr"
        ; Reset active state of this interrupt
        STR     a2, [ip, #(GICD_ICACTIVER - GICD_ICENABLER)]
        ADDNE   a3, a3, #GICC_BASE
        STRNE   a1, [a3, #GICC_EOIR]
    [ DebugInterrupts
        MOVNE   ip, #-1
        STRNE   ip, LastInterrupt_IRQ
    ]
  ]
        MSR     CPSR_c, a4      ; Re-enable interrupts
        AND     a1, lr, a2      ; Test if it was enabled or not
        Pull    "pc"
d177 9
a185 8
HAL_IRQClear
  [ ExtraDebugInterrupts
        LDR     a2, ExtraDebugIRQEnabled
        CMP     a2, #0
        BEQ     %FT10
        Push    "lr"
        DebugReg a1, "HAL_IRQClear: "
        Pull    "lr"
a186 2
  ]
        ; Signal End Of Interrupt
a191 4
  [ DebugInterrupts
        MOV     a1, #-1
        STR     a1, LastInterrupt_IRQ
  ]
d194 1
a194 34
HAL_IRQSource
  [ DebugInterrupts
        LDR     a1, LastInterrupt_IRQ
        CMP     a1, #0
        BLT     %FT10
        Push    "lr"
        BL      DebugHALPrint
        =       "HAL_IRQSource: Previous IRQ not cleared: ", 0
        DebugReg a1
   [ DebugDisablePrevious
        BL      HAL_IRQDisable
   ]
   [ ExtraDebugInterrupts
    [ :LNOT: DebugDisablePrevious ; Doesn't play nice with this since it'll just spam the HAL_IRQClear messages
        STR     pc, ExtraDebugIRQEnabled ; any nonzero value will do
    ]
        MOV     lr, pc ; BL to the main routine so we can get the exit code
        B       %FT05
        DebugReg a1, "HAL_IRQSource: New IRQ: "
        Pull    "pc"
05
   |
        Pull    "lr"
   ]
10
  ]
        ; Does the ARM think an interrupt is occuring?
        MRC     p15, 0, a1, c12, c1, 0
        TST     a1, #I32_bit
        MOVEQ   a1, #-1
  [ DebugInterrupts
        STREQ   a1, LastInterrupt_IRQ
  ]
        MOVEQ   pc, lr
d199 8
a206 13
        CMP     a1, #INTERRUPT_MAX
  [ DebugInterrupts
        STRLO   a1, LastInterrupt_IRQ
  ]
        MOVLO   pc, lr
        ; Authentic spurious interrupt - restart INTC and return -1
        STR     a3, [a2, #GICC_EOIR]
        ; Data synchronisation barrier to make sure INTC gets the message
        DSB     SY
        MOV     a1, #-1
  [ DebugInterrupts
        STR     a1, LastInterrupt_IRQ
  ]
a213 1

d215 5
a219 7
        ADD     ip, a2, #(GICD_BASE + GICD_ISACTIVER)
        MOV     a3, a1, LSR #5  ; index = intno / 32
        ADD     ip, ip, a3, LSL #2
        LDR     a3, [ip, #0]    ; get old state
        AND     a1, a1, #31     ; bit   = intno % 32
        MOV     a1, a3, LSR a1  ; Shift and invert so 1=active
        AND     a1, a1, #1      ; 0 = not firing, 1 = firing
a295 4
    [ DebugInterrupts
        MOVEQ   ip, #-1
        STREQ   ip, LastInterrupt_FIQ
    ]
a352 4
    [ DebugInterrupts
        MOV     a1, #-1
        STR     a1, LastInterrupt_FIQ
    ]
a363 4
     [ DebugInterrupts
        MOV     a1, #-1
        STR     a1, LastInterrupt_FIQ
     ]
a401 11
    [ DebugInterrupts
        LDR     a1, LastInterrupt_FIQ
        CMP     a1, #0
        BLT     %FT10
        Push    "lr"
        BL      DebugHALPrint
        =       "HAL_FIQSource: Previous FIQ not cleared: ", 0
        DebugReg a1
        Pull    "lr"
10
    ]
a405 3
    [ DebugInterrupts
        STREQ   a1, LastInterrupt_FIQ
    ]
a410 3
    [ DebugInterrupts
        STRLO   a1, LastInterrupt_FIQ
    ]
a413 3
    [ DebugInterrupts
        STR     a1, LastInterrupt_FIQ
    ]
d428 60
@


1.2.2.1
log
@Initial SMP support
Detail:
  This is essentiall the same changes as OMAP4-0_52-1_52_2_1, except for HAL_SMPStartup, which needs to deal with GIC CPU interface initialisation.
  s/DBell, Makefile - Implement doorbell device
  s/Boot - Implement new SMP-related HAL entry points
  s/Interrupts - Remove DebugInterrupts code to make things easier to follow. Add a couple of macros for mapping IRQ numbers to register bits, tohelp with IRQ number translation. Implement new IRQ-related HAL entry points
  hdr/irqids543x - Offset the peripheral interrupt numbers to that 0-31 are core 0 private, 32-63 core 1 private, 64+ = peripheral
  hdr/StaticWS - Remove DebugInterrupts code. Reserve space for doorbell device.
  hdr/omap543x - Remove DebugInterrupts code. Add definitions for aux core boot registers. Extend address range that gets mapped in for MPU_INTC, to make sure that we also get the aux core boot registers
Admin:
  Tested on IGEPv5


Version 0.06, 1.5.2.2. Tagged as 'OMAP5-0_06-1_5_2_2'
@
text
@a22 1
        GET     Hdr:HALEntries
d43 6
a48 26
        EXPORT  HAL_IRQProperties
        EXPORT  HAL_IRQSetCores
        EXPORT  HAL_IRQGetCores

        ; $base += ($num >> 5) << 2
        ; $bit = 1 << ($num & 31)
        ; NE if $num >= 32
        ; $temp can be $num
        MACRO
        BitMap  $num, $base, $bit, $temp
        MOVS    $bit, $num, LSR #5
        AND     $temp, $num, #31
        ADD     $base, $base, $bit, LSL #2
        MOV     $bit, #1
        MOV     $bit, $bit, LSL $temp
        MEND

        ; As above, but $base = ($num >> 5) << 2
        MACRO
        BitMap0 $num, $base, $bit, $temp
        MOVS    $base, $num, LSR #5
        AND     $temp, $num, #31
        MOV     $base, $base, LSL #2
        MOV     $bit, #1
        MOV     $bit, $bit, LSL $temp
        MEND
d60 1
a60 1
        MOV     a4, #INTERRUPT_MAX-32
d116 9
d127 1
a127 1
HAL_IRQEnable   ROUT
d131 16
a146 8
        BitMap0 a1, a2, a3, a4
        CMP     a1, #32
        LDR     a4, MPU_INTC_Log
        SUBHS   a2, a2, #4 ; Remap to GIC registers (assume we won't get called with wrong private interrupt)
        ADD     a4, a4, #GICD_BASE + GICD_ISENABLER
        LDR     a1, [a4, a2] ; Get old state
        STR     a3, [a4, a2] ; Set new state
        AND     a1, a1, a3 ; Return value
d149 1
a149 1
HAL_IRQDisable  ROUT
d153 46
a198 19
        BitMap0 a1, a2, a3, a4
        CMP     a1, #32
        LDR     ip, MPU_INTC_Log
        SUBHS   a2, a2, #4 ; Remap to GIC registers (assume we won't get called with wrong private interrupt)
        ADD     a4, ip, #GICD_BASE + GICD_ICENABLER
        LDR     a2, [a4, a2]! ; Get old state
        STR     a3, [a4] ; Set new state
        LDR     a4, [a4, #GICD_ISACTIVER-GICD_ICENABLER] ; TODO could this be bogus? - if register isn't banked we'll do the wrong thing
        SUBHS   a1, a1, #32
        TST     a4, a3 ; Was it active?
        BEQ     %FT90
        CMPLO   a1, #16 ; LO if this is core 0 private, check to see if SGI
        ORRLO   a1, a1, #1<<10 ; Set opposite to current CPU
        ADD     a4, ip, #GICC_BASE
        STR     a1, [a4, #GICC_EOIR]
90
        AND     a1, a2, a3 ; Return value
        DSB     SY
        MOV     pc, lr
d200 10
a209 3
HAL_IRQClear    ROUT
        CMP     a1, #32
        SUBHS   a1, a1, #32     ; Map to GIC interrupt number
a210 6
        CMP     a1, #16         ; SGI?
        BHS     %FT10
        MRC     p15, 0, a2, c0, c0, 5
        TST     a2, #1
        ADDEQ   a1, a1, #1<<10  ; Assume it came from the other CPU
10
d216 4
d222 34
a255 1
HAL_IRQSource   ROUT
d260 13
a272 8
        CMP     a1, #INTERRUPT_MAX-32
        MOVHI   a1, #-1            ; Spurious interrupt, ignore it
        MOVHI   pc, lr
        MRC     p15, 0, a4, c0, c0, 5
        AND     a4, a4, #1
        CMP     a1, #32
        ADDLO   a1, a1, a4, LSL #5 ; Remap private interrupt
        ADDHS   a1, a1, #32        ; Remap shared interrupt
d280 1
d282 7
a288 5
        ADD     a2, a2, #(GICD_BASE + GICD_ISACTIVER)
        BitMap  a1, a2, a3, a4
        SUBNE   a2, a2, #4      ; Remap to GIC registers
        LDR     a1, [a2]        ; Get status
        AND     a1, a1, a3
d365 4
d426 4
d441 4
d483 11
d498 3
d506 3
d512 3
a528 60
; In: a1 = device number
; Out: a1 = IRQ mask
;      a2 = FIQ mask
;           bits 0-29 of each register give cores that the interrupt can be
;           assigned to
;           bit 30 = private flag
;           bit 31 = interrupt can be routed to multiple cores at once
HAL_IRQProperties
        ; 0-31 for core 0
        ; 32-63 for core 1
        ; 64+ for shared
        CMP     a1, #INTERRUPT_MAX
        MOVHS   a2, #0
        BHS     %FT10
        CMP     a1, #64
        MOVLO   a2, #2 + HALIRQProperty_Private
        MOVHS   a2, #3 + HALIRQProperty_Multicore
        CMP     a1, #32
        MOVLO   a2, #1 + HALIRQProperty_Private
10
        MOV     a1, a2
      [ :LNOT: FIQ_Supported
        MOV     a2, #0
      ]
        MOV     pc, lr

; In: a1 = device number
;     a2 = desired core mask
; Out: a1 = actual core mask
HAL_IRQSetCores
        CMP     a1, #INTERRUPT_MAX
        MOVHS   a1, #0
        MOVHS   pc, lr
        CMP     a1, #64
        BLO     %FT10
        LDR     a3, MPU_INTC_Log
        ADD     a3, a3, #GICD_BASE + GICD_ITARGETSR
        ADD     a3, a3, a1
        AND     a1, a2, #3
        STRB    a1, [a3, #-32] ; Update mapping
        MOV     pc, lr

HAL_IRQGetCores ; read-only version of IRQSetCores
        CMP     a1, #INTERRUPT_MAX
        MOVHS   a1, #0
        MOVHS   pc, lr
        CMP     a1, #64
        BLO     %FT10
        LDR     a3, MPU_INTC_Log
        ADD     a3, a3, #GICD_BASE + GICD_ITARGETSR
        ADD     a3, a3, a1
        LDRB    a1, [a3, #-32] ; Get mapping
        MOV     pc, lr

10
        CMP     a1, #32
        MOVHS   a1, #2
        MOVLO   a1, #1
        MOV     pc, lr

@


1.1
log
@Initial revision
@
text
@a26 1
        GET     hdr.Timers
a200 3
        ; This routine is also used to clear the timer interrupts
        ; It must also restart the INTC priority sorting, as it is called after every
        ; OS IRQ handler silences the interrupting device
a209 8
        SUB     a2, a1, #TIMER_IRQ_BASE
        CMP     a2, #TIMER_MAX
        BHS     %FT10
        LDR     a3, Timers_Log
        ADD     a3, a3, a2, LSL #TIMER_STRIDE_POW2
        MOV     a2, #7          ; Clear all interrupts
        STR     a2, [a3, #GPT_IRQSTATUS]
10
@


1.1.1.1
log
@Import of OMAP5 HAL
Admin:
  Submission from Willi Theiss
@
text
@@
