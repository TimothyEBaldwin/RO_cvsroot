head	4.5;
access;
symbols
	TCPIPLibs-5_66:4.5
	TCPIPLibs-5_65:4.5
	TCPIPLibs-5_64:4.5
	TCPIPLibs-5_63:4.5
	TCPIPLibs-5_62:4.5
	TCPIPLibs-5_61:4.5
	TCPIPLibs-5_60:4.5
	TCPIPLibs-5_59:4.5
	TCPIPLibs-5_58:4.5
	TCPIPLibs-5_57:4.5
	TCPIPLibs-5_56:4.5
	TCPIPLibs-5_55:4.5
	TCPIPLibs-5_54:4.5
	TCPIPLibs-5_53:4.5
	TCPIPLibs-5_52:4.5
	TCPIPLibs-5_51:4.5
	TCPIPLibs-5_50:4.5
	TCPIPLibs-5_49:4.5
	RO_5_07:4.5
	TCPIPLibs-5_48:4.5
	TCPIPLibs-5_47:4.5
	TCPIPLibs-5_46:4.5
	TCPIPLibs-5_45:4.5
	TCPIPLibs-5_44:4.5
	TCPIPLibs-5_43:4.5
	TCPIPLibs-5_42:4.5
	TCPIPLibs-5_41:4.5
	TCPIPLibs-5_40:4.5
	TCPIPLibs-5_39:4.5
	dellis_autobuild_BaseSW:4.5
	TCPIPLibs-5_38:4.5
	TCPIPLibs-5_37:4.5
	TCPIPLibs-5_36:4.5
	sbrodie_sedwards_16Mar2000:4.5
	TCPIPLibs-5_35:4.5
	TCPIPLibs-5_34:4.5
	TCPIPLibs-5_33:4.5
	TCPIPLibs-5_32:4.5
	TCPIPLibs-5_31:4.5
	dcotton_autobuild_BaseSW:4.5
	TCPIPLibs-5_30:4.5
	TCPIPLibs-5_29:4.5
	TCPIPLibs-5_28:4.4
	TCPIPLibs-5_27:4.4
	TCPIPLibs-5_26:4.4
	TCPIPLibs-5_25:4.4
	TCPIPLibs-5_24:4.3
	TCPIPLibs-5_23:4.3
	TCPIPLibs-5_22:4.2
	TCPIPLibs-5_21:4.2
	TCPIPLibs-5_20:4.2
	TCPIPLibs-5_19:4.1
	TCPIPLibs-5_18:4.1
	TCPIPLibs-5_17:4.1
	TCPIPLibs-5_16:4.1
	TCPIPLibs-5_15:4.1
	TCPIPLibs-5_14:4.1
	TCPIPLibs-5_13:4.1
	TCPIPLibs-5_12:4.1
	TCPIPLibs-5_11:4.1
	TCPIPLibs-5_10:4.1
	TCPIPLibs-5_09:4.1
	TCPIPLibs-5_08:4.1
	TCPIPLibs-5_07:4.1
	TCPIPLibs-5_06:4.1
	TCPIPLibs-5_05:4.1
	TCPIPLibs-5_04:4.1
	TCPIPLibs-5_03:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.10
	TCPIPLibs-5_02:4.1
	TCPIPLibs-5_01:4.1
	nicke_TCPIPLibs_25-9-98:4.1
	TCPIPLibs-5_00:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	Spinner:4.1
	Internet_5_07:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.4
	Ursula_19May1998_bp:4.1
	Ursula_19May1998:4.1.0.8
	rthornb_UrsulaBuild_01May1998:4.1
	celkins_Internet_506:4.1
	afrost_NC2_Generic:4.1.7.1
	afrost_Funai01-33:4.1.7.1
	Internet_505:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.4
	RCA:4.1.0.2
	import:4.1.7.1;
locks; strict;
comment	@# @;


4.5
date	99.07.22.09.49.21;	author kbracey;	state Exp;
branches;
next	4.4;

4.4
date	99.07.13.10.46.08;	author kbracey;	state Exp;
branches;
next	4.3;

4.3
date	99.07.08.15.10.36;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	99.06.30.13.20.42;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	97.03.06.14.27.40;	author rbuckley;	state Exp;
branches
	4.1.7.1;
next	;

4.1.7.1
date	97.03.06.14.27.40;	author rbuckley;	state Exp;
branches;
next	;


desc
@@


4.5
log
@Header fixes for Internet 5.33

Version 5.29. Tagged as 'TCPIPLibs-5_29'
@
text
@/*
 * Copyright (c) 1982, 1986, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)in_pcb.h	8.1 (Berkeley) 6/10/93
 */

#ifndef _NETINET_IN_PCB_H_
#define _NETINET_IN_PCB_H_

#include <sys/queue.h>

/*
 * Common structure pcb for internet protocol implementation.
 * Here are stored pointers to local and foreign host table
 * entries, local and foreign socket numbers, and pointers
 * up (to a socket structure) and down (to a protocol-specific)
 * control block.
 */
LIST_HEAD(inpcbhead, inpcb);
LIST_HEAD(inpcbporthead, inpcbport);
typedef	u_quad_t	inp_gen_t;

struct inpcb {
	LIST_ENTRY(inpcb) inp_hash;	/* hash list */
        struct  in_addr inp_faddr;      /* foreign host table entry */
        struct  in_addr inp_laddr;      /* local host table entry */
        u_short inp_fport;              /* foreign port */
        u_short inp_lport;              /* local port */
	LIST_ENTRY(inpcb) inp_list;	/* list for all PCBs of this proto */
        caddr_t inp_ppcb;               /* pointer to per-protocol pcb */
	struct	inpcbinfo *inp_pcbinfo;	/* PCB list info */
        struct  socket *inp_socket;     /* back pointer to socket */
        struct  mbuf *inp_options;      /* IP options */
        struct  route inp_route;        /* placeholder for routing entry */
	int	inp_flags;		/* generic IP/datagram flags */
	u_char	inp_ip_tos;		/* type of service proto */
	u_char	inp_ip_ttl;		/* time to live proto */
	u_char	inp_ip_p;		/* protocol proto */
	u_char	pad[1];			/* alignment */
	struct	ip_moptions *inp_moptions; /* IP multicast options */
	LIST_ENTRY(inpcb) inp_portlist;	/* list for this PCB's local port */
	struct	inpcbport *inp_phd;	/* head of this list */
	inp_gen_t inp_gencnt;		/* generation count of this instance */
};

/*
 * Interface exported to userland by various protocols which use
 * inpcbs.  Hack alert -- only define if struct xsocket is in scope.
 */
#ifdef _SYS_SOCKETVAR_H_
struct	xinpcb {
	size_t	xi_len;		/* length of this structure */
	struct	inpcb xi_inp;
	struct	xsocket xi_socket;
	u_quad_t	xi_alignment_hack;
};

struct	xinpgen {
	size_t	xig_len;	/* length of this structure */
	u_int	xig_count;	/* number of PCBs at this time */
	inp_gen_t xig_gen;	/* generation count at this time */
	so_gen_t xig_sogen;	/* socket generation count at this time */
};
#endif /* _SYS_SOCKETVAR_H_ */

struct inpcbport {
	LIST_ENTRY(inpcbport) phd_hash;
	struct inpcbhead phd_pcblist;
	u_short phd_port;
};

struct inpcbinfo {
	struct inpcbhead *hashbase;
	u_long	hashmask;
	struct	inpcbporthead *porthashbase;
	u_long	porthashmask;
	struct inpcbhead *listhead;
	unsigned long hashsize;
	unsigned short lastport;
	u_int	ipi_count;	/* number of pcbs in this list */
	u_quad_t ipi_gencnt;	/* current generation count */
};

/* flags in inp_flags: */
#define	INP_RECVOPTS		0x01	/* receive incoming IP options */
#define	INP_RECVRETOPTS		0x02	/* receive IP options for reply */
#define	INP_RECVDSTADDR		0x04	/* receive IP dst address */
#define	INP_HDRINCL		0x08	/* user supplies entire IP header */
#define	INP_HIGHPORT		0x10	/* user wants "high" port binding */
#define	INP_LOWPORT		0x20	/* user wants "low" port binding */
#define	INP_ANONPORT		0x40	/* port chosen for user */
#define	INP_RECVIF		0x80	/* receive incoming interface */
#define	INP_MTUDISC		0x100	/* user can do MTU discovery */
#define	INP_CONTROLOPTS		(INP_RECVOPTS|INP_RECVRETOPTS|INP_RECVDSTADDR|\
					INP_RECVIF)

#define INPLOOKUP_WILDCARD      1

#define sotoinpcb(so)   ((struct inpcb *)(so)->so_pcb)

#ifdef KERNEL
void	 in_losing(struct inpcb *);
int	 in_pcballoc(struct socket *, struct inpcbinfo *);
int	 in_pcbbind(struct inpcb *, struct mbuf *);
int	 in_pcbconnect(struct inpcb *, struct mbuf *);
void	 in_pcbdetach(struct inpcb *);
void	 in_pcbdisconnect(struct inpcb *);
void	 in_pcbinshash(struct inpcb *);
int	 in_pcbladdr(struct inpcb *, struct mbuf *,
	    struct sockaddr_in **);
struct inpcb *
	 in_pcblookup(struct inpcbhead *,
	    struct in_addr, u_int, struct in_addr, u_int, int);
struct inpcb *
	 in_pcblookuphash(struct inpcbinfo *,
	    struct in_addr, u_int, struct in_addr, u_int);
void	 in_pcbnotify(struct inpcbhead *, struct sockaddr *,
	    u_int, struct in_addr, u_int, int, void (*)(struct inpcb *, int));
void	 in_pcbrehash(struct inpcb *);
void	 in_rtchange(struct inpcb *, int);
void	 in_setpeeraddr(struct inpcb *, struct mbuf *);
void	 in_setsockaddr(struct inpcb *, struct mbuf *);
#endif

#endif
@


4.4
log
@Added err_set_silent() to unixlib err() functions.
Added strdup() to unixlib.
Added sysctlbyname() to inetlib.
All the header file changes for Internet 5.31.

Version 5.25. Tagged as 'TCPIPLibs-5_25'
@
text
@d49 2
@


4.3
log
@Assorted changes from FreeBSD. Might be some slight compatibility hiccoughs
with some sources - might need to #include a bit more before <net/if.h>.

Version 5.23. Tagged as 'TCPIPLibs-5_23'
@
text
@d68 29
d100 4
a104 1
	struct inpcbhead *hashbase;
d107 2
@


4.2
log
@Header changes required by Internet 5.27. Note that these changes affect
the layout of several structures peeked by such tools as InetStat. These will
need recompiling for Internet 5.27.

Version 5.20. Tagged as 'TCPIPLibs-5_20'
@
text
@a80 1
#define	INP_CONTROLOPTS		(INP_RECVOPTS|INP_RECVRETOPTS|INP_RECVDSTADDR)
d84 5
@


4.1
log
@Initial revision
@
text
@d39 2
d51 1
a51 3
	LIST_ENTRY(inpcb) inp_list;		/* list for all PCBs of this proto */
	LIST_ENTRY(inpcb) inp_hash;		/* hash list */
	struct	inpcbinfo *inp_pcbinfo;
d53 1
a54 1
        struct  in_addr inp_laddr;      /* local host table entry */
d56 3
d60 1
a60 1
        caddr_t inp_ppcb;               /* pointer to per-protocol pcb */
d63 4
a66 2
	struct	ip inp_ip;		/* header prototype; should have more */
        struct  mbuf *inp_options;      /* IP options */
@


4.1.7.1
log
@Imported from Babel
@
text
@@
