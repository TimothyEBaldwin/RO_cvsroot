head	4.2;
access;
symbols
	TCPIPLibs-5_66:4.2
	TCPIPLibs-5_65:4.2
	TCPIPLibs-5_64:4.2
	TCPIPLibs-5_63:4.2
	TCPIPLibs-5_62:4.2
	TCPIPLibs-5_61:4.2
	TCPIPLibs-5_60:4.2
	TCPIPLibs-5_59:4.2
	TCPIPLibs-5_58:4.2
	TCPIPLibs-5_57:4.2
	TCPIPLibs-5_56:4.2
	TCPIPLibs-5_55:4.2
	TCPIPLibs-5_54:4.2
	TCPIPLibs-5_53:4.2
	TCPIPLibs-5_52:4.2
	TCPIPLibs-5_51:4.2
	TCPIPLibs-5_50:4.2
	TCPIPLibs-5_49:4.2
	RO_5_07:4.2
	TCPIPLibs-5_48:4.2
	TCPIPLibs-5_47:4.2
	TCPIPLibs-5_46:4.2
	TCPIPLibs-5_45:4.2
	TCPIPLibs-5_44:4.2
	TCPIPLibs-5_43:4.2
	TCPIPLibs-5_42:4.2
	TCPIPLibs-5_41:4.2
	TCPIPLibs-5_40:4.2
	TCPIPLibs-5_39:4.2
	dellis_autobuild_BaseSW:4.2
	TCPIPLibs-5_38:4.2
	TCPIPLibs-5_37:4.2
	TCPIPLibs-5_36:4.2
	sbrodie_sedwards_16Mar2000:4.2
	TCPIPLibs-5_35:4.2
	TCPIPLibs-5_34:4.2
	TCPIPLibs-5_33:4.2
	TCPIPLibs-5_32:4.2
	TCPIPLibs-5_31:4.2
	dcotton_autobuild_BaseSW:4.2
	TCPIPLibs-5_30:4.2
	TCPIPLibs-5_29:4.2
	TCPIPLibs-5_28:4.2
	TCPIPLibs-5_27:4.2
	TCPIPLibs-5_26:4.2
	TCPIPLibs-5_25:4.2
	TCPIPLibs-5_24:4.2
	TCPIPLibs-5_23:4.2
	TCPIPLibs-5_22:4.2
	TCPIPLibs-5_21:4.2
	TCPIPLibs-5_20:4.2
	TCPIPLibs-5_19:4.2
	TCPIPLibs-5_18:4.2
	TCPIPLibs-5_17:4.2
	TCPIPLibs-5_16:4.2
	TCPIPLibs-5_15:4.2
	TCPIPLibs-5_14:4.2
	TCPIPLibs-5_13:4.2
	TCPIPLibs-5_12:4.2
	TCPIPLibs-5_11:4.2
	TCPIPLibs-5_10:4.2
	TCPIPLibs-5_09:4.2
	TCPIPLibs-5_08:4.1
	TCPIPLibs-5_07:4.1
	TCPIPLibs-5_06:4.1
	TCPIPLibs-5_05:4.1
	TCPIPLibs-5_04:4.1
	TCPIPLibs-5_03:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.10
	TCPIPLibs-5_02:4.1
	TCPIPLibs-5_01:4.1
	nicke_TCPIPLibs_25-9-98:4.1
	TCPIPLibs-5_00:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	Spinner:4.1
	Internet_5_07:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.4
	Ursula_19May1998_bp:4.1
	Ursula_19May1998:4.1.0.8
	rthornb_UrsulaBuild_01May1998:4.1
	celkins_Internet_506:4.1
	afrost_NC2_Generic:4.1.7.1
	afrost_Funai01-33:4.1.7.1
	Internet_505:4.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.4
	RCA:4.1.0.2
	import:4.1.7.1;
locks; strict;
comment	@# @;


4.2
date	99.03.25.14.36.51;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	97.03.06.14.27.45;	author rbuckley;	state Exp;
branches
	4.1.7.1;
next	;

4.1.7.1
date	97.03.06.14.27.45;	author rbuckley;	state Exp;
branches;
next	;


desc
@@


4.2
log
@  Support for DHCP module.
Detail:
  Added a new ioctl (SIOCGWHOIAMD) for the private use of the
    DHCP module.
  Defined structure for ioctl data in protocols/dhcp.h.  The
    "ifr_flags" field is the union part that is used to pass
    action flags to Internet.
  Updated comment that protocol is defined by RFC2131 & RFC2132.
Admin:
  Software which includes protocols/dhcp.h may need modification
    to ensure that net/if.h is included too, as it requires a
    definition of struct ifreq.  No software in Renaissance is
    believed to be affected currently.
  Required by Internet 5.20
    (Internet-5_20 in RiscOS/Sources/Networking/AUN/Internet)
  Required by DHCP 0.00
    (DHCP-0_00 in RiscOS/Sources/Networking/DHCP)


Version 5.09. Tagged as 'TCPIPLibs-5_09'
@
text
@/*-
 * Copyright (c) 1982, 1986, 1990, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)sockio.h	8.1 (Berkeley) 3/28/94
 */

/*
 * For backwards compatibility, some of the new 4.4BSD socket ioctls have been
 * renumbered so as not to clash with existing RISC OS-specific ioctls
 */
#ifndef	_SYS_SOCKIO_H_
#define	_SYS_SOCKIO_H_

#include <sys/ioccom.h>

/* Socket ioctl's. */
#define	SIOCSHIWAT	 _IOW('s',  0, int)		/* set high watermark */
#define	SIOCGHIWAT	 _IOR('s',  1, int)		/* get high watermark */
#define	SIOCSLOWAT	 _IOW('s',  2, int)		/* set low watermark */
#define	SIOCGLOWAT	 _IOR('s',  3, int)		/* get low watermark */
#define	SIOCATMARK	 _IOR('s',  7, int)		/* at oob mark? */
#define	SIOCSPGRP	 _IOW('s',  8, int)		/* set process group */
#define	SIOCGPGRP	 _IOR('s',  9, int)		/* get process group */

#define	SIOCADDRT	 _IOW('r', 10, struct ortentry)	/* add route */
#define	SIOCDELRT	 _IOW('r', 11, struct ortentry)	/* delete route */
#define	SIOCSETRTINFO	_IOWR('r', 12, struct fullrtentry) /* change aux info */
#define	SIOCGETRTINFO	_IOWR('r', 13, struct fullrtentry) /* read aux info */
#define	SIOCGETVIFINF	_IOWR('r', 14, struct vif_conf)   /* read m/c vifs  */
#define SIOCGETVIFCNT	_IOWR('r', 15, struct sioc_vif_req)/* get vif pkt cnt */
#define SIOCGETSGCNT	_IOWR('r', 16, struct sioc_sg_req) /* get s,g pkt cnt */

#define	SIOCSIFADDR	 _IOW('i', 12, struct ifreq)	/* set ifnet address */
#ifdef COMPAT_INET4
#define	SIOCGIFADDR	_IOWR('i', 13, struct ifreq)	/* get ifnet address */
#define	NSIOCGIFADDR	_IOWR('i', 99, struct nifreq)	/* get ifnet address */
#else
#define	OSIOCGIFADDR	_IOWR('i', 13, struct oifreq)	/* get ifnet address */
#define	SIOCGIFADDR	_IOWR('i', 99, struct ifreq)	/* get ifnet address */
#endif
#define	SIOCSIFDSTADDR	 _IOW('i', 14, struct ifreq)	/* set p-p address */
#ifdef COMPAT_INET4
#define	SIOCGIFDSTADDR	_IOWR('i', 15, struct ifreq)	/* get p-p address */
#define	NSIOCGIFDSTADDR	_IOWR('i', 98, struct nifreq)	/* get p-p address */
#else
#define	OSIOCGIFDSTADDR	_IOWR('i', 15, struct oifreq)	/* get p-p address */
#define	SIOCGIFDSTADDR	_IOWR('i', 98, struct ifreq)	/* get p-p address */
#endif
#define	SIOCSIFFLAGS	 _IOW('i', 16, struct ifreq)	/* set ifnet flags */
#define	SIOCGIFFLAGS	_IOWR('i', 17, struct ifreq)	/* get ifnet flags */
#ifdef COMPAT_INET4
#define	SIOCGIFBRDADDR	_IOWR('i', 18, struct ifreq)	/* get broadcast addr */
#define	NSIOCGIFBRDADDR	_IOWR('i', 97, struct nifreq)	/* get broadcast addr */
#else
#define	OSIOCGIFBRDADDR	_IOWR('i', 18, struct oifreq)	/* get broadcast addr */
#define	SIOCGIFBRDADDR	_IOWR('i', 97, struct ifreq)	/* get broadcast addr */
#endif
#define	SIOCSIFBRDADDR	 _IOW('i', 19, struct ifreq)	/* set broadcast addr */
#ifdef COMPAT_INET4
#define	SIOCGIFCONF	_IOWR('i', 20, struct ifconf)	/* get ifnet list */
#define	NSIOCGIFCONF	_IOWR('i', 96, struct nifconf)	/* get ifnet list */
#define	SIOCGIFNETMASK	_IOWR('i', 21, struct ifreq)	/* get net addr mask */
#define	NSIOCGIFNETMASK	_IOWR('i', 95, struct nifreq)	/* get net addr mask */
#else
#define	OSIOCGIFCONF	_IOWR('i', 20, struct oifconf)	/* get ifnet list */
#define	SIOCGIFCONF	_IOWR('i', 96, struct ifconf)	/* get ifnet list */
#define	OSIOCGIFNETMASK	_IOWR('i', 21, struct oifreq)	/* get net addr mask */
#define	SIOCGIFNETMASK	_IOWR('i', 95, struct ifreq)	/* get net addr mask */
#endif
#define	SIOCSIFNETMASK	 _IOW('i', 22, struct ifreq)	/* set net addr mask */
#define	SIOCGIFMETRIC	_IOWR('i', 23, struct ifreq)	/* get IF metric */
#define	SIOCSIFMETRIC	 _IOW('i', 24, struct ifreq)	/* set IF metric */
#define	SIOCDIFADDR	 _IOW('i', 94, struct ifreq)	/* delete IF addr */
#define	SIOCAIFADDR	 _IOW('i', 93, struct ifaliasreq)/* add/chg IF alias */

#ifdef __riscos
#define SIOCGWHOIAMR	_IOWR('i', 25, struct ifreq)	/* get IP adr via REVARP */
#define SIOCGWHOIAMB	_IOWR('i', 26, struct ifreq)	/* get IP adr via BOOTP */
#define SIOCGWHOIAMRB	_IOWR('i', 27, struct ifreq)	/* get IP adr via REVARP or BOOTP */
#define SIOCGWHOIAMM	_IOWR('i', 28, struct ifreq)	/* get net addr mask via ICMP */
#define SIOCGWHOIAMMNS	_IOWR('i', 29, struct ifreq)	/* get net addr via MNS Rarp */
#define SIOCSWHOTHEYARE	 _IOW('i', 34, struct ifreq)    /* broadcast MNS Rarp replies */
#define SIOCGTCPIDLE	 _IOR('i', 35, int)		/* get tcp_keepidle */
#define SIOCSTCPIDLE	 _IOW('i', 36, int)		/* set tcp_keepidle */
#define SIOCGTCPCNT	 _IOR('i', 37, int)		/* get tcp_keepcnt */
#define SIOCSTCPCNT	 _IOW('i', 38, int)		/* set tcp_keepcnt */
#define SIOCGWHOIAMD    _IOWR('i', 41, struct ifdhcpreq)/* send DHCP messages */
#endif

#define	SIOCADDMULTI	 _IOW('i', 49, struct ifreq)	/* add m'cast addr */
#define	SIOCDELMULTI	 _IOW('i', 50, struct ifreq)	/* del m'cast addr */
#define SIOCGIFMTU	_IOWR('i', 39, struct ifreq)	/* get IF mtu */
#define SIOCSIFMTU	 _IOW('i', 40, struct ifreq)	/* set IF mtu */
#define SIOCGIFPHYS	_IOWR('i', 53, struct ifreq)	/* get IF wire */
#define SIOCSIFPHYS	 _IOW('i', 54, struct ifreq)	/* set IF wire */

#endif /* !_SYS_SOCKIO_H_ */
@


4.1
log
@Initial revision
@
text
@d116 1
@


4.1.7.1
log
@Imported from Babel
@
text
@@
