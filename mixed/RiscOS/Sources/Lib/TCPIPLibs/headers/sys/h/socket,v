head	4.5;
access;
symbols
	TCPIPLibs-5_66:4.5
	TCPIPLibs-5_65:4.4
	TCPIPLibs-5_64:4.4
	TCPIPLibs-5_63:4.4
	TCPIPLibs-5_62:4.4
	TCPIPLibs-5_61:4.4
	TCPIPLibs-5_60:4.4
	TCPIPLibs-5_59:4.4
	TCPIPLibs-5_58:4.4
	TCPIPLibs-5_57:4.4
	TCPIPLibs-5_56:4.4
	TCPIPLibs-5_55:4.4
	TCPIPLibs-5_54:4.4
	TCPIPLibs-5_53:4.4
	TCPIPLibs-5_52:4.4
	TCPIPLibs-5_51:4.4
	TCPIPLibs-5_50:4.4
	TCPIPLibs-5_49:4.4
	RO_5_07:4.4
	TCPIPLibs-5_48:4.4
	TCPIPLibs-5_47:4.4
	TCPIPLibs-5_46:4.4
	TCPIPLibs-5_45:4.4
	TCPIPLibs-5_44:4.4
	TCPIPLibs-5_43:4.4
	TCPIPLibs-5_42:4.4
	TCPIPLibs-5_41:4.4
	TCPIPLibs-5_40:4.4
	TCPIPLibs-5_39:4.4
	dellis_autobuild_BaseSW:4.4
	TCPIPLibs-5_38:4.4
	TCPIPLibs-5_37:4.4
	TCPIPLibs-5_36:4.4
	sbrodie_sedwards_16Mar2000:4.4
	TCPIPLibs-5_35:4.4
	TCPIPLibs-5_34:4.4
	TCPIPLibs-5_33:4.4
	TCPIPLibs-5_32:4.4
	TCPIPLibs-5_31:4.4
	dcotton_autobuild_BaseSW:4.4
	TCPIPLibs-5_30:4.4
	TCPIPLibs-5_29:4.3
	TCPIPLibs-5_28:4.3
	TCPIPLibs-5_27:4.3
	TCPIPLibs-5_26:4.3
	TCPIPLibs-5_25:4.3
	TCPIPLibs-5_24:4.3
	TCPIPLibs-5_23:4.3
	TCPIPLibs-5_22:4.2
	TCPIPLibs-5_21:4.2
	TCPIPLibs-5_20:4.2
	TCPIPLibs-5_19:4.2
	TCPIPLibs-5_18:4.2
	TCPIPLibs-5_17:4.2
	TCPIPLibs-5_16:4.2
	TCPIPLibs-5_15:4.2
	TCPIPLibs-5_14:4.2
	TCPIPLibs-5_13:4.2
	TCPIPLibs-5_12:4.2
	TCPIPLibs-5_11:4.2
	TCPIPLibs-5_10:4.2
	TCPIPLibs-5_09:4.2
	TCPIPLibs-5_08:4.2
	TCPIPLibs-5_07:4.2
	TCPIPLibs-5_06:4.2
	TCPIPLibs-5_05:4.2
	TCPIPLibs-5_04:4.2
	TCPIPLibs-5_03:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	Ursula_RiscPC:4.2.0.6
	TCPIPLibs-5_02:4.2
	TCPIPLibs-5_01:4.2
	nicke_TCPIPLibs_25-9-98:4.2
	TCPIPLibs-5_00:4.2
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	Spinner:4.2
	Internet_5_07:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	Ursula_bp:4.2
	Ursula:4.2.0.4
	Ursula_19May1998_bp:4.2
	Ursula_19May1998:4.2.0.2
	rthornb_UrsulaBuild_01May1998:4.2
	celkins_Internet_506:4.2
	afrost_NC2_Generic:4.1.7.2
	afrost_Funai01-33:4.1.7.2
	Internet_505:4.2
	Spinner_RCA116:4.1.7.2
	Spinner_B20_2:4.1.7.2
	Spinner_19_3:4.1.7.2
	Spinner_B18:4.1.7.2
	Spinner_B17:4.1.7.2
	Spinner_B15:4.1.7.2
	Spinner_B14:4.1.7.2
	Spinner_B13:4.1.7.2
	Spinner_B12:4.1.7.2
	Spinner_B10:4.1.7.2
	Spin_merge:4.1.7.2
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.2
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.4
	RCA:4.1.0.2
	import:4.1.7.1;
locks; strict;
comment	@# @;


4.5
date	2018.08.25.19.53.50;	author rool;	state Exp;
branches;
next	4.4;
commitid	0Awdheg8IUUDtxPA;

4.4
date	99.07.28.11.24.15;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	99.07.08.15.10.40;	author kbracey;	state Exp;
branches;
next	4.2;

4.2
date	97.05.21.03.17.30;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	97.03.06.14.27.44;	author rbuckley;	state Exp;
branches
	4.1.7.1;
next	;

4.1.7.1
date	97.03.06.14.27.44;	author rbuckley;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	97.04.15.13.40.04;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.5
log
@Add support for RFC2553
Detail:
  headers/net/if.h: new defines, structs, prototypes per RFC2553.
  headers/netdb.h: new defines, structs, prototypes per RFC2553 (from FreeBSD revision 102227).
  headers/sys/socket.h: portability sockaddr_storage struct, extend list of PF_ and AF_ defines (from FreeBSD revision 102227).
  headers/netinet/in.h: new defines, structs, prototypes per RFC2553 (from FreeBSD in6.h revision 102227)
  inetlib/if_indextoname.c
          if_nameindex.c
          if_nametoindex.c: import of new interface functions (from FreeBSD revision 100138).
          in6addr.c: constant structs for in6addr_any and in6addr_loopback per RFC2553.
          getnainfo.c: import of new function (from FreeBSD revision 158790).
          getipnode.c: new (with hostentdup based on _hpcopy from FreeBSD revision 103335).
          getadinfo.c: new (with portions based on FreeBSD revision 103640).
  LibraryDoc: updated with summaries of the new functions in Inetlib.
Admin:
  Test harness in test/rfc2553.c exercises most of the new functionality.
  Submission for TCP/IP bounty.

Version 5.66. Tagged as 'TCPIPLibs-5_66'
@
text
@/*
 * Copyright (c) 1982, 1985, 1986, 1988, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)socket.h	8.4 (Berkeley) 2/21/94
 */

#ifndef _SYS_SOCKET_H_
#define	_SYS_SOCKET_H_

/*
 * Definitions related to sockets: types, address families, options.
 */

/*
 * Data types.
 */
#ifndef _SA_FAMILY_T_DECLARED
#define _SA_FAMILY_T_DECLARED
typedef u_char		sa_family_t;
#endif
#ifndef _SOCKLEN_T_DECLARED 
#define _SOCKLEN_T_DECLARED
typedef u_int32_t	socklen_t;
#endif

/*
 * Types
 */
#define SOCK_STREAM     1               /* stream socket */
#define SOCK_DGRAM      2               /* datagram socket */
#define SOCK_RAW        3               /* raw-protocol interface */
#define SOCK_RDM        4               /* reliably-delivered message */
#define SOCK_SEQPACKET  5               /* sequenced packet stream */

/*
 * Option flags per-socket.
 */
#define SO_DEBUG        0x0001          /* turn on debugging info recording */
#define SO_ACCEPTCONN   0x0002          /* socket has had listen() */
#define SO_REUSEADDR    0x0004          /* allow local address reuse */
#define SO_KEEPALIVE    0x0008          /* keep connections alive */
#define SO_DONTROUTE    0x0010          /* just use interface addresses */
#define SO_BROADCAST    0x0020          /* permit sending of broadcast msgs */
#define SO_USELOOPBACK  0x0040          /* bypass hardware when possible */
#define SO_LINGER       0x0080          /* linger on close if data present */
#define SO_OOBINLINE    0x0100          /* leave received OOB data in line */
#define	SO_REUSEPORT	0x0200		/* allow local address & port reuse */
#define	SO_TIMESTAMP	0x0400		/* timestamp received dgram traffic */

/*
 * Additional options, not kept in so_options.
 */
#define SO_SNDBUF       0x1001          /* send buffer size */
#define SO_RCVBUF       0x1002          /* receive buffer size */
#define SO_SNDLOWAT     0x1003          /* send low-water mark */
#define SO_RCVLOWAT     0x1004          /* receive low-water mark */
#define SO_SNDTIMEO     0x1005          /* send timeout */
#define SO_RCVTIMEO     0x1006          /* receive timeout */
#define SO_ERROR        0x1007          /* get error status and clear */
#define SO_TYPE         0x1008          /* get socket type */

/*
 * Structure used for manipulating linger option.
 */
struct  linger {
        int     l_onoff;                /* option on/off */
        int     l_linger;               /* linger time */
};

/*
 * Level number for (get/set)sockopt() to apply to socket itself.
 */
#define SOL_SOCKET      0xffff          /* options for socket level */

/*
 * Address families.
 */
#define AF_UNSPEC       0               /* unspecified */
#define AF_LOCAL        AF_UNIX         /* local to host (pipes, portals) */
#define AF_UNIX         1               /* standardized name for AF_LOCAL */
#define AF_RISCOS       AF_UNIX         /* local to RISC OS host */
#define AF_INET         2               /* internetwork: UDP, TCP, etc. */
#define AF_IMPLINK      3               /* arpanet imp addresses */
#define AF_PUP          4               /* pup protocols: e.g. BSP */
#define AF_CHAOS        5               /* mit CHAOS protocols */
#define AF_NS           6               /* XEROX NS protocols */
#define AF_ISO          7               /* ISO protocols */
#define	AF_OSI		AF_ISO
#define AF_ECMA         8               /* european computer manufacturers */
#define AF_DATAKIT      9               /* datakit protocols */
#define AF_CCITT        10              /* CCITT protocols, X.25 etc */
#define AF_SNA          11              /* IBM SNA */
#define AF_DECnet       12              /* DECnet */
#define AF_DLI          13              /* Direct data link interface */
#define AF_LAT          14              /* LAT */
#define AF_HYLINK       15              /* NSC Hyperchannel */
#define AF_APPLETALK    16              /* Apple Talk */
#define	AF_ROUTE	17		/* Internal Routing Protocol */
#define	AF_LINK		18		/* Link layer interface */
#define	pseudo_AF_XTP	19		/* eXpress Transfer Protocol (no AF) */
#define	AF_COIP		20		/* connection-oriented IP, aka ST II */
#define	AF_CNT		21		/* Computer Network Technology */
#define pseudo_AF_RTIP	22		/* Help Identify RTIP packets */
#define	AF_IPX		23		/* Novell Internet Protocol */
#define	AF_SIP		24		/* Simple Internet Protocol */
#define	pseudo_AF_PIP	25		/* Help Identify PIP packets */
#define	AF_ISDN		26		/* Integrated Services Digital Network*/
#define	AF_E164		AF_ISDN		/* CCITT E.164 recommendation */
#define pseudo_AF_KEY   27              /* Internal key-management function */
#define AF_INET6        28              /* IPv6 */
#define AF_NATM         29              /* native ATM access */
#define AF_ATM          30              /* ATM */
#define pseudo_AF_HDRCMPLT 31		/* Used by BPF to not rewrite headers
					 * in interface output routine
					 */
#define	AF_NETGRAPH	32		/* Netgraph sockets */

#define	AF_MAX		33

/*
 * Structure used by kernel to store most
 * addresses.
 */
#ifdef COMPAT_INET4
struct sockaddr {
	u_short	sa_family;		/* address family */
	char	sa_data[14];		/* up to 14 bytes of direct address */
};

struct nsockaddr {
#else
struct sockaddr {
#endif
	u_char	sa_len;			/* total length */
	u_char	sa_family;		/* address family */
	char	sa_data[14];		/* actually longer; address value */
};
#define	SOCK_MAXADDRLEN	255		/* longest possible addresses */

/*
 * Structure used by kernel to pass protocol
 * information in raw sockets.
 */
struct sockproto {
        u_short sp_family;              /* address family */
        u_short sp_protocol;            /* protocol */
};

/*
 * Protocol-independent placeholder for socket addresses
 */
#define _SS_MAXSIZE	128
#define	_SS_ALIGNSIZE	(sizeof(int64_t))
#define	_SS_PAD1SIZE	(_SS_ALIGNSIZE - sizeof(u_char) - sizeof(sa_family_t))
#define	_SS_PAD2SIZE	(_SS_MAXSIZE - sizeof(u_char) - sizeof(sa_family_t) - \
				_SS_PAD1SIZE - _SS_ALIGNSIZE)

struct sockaddr_storage {
	u_char		ss_len;		/* address length */
	sa_family_t	ss_family;	/* address family */
	char		__ss_pad1[_SS_PAD1SIZE];
	int64_t		__ss_align;	/* force desired structure storage alignment */
	char		__ss_pad2[_SS_PAD2SIZE];
};

/*
 * Protocol families, same as address families for now.
 */
#define PF_UNSPEC       AF_UNSPEC
#define PF_LOCAL        AF_LOCAL
#define PF_RISCOS       PF_LOCAL	/* backward compatibility */
#define PF_INET         AF_INET
#define PF_IMPLINK      AF_IMPLINK
#define PF_PUP          AF_PUP
#define PF_CHAOS        AF_CHAOS
#define PF_NS           AF_NS
#define PF_ISO          AF_ISO
#define PF_ECMA         AF_ECMA
#define PF_DATAKIT      AF_DATAKIT
#define PF_CCITT        AF_CCITT
#define PF_SNA          AF_SNA
#define PF_DECnet       AF_DECnet
#define PF_DLI          AF_DLI
#define PF_LAT          AF_LAT
#define PF_HYLINK       AF_HYLINK
#define PF_APPLETALK    AF_APPLETALK
#define	PF_ROUTE	AF_ROUTE
#define	PF_LINK		AF_LINK
#define	PF_XTP		pseudo_AF_XTP	/* really just proto family, no AF */
#define	PF_COIP		AF_COIP
#define	PF_CNT		AF_CNT
#define	PF_SIP		AF_SIP
#define	PF_IPX		AF_IPX		/* same format as AF_NS */
#define PF_RTIP		pseudo_AF_FTIP	/* same format as AF_INET */
#define PF_PIP		pseudo_AF_PIP
#define	PF_ISDN		AF_ISDN
#define	PF_KEY		pseudo_AF_KEY
#define	PF_INET6	AF_INET6
#define	PF_NATM		AF_NATM
#define	PF_ATM		AF_ATM
#define	PF_NETGRAPH	AF_NETGRAPH

#define PF_MAX          AF_MAX

/*
 * Definitions for network related sysctl, CTL_NET.
 *
 * Second level is protocol family.
 * Third level is protocol number.
 *
 * Further levels are defined by the individual families below.
 */
#define NET_MAXID	AF_MAX

#define CTL_NET_NAMES { \
	{ 0, 0 }, \
	{ "unix", CTLTYPE_NODE }, \
	{ "inet", CTLTYPE_NODE }, \
	{ "implink", CTLTYPE_NODE }, \
	{ "pup", CTLTYPE_NODE }, \
	{ "chaos", CTLTYPE_NODE }, \
	{ "xerox_ns", CTLTYPE_NODE }, \
	{ "iso", CTLTYPE_NODE }, \
	{ "emca", CTLTYPE_NODE }, \
	{ "datakit", CTLTYPE_NODE }, \
	{ "ccitt", CTLTYPE_NODE }, \
	{ "ibm_sna", CTLTYPE_NODE }, \
	{ "decnet", CTLTYPE_NODE }, \
	{ "dec_dli", CTLTYPE_NODE }, \
	{ "lat", CTLTYPE_NODE }, \
	{ "hylink", CTLTYPE_NODE }, \
	{ "appletalk", CTLTYPE_NODE }, \
	{ "route", CTLTYPE_NODE }, \
	{ "link_layer", CTLTYPE_NODE }, \
	{ "xtp", CTLTYPE_NODE }, \
	{ "coip", CTLTYPE_NODE }, \
	{ "cnt", CTLTYPE_NODE }, \
	{ "rtip", CTLTYPE_NODE }, \
	{ "ipx", CTLTYPE_NODE }, \
	{ "sip", CTLTYPE_NODE }, \
	{ "pip", CTLTYPE_NODE }, \
	{ "isdn", CTLTYPE_NODE }, \
	{ "key", CTLTYPE_NODE }, \
	{ "inet6", CTLTYPE_NODE }, \
	{ "natm", CTLTYPE_NODE }, \
}

/*
 * PF_ROUTE - Routing table
 *
 * Three additional levels are defined:
 *	Fourth: address family, 0 is wildcard
 *	Fifth: type of info, defined below
 *	Sixth: flag(s) to mask with for NET_RT_FLAGS
 */
#define NET_RT_DUMP	1		/* dump; may limit to a.f. */
#define NET_RT_FLAGS	2		/* by flags, e.g. RESOLVING */
#define NET_RT_IFLIST	3		/* survey interface list */
#define	NET_RT_MAXID	4

#define CTL_NET_RT_NAMES { \
	{ 0, 0 }, \
	{ "dump", CTLTYPE_STRUCT }, \
	{ "flags", CTLTYPE_STRUCT }, \
	{ "iflist", CTLTYPE_STRUCT }, \
}

/*
 * Maximum queue length specifiable by listen.
 */
#define	SOMAXCONN	128

/*
 * Message header for recvmsg and sendmsg calls.
 */
#ifdef COMPAT_INET4
struct msghdr {
	caddr_t	msg_name;		/* optional address */
	int	msg_namelen;		/* size of address */
	struct	iovec *msg_iov;		/* scatter/gather array */
	int	msg_iovlen;		/* # elements in msg_iov */
	caddr_t	msg_accrights;		/* access rights sent/received */
	int	msg_accrightslen;
};

struct nmsghdr {
#else
struct msghdr {
#endif
        caddr_t msg_name;               /* optional address */
        u_int   msg_namelen;            /* size of address */
        struct  iovec *msg_iov;         /* scatter/gather array */
        u_int   msg_iovlen;             /* # elements in msg_iov */
        caddr_t msg_control;            /* ancillary data, see below */
        u_int   msg_controllen;         /* ancillary data buffer len */
        int     msg_flags;              /* flags on received message */
};

#define MSG_OOB         0x1             /* process out-of-band data */
#define MSG_PEEK        0x2             /* peek at incoming message */
#define MSG_DONTROUTE   0x4             /* send without using routing tables */
#define	MSG_EOR		0x8		/* data completes record */
#define	MSG_TRUNC	0x10		/* data discarded before delivery */
#define	MSG_CTRUNC	0x20		/* control data lost before delivery */
#define	MSG_WAITALL	0x40		/* wait for full request or error */
#define	MSG_DONTWAIT	0x80		/* this message should be nonblocking */
#define	MSG_EOF		0x100		/* data completes connection */
#define MSG_COMPAT      0x8000		/* used in sendit() */

#define MSG_MAXIOVLEN   16

/*
 * Header for ancillary data objects in msg_control buffer.
 * Used for additional information with/about a datagram
 * not expressible by flags.  The format is a sequence
 * of message elements headed by cmsghdr structures.
 */
struct cmsghdr {
	u_int	cmsg_len;		/* data byte count, including hdr */
	int	cmsg_level;		/* originating protocol */
	int	cmsg_type;		/* protocol-specific type */
/* followed by	u_char  cmsg_data[]; */
};

/* given pointer to struct cmsghdr, return pointer to data */
#define	CMSG_DATA(cmsg)		((u_char *)((cmsg) + 1))

/* given pointer to struct cmsghdr, return pointer to next cmsghdr */
#define	CMSG_NXTHDR(mhdr, cmsg)	\
	(((caddr_t)(cmsg) + (cmsg)->cmsg_len + sizeof(struct cmsghdr) > \
	    (mhdr)->msg_control + (mhdr)->msg_controllen) ? \
	    (struct cmsghdr *)NULL : \
	    (struct cmsghdr *)((caddr_t)(cmsg) + ALIGN((cmsg)->cmsg_len)))

#define	CMSG_FIRSTHDR(mhdr)	((struct cmsghdr *)(mhdr)->msg_control)

/* "Socket"-level control message types: */
#define	SCM_RIGHTS	0x01		/* access rights (array of int) */
#define	SCM_TIMESTAMP	0x02		/* timestamp (struct timeval) */
#define	SCM_CREDS	0x03		/* process creds (struct cmsgcred) */

/*
 * 4.3 compat sockaddr, move to compat file later
 */
struct osockaddr {
	u_short	sa_family;		/* address family */
	char	sa_data[14];		/* up to 14 bytes of direct address */
};

/*
 * 4.3-compat message header (move to compat file later).
 */
struct omsghdr {
	caddr_t	msg_name;		/* optional address */
	int	msg_namelen;		/* size of address */
	struct	iovec *msg_iov;		/* scatter/gather array */
	int	msg_iovlen;		/* # elements in msg_iov */
	caddr_t	msg_accrights;		/* access rights sent/received */
	int	msg_accrightslen;
};

#ifndef KERNEL

#include <sys/cdefs.h>

extern int	accept(int, struct sockaddr *, int *);
extern int	bind(int, const struct sockaddr *, int);
extern int	connect(int, const struct sockaddr *, int);
extern int	getpeername(int, struct sockaddr *, int *);
extern int	getsockname(int, struct sockaddr *, int *);
extern int	getsockopt(int, int, int, void *, int *);
extern int	listen(int, int);
extern int	recv(int, void *, size_t, int);
extern int	recvfrom(int, void *, size_t, int, struct sockaddr *, int *);
extern int	recvmsg(int, struct msghdr *, int);
extern int	send(int, const void *, size_t, int);
extern int	sendto(int, const void *,
	    size_t, int, const struct sockaddr *, int);
extern int	sendmsg(int, const struct msghdr *, int);
extern int	setsockopt(int, int, int, const void *, int);
extern int	shutdown(int, int);
extern int	socket(int, int, int);
extern int	socketpair(int, int, int, int *);
#else
void	pfctlinput(int, struct sockaddr *);

#endif /* !KERNEL */
#endif /* !_SYS_SOCKET_H_ */
@


4.4
log
@  Added new conversion functions from latest resolver libraries.
Detail:
  New function inet_net_ntop, inet_net_pton, inet_ntop, inet_pton
    added.  These are thread-safe versions of other functions and
    should be used in preference to things like inet_ntoa, inet_aton.
    These functions are IPv6 aware - pass AF_INET6 to them if you
    want IPv6 operations, pass AF_INET if you want IPv4 (ie. current
    behaviour).
  Extra address family, protocol family definitions added for IPv6
    (and others since they were there in the FreeBSD headers),
    specifically: AF_INET6, PF_INET6, IN6ADDRSZ.  Corresponding
    extra DNS record types (T_AAAA) have been added too.
  APIs are standard APIs - documentation added to LibraryDoc.
  New inetlib/c/* files also contain their own documentation.
Admin:
  Required by TFTPserver (RISC OS version)
  Note: addition of these macros to the header file does *not* imply
    that the Internet module now supports IPv6.  These are header
    file macros added for the benefit of the conversion routines.

Version 5.30. Tagged as 'TCPIPLibs-5_30'
@
text
@d44 12
d108 2
a109 1
#define AF_UNIX         1               /* local to UNIX host (pipes, portals) */
d142 4
d147 1
a147 1
#define AF_MAX          31
d167 1
d179 17
d230 1
@


4.3
log
@Assorted changes from FreeBSD. Might be some slight compatibility hiccoughs
with some sources - might need to #include a bit more before <net/if.h>.

Version 5.23. Tagged as 'TCPIPLibs-5_23'
@
text
@d125 4
d130 1
a130 1
#define AF_MAX          27
d191 4
d235 4
@


4.2
log
@Spinner branch merged.
$Id, $Source and $Header markers removed.
@
text
@d65 1
d320 2
@


4.1
log
@Initial revision
@
text
@d344 12
a355 12
int	accept(int, struct sockaddr *, int *);
int	bind(int, const struct sockaddr *, int);
int	connect(int, const struct sockaddr *, int);
int	getpeername(int, struct sockaddr *, int *);
int	getsockname(int, struct sockaddr *, int *);
int	getsockopt(int, int, int, void *, int *);
int	listen(int, int);
int	recv(int, void *, size_t, int);
int	recvfrom(int, void *, size_t, int, struct sockaddr *, int *);
int	recvmsg(int, struct msghdr *, int);
int	send(int, const void *, size_t, int);
int	sendto(int, const void *,
d357 5
a361 5
int	sendmsg(int, const struct msghdr *, int);
int	setsockopt(int, int, int, const void *, int);
int	shutdown(int, int);
int	socket(int, int, int);
int	socketpair(int, int, int, int *);
@


4.1.7.1
log
@Imported from Babel
@
text
@@


4.1.7.2
log
@Made functions extern to match net/socklib.h
@
text
@d344 12
a355 12
extern int	accept(int, struct sockaddr *, int *);
extern int	bind(int, const struct sockaddr *, int);
extern int	connect(int, const struct sockaddr *, int);
extern int	getpeername(int, struct sockaddr *, int *);
extern int	getsockname(int, struct sockaddr *, int *);
extern int	getsockopt(int, int, int, void *, int *);
extern int	listen(int, int);
extern int	recv(int, void *, size_t, int);
extern int	recvfrom(int, void *, size_t, int, struct sockaddr *, int *);
extern int	recvmsg(int, struct msghdr *, int);
extern int	send(int, const void *, size_t, int);
extern int	sendto(int, const void *,
d357 5
a361 5
extern int	sendmsg(int, const struct msghdr *, int);
extern int	setsockopt(int, int, int, const void *, int);
extern int	shutdown(int, int);
extern int	socket(int, int, int);
extern int	socketpair(int, int, int, int *);
@
