head	4.6;
access;
symbols
	TCPIPLibs-5_66:4.6
	TCPIPLibs-5_65:4.6
	TCPIPLibs-5_64:4.6
	TCPIPLibs-5_63:4.6
	TCPIPLibs-5_62:4.6
	TCPIPLibs-5_61:4.6
	TCPIPLibs-5_60:4.6
	TCPIPLibs-5_59:4.6
	TCPIPLibs-5_58:4.6
	TCPIPLibs-5_57:4.6
	TCPIPLibs-5_56:4.6
	TCPIPLibs-5_55:4.6
	TCPIPLibs-5_54:4.6
	TCPIPLibs-5_53:4.6
	TCPIPLibs-5_52:4.6
	TCPIPLibs-5_51:4.6
	TCPIPLibs-5_50:4.6
	TCPIPLibs-5_49:4.6
	RO_5_07:4.6
	TCPIPLibs-5_48:4.6
	TCPIPLibs-5_47:4.6
	TCPIPLibs-5_46:4.6
	TCPIPLibs-5_45:4.6
	TCPIPLibs-5_44:4.6
	TCPIPLibs-5_43:4.6
	TCPIPLibs-5_42:4.5
	TCPIPLibs-5_41:4.5
	TCPIPLibs-5_40:4.5
	TCPIPLibs-5_39:4.5
	dellis_autobuild_BaseSW:4.5
	TCPIPLibs-5_38:4.5
	TCPIPLibs-5_37:4.5
	TCPIPLibs-5_36:4.5
	sbrodie_sedwards_16Mar2000:4.5
	TCPIPLibs-5_35:4.5
	TCPIPLibs-5_34:4.5
	TCPIPLibs-5_33:4.5
	TCPIPLibs-5_32:4.5
	TCPIPLibs-5_31:4.5
	dcotton_autobuild_BaseSW:4.5
	TCPIPLibs-5_30:4.5
	TCPIPLibs-5_29:4.5
	TCPIPLibs-5_28:4.5
	TCPIPLibs-5_27:4.5
	TCPIPLibs-5_26:4.5
	TCPIPLibs-5_25:4.5
	TCPIPLibs-5_24:4.5
	TCPIPLibs-5_23:4.5
	TCPIPLibs-5_22:4.5
	TCPIPLibs-5_21:4.5
	TCPIPLibs-5_20:4.5
	TCPIPLibs-5_19:4.5
	TCPIPLibs-5_18:4.5
	TCPIPLibs-5_17:4.5
	TCPIPLibs-5_16:4.5
	TCPIPLibs-5_15:4.5
	TCPIPLibs-5_14:4.5
	TCPIPLibs-5_13:4.5
	TCPIPLibs-5_12:4.5
	TCPIPLibs-5_11:4.5
	TCPIPLibs-5_10:4.5
	TCPIPLibs-5_09:4.5
	TCPIPLibs-5_08:4.5
	TCPIPLibs-5_07:4.5
	TCPIPLibs-5_06:4.4
	TCPIPLibs-5_05:4.4
	TCPIPLibs-5_04:4.4
	TCPIPLibs-5_03:4.4
	mstphens_UrsulaRiscPCBuild_20Nov98:4.3
	Ursula_RiscPC:4.3.0.4
	TCPIPLibs-5_02:4.4
	TCPIPLibs-5_01:4.4
	nicke_TCPIPLibs_25-9-98:4.3
	TCPIPLibs-5_00:4.4
	rthornb_UrsulaBuild-19Aug1998:4.3
	UrsulaBuild_FinalSoftload:4.3
	rthornb_UrsulaBuild-12Aug1998:4.3
	aglover_UrsulaBuild-05Aug1998:4.3
	rthornb_UrsulaBuild-29Jul1998:4.3
	rthornb_UrsulaBuild-22Jul1998:4.3
	Spinner:4.3
	Internet_5_07:4.3
	rthornb_UrsulaBuild-15Jul1998:4.3
	rthornb_UrsulaBuild-07Jul1998:4.3
	rthornb_UrsulaBuild-17Jun1998:4.3
	rthornb_UrsulaBuild-03Jun1998:4.3
	rthornb_UrsulaBuild-27May1998:4.3
	rthornb_UrsulaBuild-21May1998:4.3
	Ursula_bp:4.3
	Ursula:4.3.0.2
	Ursula_19May1998_bp:4.2
	Ursula_19May1998:4.2.0.2
	rthornb_UrsulaBuild_01May1998:4.2
	celkins_Internet_506:4.3
	afrost_NC2_Generic:4.1.7.2
	afrost_Funai01-33:4.1.7.2
	Internet_505:4.3
	Spinner_RCA116:4.1.7.2
	Spinner_B20_2:4.1.7.2
	Spinner_19_3:4.1.7.2
	Spinner_B18:4.1.7.2
	Spinner_B17:4.1.7.2
	Spinner_B15:4.1.7.2
	Spinner_B14:4.1.7.2
	Spinner_B13:4.1.7.2
	Spinner_B12:4.1.7.2
	Spinner_B10:4.1.7.2
	Spin_merge:4.1.7.2
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.2
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.2
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.4
	RCA:4.1.0.2
	import:4.1.7.1;
locks; strict;
comment	@# @;


4.6
date	2002.05.29.14.05.36;	author bavison;	state Exp;
branches;
next	4.5;

4.5
date	99.03.16.16.25.26;	author sbrodie;	state Exp;
branches;
next	4.4;

4.4
date	98.09.04.15.55.34;	author sbrodie;	state Exp;
branches;
next	4.3;

4.3
date	98.02.12.12.29.54;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	97.05.21.03.17.40;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	97.03.06.14.27.46;	author rbuckley;	state Exp;
branches
	4.1.7.1;
next	;

4.1.7.1
date	97.03.06.14.27.46;	author rbuckley;	state Exp;
branches;
next	4.1.7.2;

4.1.7.2
date	97.03.21.19.29.08;	author nturton;	state Exp;
branches;
next	;


desc
@@


4.6
log
@  Compatible with cc 5.45.
Detail:
  Two problems: first, in machine/types.h, stdint.h was included unless
  KERNEL was defined; doing this triggers a #error unless you're working in
  C99 mode (eg rpclib and socklib, which are compiled in PCC mode).
  Second, sys/types.h tries to define its own 64-bit struct types, with names
  that clash with C99's own 64-bit types. Both are fixed by wrapping them in
  checks on the value of __STDC_VERSION__, and then only including and using
  stdint.h if the compiler is in C99 mode. Unfortunately this does generate
  warnings in PCC mode because __STDC_VERSION__ is undefined.
Admin:
  Builds, but not extensively tested.

Version 5.43. Tagged as 'TCPIPLibs-5_43'
@
text
@/*-
 * Copyright (c) 1982, 1986, 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 * (c) UNIX System Laboratories, Inc.
 * All or some portions of this file are derived from material licensed
 * to the University of California by American Telephone and Telegraph
 * Co. or Unix System Laboratories, Inc. and are reproduced herein with
 * the permission of UNIX System Laboratories, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)types.h	8.4 (Berkeley) 1/21/94
 */

#ifndef _SYS_TYPES_H_
#define	_SYS_TYPES_H_

#include <sys/cdefs.h>

/* Machine type dependent parameters. */
#include <machine/endian.h>

#ifndef _POSIX_SOURCE
typedef	unsigned char	u_char;
typedef	unsigned short	u_short;
typedef	unsigned int	u_int;
#ifdef __cplusplus
/* This is for the benefit of cfront to stop it issuing warnings about this */
typedef   int           s_int;
#else
typedef   signed int    s_int;
#endif
typedef	unsigned long	u_long;
typedef	unsigned short	ushort;		/* Sys V compatibility */
typedef	unsigned int	uint;		/* Sys V compatibility */
#endif

#ifndef __riscos
typedef	unsigned long long u_quad_t;	/* quads */
typedef	long long	quad_t;
typedef	quad_t *	qaddr_t;
#else
typedef	unsigned long   u_quad_t;	/* quads */
typedef	long    	quad_t;
typedef	quad_t *	qaddr_t;

#if __STDC_VERSION__ >= 199901
#include <stdint.h>
typedef uint64_t u_int64_t;
#else
/* sbrodie added these for NFSv3 support */
typedef struct _int64_t {
        unsigned long	low;
        long		high;
} int64_t;
typedef struct _u_int64_t {
        unsigned long	low;
        unsigned long	high;
} u_int64_t;
#endif
#endif

typedef	char *		caddr_t;	/* core address */
typedef	long		daddr_t;	/* disk address */
typedef	unsigned long	dev_t;		/* device number */
typedef unsigned long	fixpt_t;	/* fixed point number */
typedef	unsigned long	gid_t;		/* group id */
typedef	unsigned long	ino_t;		/* inode number */
typedef	unsigned short	mode_t;		/* permissions */
typedef	unsigned short	nlink_t;	/* link count */
typedef	quad_t		off_t;		/* file offset */
typedef	long		pid_t;		/* process id */
typedef	long		segsz_t;	/* segment size */
typedef	long		swblk_t;	/* swap offset */
typedef	unsigned long	uid_t;		/* user id */

/*
 * This belongs in unistd.h, but is placed here to ensure that programs
 * casting the second parameter of lseek to off_t will get the correct
 * version of lseek.
 */
#ifndef KERNEL
__BEGIN_DECLS
off_t	 lseek(int, off_t, int);
__END_DECLS
#endif

#ifndef _POSIX_SOURCE
/*
 * minor() gives a cookie instead of an index since we don't want to
 * change the meanings of bits 0-15 or waste time and space shifting
 * bits 16-31 for devices that don't use them.
 */
#define	major(x)	((int)(((u_int)(x) >> 8)&0xff))	/* major number */
#define	minor(x)	((int)((x)&0xffff00ff))		/* minor number */
#define	makedev(x,y)	((dev_t)(((x)<<8) | (y)))	/* create dev_t */
#endif

#include <machine/ansi.h>
#include <machine/types.h>

#ifdef	_BSD_CLOCK_T_
typedef	_BSD_CLOCK_T_	clock_t;
#undef	_BSD_CLOCK_T_
#endif

#ifdef	_BSD_SIZE_T_
typedef	_BSD_SIZE_T_	size_t;
#undef	_BSD_SIZE_T_
#endif

#ifdef	_BSD_SSIZE_T_
typedef	_BSD_SSIZE_T_	ssize_t;
#undef	_BSD_SSIZE_T_
#endif

#ifdef	_BSD_TIME_T_
typedef	_BSD_TIME_T_	time_t;
#undef	_BSD_TIME_T_
#endif

#ifndef _POSIX_SOURCE
#define	NBBY	8		/* number of bits in a byte */

/*
 * Select uses bit masks of file descriptors in longs.  These macros
 * manipulate such bit fields (the filesystem macros use chars).
 * FD_SETSIZE may be defined by the user, but the default here should
 * be enough for most uses.
 */
#ifndef	FD_SETSIZE
#define	FD_SETSIZE	256
#endif

typedef long	fd_mask;
#define NFDBITS	(sizeof(fd_mask) * NBBY)	/* bits per mask */

#ifndef howmany
#define	howmany(x, y)	(((x)+((y)-1))/(y))
#endif

typedef	struct fd_set {
	fd_mask	fds_bits[howmany(FD_SETSIZE, NFDBITS)];
} fd_set;

#define	FD_SET(n, p)	((p)->fds_bits[(n)/NFDBITS] |= (1UL << ((n) % NFDBITS)))
#define	FD_CLR(n, p)	((p)->fds_bits[(n)/NFDBITS] &= ~(1UL << ((n) % NFDBITS)))
#define	FD_ISSET(n, p)	((p)->fds_bits[(n)/NFDBITS] & (1UL << ((n) % NFDBITS)))
#define	FD_COPY(f, t)	bcopy(f, t, sizeof(*(f)))
#define	FD_ZERO(p)	memset(p, 0, sizeof(*(p)))
/*#define	FD_ZERO(p)	bzero(p, sizeof(*(p)))*/

#if defined(__STDC__) && defined(KERNEL)
/*
 * Forward structure declarations for function prototypes.  We include the
 * common structures that cross subsystem boundaries here; others are mostly
 * used in the same place that the structure is defined.
 */
struct	proc;
struct	pgrp;
struct	ucred;
struct	rusage;
struct	file;
struct	buf;
struct	tty;
struct	uio;
#endif

#endif /* !_POSIX_SOURCE */
#endif /* !_SYS_TYPES_H_ */
@


4.5
log
@  64-bit type support in RPC.
  Port discovery function now prototyped!
Detail:
  64-bit support has been added to XDR for any protocols that might
    need it (eg. NFS3)
  getrpcport now has a prototype (rpc/netdb.h)
Admin:
  Tested by building the NFS3 lower-level support files from the
    protocol definition file and verified that the rpcgen generated
    code would compile and link without error.
  This version represents issue 1 of 1215,201/DR and 1215,202/DR.
  This version (5.07) is associated with AMR 5201.

Version 5.07. Tagged as 'TCPIPLibs-5_07'
@
text
@d73 4
d86 1
@


4.4
log
@  Removed annoying warning in sys/types.h
Detail:
  When compiling C++ with cfront, it objects to the typedef for s_int
  because it contains the keyword signed.  This typedef is altered to
  just int when compiling C++ to get rid of this warning.
@
text
@d72 10
@


4.3
log
@Corrected FD_ macros to avoid spurious compiler warnings.
@
text
@d53 4
d58 1
@


4.2
log
@Spinner branch merged.
$Id, $Source and $Header markers removed.
@
text
@d152 3
a154 3
#define	FD_SET(n, p)	((p)->fds_bits[(n)/NFDBITS] |= (1 << ((n) % NFDBITS)))
#define	FD_CLR(n, p)	((p)->fds_bits[(n)/NFDBITS] &= ~(1 << ((n) % NFDBITS)))
#define	FD_ISSET(n, p)	((p)->fds_bits[(n)/NFDBITS] & (1 << ((n) % NFDBITS)))
@


4.1
log
@Initial revision
@
text
@d156 2
a157 1
#define	FD_ZERO(p)	bzero(p, sizeof(*(p)))
@


4.1.7.1
log
@Imported from Babel
@
text
@@


4.1.7.2
log
@Changed FD_ZERO to use memset, not bzero
@
text
@d156 1
a156 2
#define	FD_ZERO(p)	memset(p, 0, sizeof(*(p)))
/*#define	FD_ZERO(p)	bzero(p, sizeof(*(p)))*/
@
