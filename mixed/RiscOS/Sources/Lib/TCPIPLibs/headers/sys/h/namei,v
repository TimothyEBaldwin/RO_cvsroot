head	4.2;
access;
symbols
	TCPIPLibs-5_66:4.2
	TCPIPLibs-5_65:4.2
	TCPIPLibs-5_64:4.2
	TCPIPLibs-5_63:4.2
	TCPIPLibs-5_62:4.2
	TCPIPLibs-5_61:4.2
	TCPIPLibs-5_60:4.2
	TCPIPLibs-5_59:4.2
	TCPIPLibs-5_58:4.2
	TCPIPLibs-5_57:4.2
	TCPIPLibs-5_56:4.2
	TCPIPLibs-5_55:4.2
	TCPIPLibs-5_54:4.2
	TCPIPLibs-5_53:4.2
	TCPIPLibs-5_52:4.2
	TCPIPLibs-5_51:4.2
	TCPIPLibs-5_50:4.2
	TCPIPLibs-5_49:4.2
	RO_5_07:4.2
	TCPIPLibs-5_48:4.2
	TCPIPLibs-5_47:4.2
	TCPIPLibs-5_46:4.2
	TCPIPLibs-5_45:4.2
	TCPIPLibs-5_44:4.2
	TCPIPLibs-5_43:4.2
	TCPIPLibs-5_42:4.2
	TCPIPLibs-5_41:4.2
	TCPIPLibs-5_40:4.2
	TCPIPLibs-5_39:4.2
	dellis_autobuild_BaseSW:4.2
	TCPIPLibs-5_38:4.2
	TCPIPLibs-5_37:4.2
	TCPIPLibs-5_36:4.2
	sbrodie_sedwards_16Mar2000:4.2
	TCPIPLibs-5_35:4.2
	TCPIPLibs-5_34:4.2
	TCPIPLibs-5_33:4.2
	TCPIPLibs-5_32:4.2
	TCPIPLibs-5_31:4.2
	dcotton_autobuild_BaseSW:4.2
	TCPIPLibs-5_30:4.2
	TCPIPLibs-5_29:4.2
	TCPIPLibs-5_28:4.2
	TCPIPLibs-5_27:4.2
	TCPIPLibs-5_26:4.2
	TCPIPLibs-5_25:4.2
	TCPIPLibs-5_24:4.2
	TCPIPLibs-5_23:4.2
	TCPIPLibs-5_22:4.2
	TCPIPLibs-5_21:4.2
	TCPIPLibs-5_20:4.2
	TCPIPLibs-5_19:4.2
	TCPIPLibs-5_18:4.2
	TCPIPLibs-5_17:4.2
	TCPIPLibs-5_16:4.2
	TCPIPLibs-5_15:4.2
	TCPIPLibs-5_14:4.2
	TCPIPLibs-5_13:4.2
	TCPIPLibs-5_12:4.2
	TCPIPLibs-5_11:4.2
	TCPIPLibs-5_10:4.2
	TCPIPLibs-5_09:4.2
	TCPIPLibs-5_08:4.2
	TCPIPLibs-5_07:4.2
	TCPIPLibs-5_06:4.2
	TCPIPLibs-5_05:4.2
	TCPIPLibs-5_04:4.2
	TCPIPLibs-5_03:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	Ursula_RiscPC:4.2.0.6
	TCPIPLibs-5_02:4.2
	TCPIPLibs-5_01:4.2
	nicke_TCPIPLibs_25-9-98:4.2
	TCPIPLibs-5_00:4.2
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	Spinner:4.2
	Internet_5_07:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	Ursula_bp:4.2
	Ursula:4.2.0.4
	Ursula_19May1998_bp:4.2
	Ursula_19May1998:4.2.0.2
	rthornb_UrsulaBuild_01May1998:4.2
	celkins_Internet_506:4.2
	afrost_NC2_Generic:4.1.7.1
	afrost_Funai01-33:4.1.7.1
	Internet_505:4.2
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.4
	RCA:4.1.0.2
	import:4.1.7.1;
locks; strict;
comment	@# @;


4.2
date	97.05.21.03.17.24;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	97.03.06.14.27.44;	author rbuckley;	state Exp;
branches
	4.1.7.1;
next	;

4.1.7.1
date	97.03.06.14.27.44;	author rbuckley;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Spinner branch merged.
$Id, $Source and $Header markers removed.
@
text
@/*
 * Copyright (c) 1985, 1989, 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)namei.h	8.2 (Berkeley) 1/4/94
 */

#ifndef _SYS_NAMEI_H_
#define	_SYS_NAMEI_H_

#include <sys/queue.h>

/*
 * Encapsulation of namei parameters.
 */
struct nameidata {
	/*
	 * Arguments to namei/lookup.
	 */
	caddr_t	ni_dirp;		/* pathname pointer */
	enum	uio_seg ni_segflg;	/* location of pathname */
     /* u_long	ni_nameiop;		   namei operation */
     /* u_long	ni_flags;		   flags to namei */
     /* struct	proc *ni_proc;		   process requesting lookup */
	/*
	 * Arguments to lookup.
	 */
     /* struct	ucred *ni_cred;		   credentials */
	struct	vnode *ni_startdir;	/* starting directory */
	struct	vnode *ni_rootdir;	/* logical root directory */
	/*
	 * Results: returned from/manipulated by lookup
	 */
	struct	vnode *ni_vp;		/* vnode of result */
	struct	vnode *ni_dvp;		/* vnode of intermediate directory */
	/*
	 * Shared between namei and lookup/commit routines.
	 */
	long	ni_pathlen;		/* remaining chars in path */
	char	*ni_next;		/* next location in pathname */
	u_long	ni_loopcnt;		/* count of symlinks encountered */
	/*
	 * Lookup parameters: this structure describes the subset of
	 * information from the nameidata structure that is passed
	 * through the VOP interface.
	 */
	struct componentname {
		/*
		 * Arguments to lookup.
		 */
		u_long	cn_nameiop;	/* namei operation */
		u_long	cn_flags;	/* flags to namei */
		struct	proc *cn_proc;	/* process requesting lookup */
		struct	ucred *cn_cred;	/* credentials */
		/*
		 * Shared between lookup and commit routines.
		 */
		char	*cn_pnbuf;	/* pathname buffer */
		char	*cn_nameptr;	/* pointer to looked up name */
		long	cn_namelen;	/* length of looked up component */
		u_long	cn_hash;	/* hash value of looked up name */
		long	cn_consume;	/* chars to consume in lookup() */
	} ni_cnd;
};

#ifdef KERNEL
/*
 * namei operations
 */
#define	LOOKUP		0	/* perform name lookup only */
#define	CREATE		1	/* setup for file creation */
#define	DELETE		2	/* setup for file deletion */
#define	RENAME		3	/* setup for file renaming */
#define	OPMASK		3	/* mask for operation */
/*
 * namei operational modifier flags, stored in ni_cnd.flags
 */
#define	LOCKLEAF	0x0004	/* lock inode on return */
#define	LOCKPARENT	0x0008	/* want parent vnode returned locked */
#define	WANTPARENT	0x0010	/* want parent vnode returned unlocked */
#define	NOCACHE		0x0020	/* name must not be left in cache */
#define	FOLLOW		0x0040	/* follow symbolic links */
#define	NOFOLLOW	0x0000	/* do not follow symbolic links (pseudo) */
#define	MODMASK		0x00fc	/* mask of operational modifiers */
/*
 * Namei parameter descriptors.
 *
 * SAVENAME may be set by either the callers of namei or by VOP_LOOKUP.
 * If the caller of namei sets the flag (for example execve wants to
 * know the name of the program that is being executed), then it must
 * free the buffer. If VOP_LOOKUP sets the flag, then the buffer must
 * be freed by either the commit routine or the VOP_ABORT routine.
 * SAVESTART is set only by the callers of namei. It implies SAVENAME
 * plus the addition of saving the parent directory that contains the
 * name in ni_startdir. It allows repeated calls to lookup for the
 * name being sought. The caller is responsible for releasing the
 * buffer and for vrele'ing ni_startdir.
 */
#define	NOCROSSMOUNT	0x00100	/* do not cross mount points */
#define	RDONLY		0x00200	/* lookup with read-only semantics */
#define	HASBUF		0x00400	/* has allocated pathname buffer */
#define	SAVENAME	0x00800	/* save pathanme buffer */
#define	SAVESTART	0x01000	/* save starting directory */
#define ISDOTDOT	0x02000	/* current component name is .. */
#define MAKEENTRY	0x04000	/* entry is to be added to name cache */
#define ISLASTCN	0x08000	/* this is last component of pathname */
#define ISSYMLINK	0x10000	/* symlink needs interpretation */
#define	WILLBEDIR	0x20000	/* new files will be dirs; allow trailing / */
#define PARAMASK	0xfff00	/* mask of parameter descriptors */
/*
 * Initialization of an nameidata structure.
 */
#define NDINIT(ndp, op, flags, segflg, namep, p) { \
	(ndp)->ni_cnd.cn_nameiop = op; \
	(ndp)->ni_cnd.cn_flags = flags; \
	(ndp)->ni_segflg = segflg; \
	(ndp)->ni_dirp = namep; \
	(ndp)->ni_cnd.cn_proc = p; \
}
#endif

/*
 * This structure describes the elements in the cache of recent
 * names looked up by namei. NCHNAMLEN is sized to make structure
 * size a power of two to optimize malloc's. Minimum reasonable
 * size is 15.
 */

#ifdef NCH_STATISTICS
#define	NCHNAMLEN	23	/* maximum name segment length we bother with */
#else
#define	NCHNAMLEN	31	/* maximum name segment length we bother with */
#endif

struct	namecache {
	LIST_ENTRY(namecache) nc_hash;  /* hash chain */
	TAILQ_ENTRY(namecache) nc_lru;  /* LRU chain */
	struct	vnode *nc_dvp;		/* vnode of parent of name */
	u_long	nc_dvpid;		/* capability number of nc_dvp */
	struct	vnode *nc_vp;		/* vnode the name refers to */
	u_long	nc_vpid;		/* capability number of nc_vp */
#ifdef NCH_STATISTICS
	u_long	nc_nbr;			/* a serial number */
	u_long	nc_hits;		/* how many times we got hit */
#endif
	char	nc_nlen;		/* length of name */
	char	nc_name[NCHNAMLEN];	/* segment name */
};

#ifdef KERNEL
u_long	nextvnodeid;
u_long	numvnodes, numcache;
int	namei(struct nameidata *ndp);
int	lookup(struct nameidata *ndp);
int	relookup(struct vnode *dvp, struct vnode **vpp,
	    struct componentname *cnp);
#endif

/*
 * Stats on usefulness of namei caches.
 */
struct	nchstats {
	long	ncs_goodhits;		/* hits that we can really use */
	long	ncs_neghits;		/* negative hits that we can use */
	long	ncs_badhits;		/* hits we must drop */
	long	ncs_falsehits;		/* hits with id mismatch */
	long	ncs_miss;		/* misses */
	long	ncs_long;		/* long names that ignore cache */
	long	ncs_pass2;		/* names found with passes == 2 */
	long	ncs_2passes;		/* number of times we attempt it */
};
#endif /* !_SYS_NAMEI_H_ */
@


4.1
log
@Initial revision
@
text
@a33 1
 * $Id: namei.h,v 1.5.4.1 1995/08/25 01:49:15 davidg Exp $
@


4.1.7.1
log
@Imported from Babel
@
text
@@
