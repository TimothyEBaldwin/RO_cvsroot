head	4.4;
access;
symbols
	TCPIPLibs-5_66:4.4
	TCPIPLibs-5_65:4.4
	TCPIPLibs-5_64:4.4
	TCPIPLibs-5_63:4.4
	TCPIPLibs-5_62:4.4
	TCPIPLibs-5_61:4.4
	TCPIPLibs-5_60:4.4
	TCPIPLibs-5_59:4.4
	TCPIPLibs-5_58:4.4
	TCPIPLibs-5_57:4.4
	TCPIPLibs-5_56:4.4
	TCPIPLibs-5_55:4.4
	TCPIPLibs-5_54:4.4
	TCPIPLibs-5_53:4.4
	TCPIPLibs-5_52:4.4
	TCPIPLibs-5_51:4.4
	TCPIPLibs-5_50:4.4
	TCPIPLibs-5_49:4.4
	RO_5_07:4.4
	TCPIPLibs-5_48:4.4
	TCPIPLibs-5_47:4.4
	TCPIPLibs-5_46:4.4
	TCPIPLibs-5_45:4.4
	TCPIPLibs-5_44:4.4
	TCPIPLibs-5_43:4.4
	TCPIPLibs-5_42:4.4
	TCPIPLibs-5_41:4.4
	TCPIPLibs-5_40:4.4
	TCPIPLibs-5_39:4.4
	dellis_autobuild_BaseSW:4.4
	TCPIPLibs-5_38:4.4
	TCPIPLibs-5_37:4.4
	TCPIPLibs-5_36:4.4
	sbrodie_sedwards_16Mar2000:4.4
	TCPIPLibs-5_35:4.4
	TCPIPLibs-5_34:4.4
	TCPIPLibs-5_33:4.4
	TCPIPLibs-5_32:4.4
	TCPIPLibs-5_31:4.4
	dcotton_autobuild_BaseSW:4.4
	TCPIPLibs-5_30:4.4
	TCPIPLibs-5_29:4.4
	TCPIPLibs-5_28:4.4
	TCPIPLibs-5_27:4.4
	TCPIPLibs-5_26:4.4
	TCPIPLibs-5_25:4.4
	TCPIPLibs-5_24:4.4
	TCPIPLibs-5_23:4.3
	TCPIPLibs-5_22:4.3
	TCPIPLibs-5_21:4.3
	TCPIPLibs-5_20:4.3
	TCPIPLibs-5_19:4.3
	TCPIPLibs-5_18:4.3
	TCPIPLibs-5_17:4.3
	TCPIPLibs-5_16:4.3
	TCPIPLibs-5_15:4.2
	TCPIPLibs-5_14:4.2
	TCPIPLibs-5_13:4.2
	TCPIPLibs-5_12:4.2
	TCPIPLibs-5_11:4.2
	TCPIPLibs-5_10:4.2
	TCPIPLibs-5_09:4.2
	TCPIPLibs-5_08:4.2
	TCPIPLibs-5_07:4.2
	TCPIPLibs-5_06:4.2
	TCPIPLibs-5_05:4.2
	TCPIPLibs-5_04:4.2
	TCPIPLibs-5_03:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	Ursula_RiscPC:4.2.0.6
	TCPIPLibs-5_02:4.2
	TCPIPLibs-5_01:4.2
	nicke_TCPIPLibs_25-9-98:4.2
	TCPIPLibs-5_00:4.2
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	Spinner:4.2
	Internet_5_07:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	rthornb_UrsulaBuild-17Jun1998:4.2
	rthornb_UrsulaBuild-03Jun1998:4.2
	rthornb_UrsulaBuild-27May1998:4.2
	rthornb_UrsulaBuild-21May1998:4.2
	Ursula_bp:4.2
	Ursula:4.2.0.4
	Ursula_19May1998_bp:4.2
	Ursula_19May1998:4.2.0.2
	rthornb_UrsulaBuild_01May1998:4.2
	celkins_Internet_506:4.2
	afrost_NC2_Generic:4.1.7.1
	afrost_Funai01-33:4.1.7.1
	Internet_505:4.2
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Spin_merge:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.4
	RCA:4.1.0.2
	import:4.1.7.1;
locks; strict;
comment	@# @;


4.4
date	99.07.08.16.31.39;	author kbracey;	state Exp;
branches;
next	4.3;

4.3
date	99.06.22.14.45.18;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	97.05.21.03.16.43;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	97.03.06.14.27.39;	author rbuckley;	state Exp;
branches
	4.1.7.1;
next	;

4.1.7.1
date	97.03.06.14.27.39;	author rbuckley;	state Exp;
branches;
next	;


desc
@@


4.4
log
@A bit more FreeBSD shuffling in the net/if_arp & netinet/if_ether area.

Version 5.24. Tagged as 'TCPIPLibs-5_24'
@
text
@/*
 * Copyright (c) 1988 Acorn Computers Ltd., Cambridge, England
 *
 * :RCS Log discontinued:
 * Revision 1.1  95/01/11  10:14:47  kwelton
 * Initial revision
 *
 * Revision 1.3  88/06/17  20:24:57  beta
 * Acorn Unix initial beta version
 *
 */
/* @@(#)if_arp.h 1.2 87/06/16 3.2/4.3NFSSRC */
/*
 * Copyright (c) 1986 Regents of the University of California.
 * All rights reserved.  The Berkeley software License Agreement
 * specifies the terms and conditions for redistribution.
 *
 *      @@(#)if_arp.h    7.1 (Berkeley) 6/4/86
 */

#ifndef __if_arp_h
#define __if_arp_h

#include "sys/socket.h"

/*
 * Address Resolution Protocol.
 *
 * See RFC 826 for protocol description.  ARP packets are variable
 * in size; the arphdr structure defines the fixed-length portion.
 * Protocol type values are the same as those for 10 Mb/s Ethernet.
 * It is followed by the variable-sized fields ar_sha, arp_spa,
 * arp_tha and arp_tpa in that order, according to the lengths
 * specified.  Field names used correspond to RFC 826.
 */
struct  arphdr {
        u_short ar_hrd;         /* format of hardware address */
#define ARPHRD_ETHER    1       /* ethernet hardware address */
#define ARPHRD_IEEE802  6       /* token-ring hardware format */
#define ARPHRD_FRELAY   15      /* frame relay hardware format */
#define ARPHRD_SERIAL   20      /* serial line hardware format */
        u_short ar_pro;         /* format of protocol address */
        u_char  ar_hln;         /* length of hardware address */
        u_char  ar_pln;         /* length of protocol address */
        u_short ar_op;          /* one of: */
#define ARPOP_REQUEST   1       /* request to resolve address */
#define ARPOP_REPLY     2       /* response to previous request */
#define REVARP_REQUEST  3       /* Reverse ARP request */
#define REVARP_REPLY    4   /* Reverse ARP reply */
/*
 * The remaining fields are variable in size,
 * according to the sizes above.
 */
/*      u_char  ar_sha[];       * sender hardware address */
/*      u_char  ar_spa[];       * sender protocol address */
/*      u_char  ar_tha[];       * target hardware address */
/*      u_char  ar_tpa[];       * target protocol address */
};

/*
 * ARP ioctl request
 */
struct arpreq {
        struct  sockaddr arp_pa;                /* protocol address */
        struct  sockaddr arp_ha;                /* hardware address */
        int     arp_flags;                      /* flags */
};
/*  arp_flags and at_flags field values */
#define ATF_INUSE       0x01    /* entry in use */
#define ATF_COM         0x02    /* completed entry (enaddr valid) */
#define ATF_PERM        0x04    /* permanent entry */
#define ATF_PUBL        0x08    /* publish entry (respond for other host) */
#define ATF_USETRAILERS 0x10    /* has requested trailers */

#ifdef KERNEL
/*
 * Structure shared between the ethernet driver modules and
 * the address resolution code.  For example, each ec_softc or il_softc
 * begins with this structure.
 */
struct	arpcom {
	/*
	 * The ifnet struct _must_ be at the head of this structure.
	 */
	struct 	ifnet ac_if;		/* network-visible interface */
	u_char	ac_enaddr[6];		/* ethernet hardware address */
	int	ac_multicnt;		/* length of ac_multiaddrs list */
};

extern u_char	etherbroadcastaddr[6];
#endif

#endif /* __if_arp_h */

/* EOF if_arp.h */
@


4.3
log
@Added more ARP hardware types from NetBSD, plus added ARPHRD_SERIAL for
use by the DHCP module.
@
text
@d75 18
@


4.2
log
@Spinner branch merged.
$Id, $Source and $Header markers removed.
@
text
@d39 3
@


4.1
log
@Initial revision
@
text
@a1 3
 * $Header: /ax/networking:include/net/if_arp.h:networking  1.1  $
 * $Source: /ax/networking:include/net/if_arp.h: $
 *
@


4.1.7.1
log
@Imported from Babel
@
text
@@
