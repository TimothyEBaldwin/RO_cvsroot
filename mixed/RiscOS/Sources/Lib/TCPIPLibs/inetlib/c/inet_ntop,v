head	4.3;
access;
symbols
	TCPIPLibs-5_66:4.3
	TCPIPLibs-5_65:4.2
	TCPIPLibs-5_64:4.2
	TCPIPLibs-5_63:4.2
	TCPIPLibs-5_62:4.2
	TCPIPLibs-5_61:4.2
	TCPIPLibs-5_60:4.2
	TCPIPLibs-5_59:4.2
	TCPIPLibs-5_58:4.2
	TCPIPLibs-5_57:4.1
	TCPIPLibs-5_56:4.1
	TCPIPLibs-5_55:4.1
	TCPIPLibs-5_54:4.1
	TCPIPLibs-5_53:4.1
	TCPIPLibs-5_52:4.1
	TCPIPLibs-5_51:4.1
	TCPIPLibs-5_50:4.1
	TCPIPLibs-5_49:4.1
	RO_5_07:4.1
	TCPIPLibs-5_48:4.1
	TCPIPLibs-5_47:4.1
	TCPIPLibs-5_46:4.1
	TCPIPLibs-5_45:4.1
	TCPIPLibs-5_44:4.1
	TCPIPLibs-5_43:4.1
	TCPIPLibs-5_42:4.1
	TCPIPLibs-5_41:4.1
	TCPIPLibs-5_40:4.1
	TCPIPLibs-5_39:4.1
	dellis_autobuild_BaseSW:4.1
	TCPIPLibs-5_38:4.1
	TCPIPLibs-5_37:4.1
	TCPIPLibs-5_36:4.1
	sbrodie_sedwards_16Mar2000:4.1
	TCPIPLibs-5_35:4.1
	TCPIPLibs-5_34:4.1
	TCPIPLibs-5_33:4.1
	TCPIPLibs-5_32:4.1
	TCPIPLibs-5_31:4.1
	dcotton_autobuild_BaseSW:4.1
	TCPIPLibs-5_30:4.1;
locks; strict;
comment	@# @;


4.3
date	2018.08.25.19.53.57;	author rool;	state Exp;
branches;
next	4.2;
commitid	0Awdheg8IUUDtxPA;

4.2
date	2013.05.26.19.33.46;	author rsprowson;	state Exp;
branches;
next	4.1;
commitid	WEicgaeWcxFcZaRw;

4.1
date	99.07.28.11.24.28;	author sbrodie;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Add support for RFC2553
Detail:
  headers/net/if.h: new defines, structs, prototypes per RFC2553.
  headers/netdb.h: new defines, structs, prototypes per RFC2553 (from FreeBSD revision 102227).
  headers/sys/socket.h: portability sockaddr_storage struct, extend list of PF_ and AF_ defines (from FreeBSD revision 102227).
  headers/netinet/in.h: new defines, structs, prototypes per RFC2553 (from FreeBSD in6.h revision 102227)
  inetlib/if_indextoname.c
          if_nameindex.c
          if_nametoindex.c: import of new interface functions (from FreeBSD revision 100138).
          in6addr.c: constant structs for in6addr_any and in6addr_loopback per RFC2553.
          getnainfo.c: import of new function (from FreeBSD revision 158790).
          getipnode.c: new (with hostentdup based on _hpcopy from FreeBSD revision 103335).
          getadinfo.c: new (with portions based on FreeBSD revision 103640).
  LibraryDoc: updated with summaries of the new functions in Inetlib.
Admin:
  Test harness in test/rfc2553.c exercises most of the new functionality.
  Submission for TCP/IP bounty.

Version 5.66. Tagged as 'TCPIPLibs-5_66'
@
text
@/* Copyright (c) 1996 by Internet Software Consortium.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM DISCLAIMS
 * ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL INTERNET SOFTWARE
 * CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
 * DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
 * PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
 * ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
 * SOFTWARE.
 */

#if defined(LIBC_SCCS) && !defined(lint)
static char rcsid[] = "$Id: inet_ntop,v 4.2 2013/05/26 19:33:46 rsprowson Exp $";
#endif /* LIBC_SCCS and not lint */

#include <sys/param.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <arpa/nameser.h>
#include <string.h>
#ifndef __riscos
#include <errno.h>
#else
#include <sys/errno.h>
#endif
#include <stdio.h>

#include "inetlib.h"

#ifdef SPRINTF_CHAR
# define SPRINTF(x) strlen(sprintf/**/x)
#else
# define SPRINTF(x) ((size_t)sprintf x)
#endif

/*
 * WARNING: Don't even consider trying to compile this on a system where
 * sizeof(int) < 4.  sizeof(int) > 4 is fine; all the world's not a VAX.
 */

static const char *inet_ntop4(const u_char *src, char *dst, size_t size);
static const char *inet_ntop6(const u_char *src, char *dst, size_t size);

/* char *
 * inet_ntop(af, src, dst, size)
 *	convert a network format address to presentation format.
 * return:
 *	pointer to presentation format address (`dst'), or NULL (see errno).
 * author:
 *	Paul Vixie, 1996.
 */
const char *
inet_ntop(af, src, dst, size)
	int af;
	const void *src;
	char *dst;
	size_t size;
{
	switch (af) {
	case AF_INET:
		return (inet_ntop4(src, dst, size));
	case AF_INET6:
		return (inet_ntop6(src, dst, size));
	default:
		errno = EAFNOSUPPORT;
		return (NULL);
	}
	/* NOTREACHED */
}

/* const char *
 * inet_ntop4(src, dst, size)
 *	format an IPv4 address, more or less like inet_ntoa()
 * return:
 *	`dst' (as a const)
 * notes:
 *	(1) uses no statics
 *	(2) takes a u_char* not an in_addr as input
 * author:
 *	Paul Vixie, 1996.
 */
static const char *
inet_ntop4(src, dst, size)
	const u_char *src;
	char *dst;
	size_t size;
{
	static const char fmt[] = "%u.%u.%u.%u";
	char tmp[INET_ADDRSTRLEN];

	if (SPRINTF((tmp, fmt, src[0], src[1], src[2], src[3])) > size) {
		errno = ENOSPC;
		return (NULL);
	}
	strcpy(dst, tmp);
	return (dst);
}

/* const char *
 * inet_ntop6(src, dst, size)
 *	convert IPv6 binary address into presentation (printable) format
 * author:
 *	Paul Vixie, 1996.
 */
static const char *
inet_ntop6(src, dst, size)
	const u_char *src;
	char *dst;
	size_t size;
{
	/*
	 * Note that int32_t and int16_t need only be "at least" large enough
	 * to contain a value of the specified size.  On some systems, like
	 * Crays, there is no such thing as an integer variable with 16 bits.
	 * Keep this in mind if you think this function should have been coded
	 * to use pointer overlays.  All the world's not a VAX.
	 */
	char tmp[INET6_ADDRSTRLEN], *tp;
	struct { int base, len; } best, cur;
	u_int words[IN6ADDRSZ / INT16SZ];
	int i;

	/*
	 * Preprocess:
	 *	Copy the input (bytewise) array into a wordwise array.
	 *	Find the longest run of 0x00's in src[] for :: shorthanding.
	 */
	memset(words, '\0', sizeof words);
	for (i = 0; i < IN6ADDRSZ; i++)
		words[i / 2] |= (src[i] << ((1 - (i % 2)) << 3));
	best.base = -1;
	cur.base = -1;
	for (i = 0; i < (IN6ADDRSZ / INT16SZ); i++) {
		if (words[i] == 0) {
			if (cur.base == -1)
				cur.base = i, cur.len = 1;
			else
				cur.len++;
		} else {
			if (cur.base != -1) {
				if (best.base == -1 || cur.len > best.len)
					best = cur;
				cur.base = -1;
			}
		}
	}
	if (cur.base != -1) {
		if (best.base == -1 || cur.len > best.len)
			best = cur;
	}
	if (best.base != -1 && best.len < 2)
		best.base = -1;

	/*
	 * Format the result.
	 */
	tp = tmp;
	for (i = 0; i < (IN6ADDRSZ / INT16SZ); i++) {
		/* Are we inside the best run of 0x00's? */
		if (best.base != -1 && i >= best.base &&
		    i < (best.base + best.len)) {
			if (i == best.base)
				*tp++ = ':';
			continue;
		}
		/* Are we following an initial run of 0x00s or any real hex? */
		if (i != 0)
			*tp++ = ':';
		/* Is this address an encapsulated IPv4? */
		if (i == 6 && best.base == 0 &&
		    (best.len == 6 || (best.len == 5 && words[5] == 0xffff))) {
			if (!inet_ntop4(src+12, tp, sizeof tmp - (tp - tmp)))
				return (NULL);
			tp += strlen(tp);
			break;
		}
		tp += SPRINTF((tp, "%x", words[i]));
	}
	/* Was it a trailing run of 0x00's? */
	if (best.base != -1 && (best.base + best.len) == (IN6ADDRSZ / INT16SZ))
		*tp++ = ':';
	*tp++ = '\0';

	/*
	 * Check for overflow, copy, and we're done.
	 */
	if ((size_t)(tp - tmp) > size) {
		errno = ENOSPC;
		return (NULL);
	}
	strcpy(dst, tmp);
	return (dst);
}
@


4.2
log
@Build fixes for cc 5.70
The built in headers with cc 5.70 include new non-ANSI defines in <errno.h> which clash with some of the names in TCPIPLibs:sys/errno.h
This change extends the practice in some of the libs to not include <errno.h> when __unix is not defined (since the symbol for errno is also declared as extern at the top of the TCPIPLibs copy) to avoid the duplication and hence the clash.
Also, add error text for EAUTH and ENEEDAUTH (text from FreeBSD release 9.0.0 SVN revision 229286) in line with those the Internet module knows about in AUNMsgs.
Built with cc 5.70, but no runtime testing.


Version 5.58. Tagged as 'TCPIPLibs-5_58'
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: inet_ntop,v 4.1 1999/07/28 11:24:28 sbrodie Exp $";
d96 1
a96 1
	char tmp[sizeof "255.255.255.255"];
d125 1
a125 1
	char tmp[sizeof "ffff:ffff:ffff:ffff:ffff:ffff:255.255.255.255"], *tp;
@


4.1
log
@  Added new conversion functions from latest resolver libraries.
Detail:
  New function inet_net_ntop, inet_net_pton, inet_ntop, inet_pton
    added.  These are thread-safe versions of other functions and
    should be used in preference to things like inet_ntoa, inet_aton.
    These functions are IPv6 aware - pass AF_INET6 to them if you
    want IPv6 operations, pass AF_INET if you want IPv4 (ie. current
    behaviour).
  Extra address family, protocol family definitions added for IPv6
    (and others since they were there in the FreeBSD headers),
    specifically: AF_INET6, PF_INET6, IN6ADDRSZ.  Corresponding
    extra DNS record types (T_AAAA) have been added too.
  APIs are standard APIs - documentation added to LibraryDoc.
  New inetlib/c/* files also contain their own documentation.
Admin:
  Required by TFTPserver (RISC OS version)
  Note: addition of these macros to the header file does *not* imply
    that the Internet module now supports IPv6.  These are header
    file macros added for the benefit of the conversion routines.

Version 5.30. Tagged as 'TCPIPLibs-5_30'
@
text
@d18 1
a18 1
static char rcsid[] = "$Id: inet_ntop.c,v 8.7 1996/08/05 08:41:18 vixie Exp $";
d28 1
d30 1
d32 1
@

