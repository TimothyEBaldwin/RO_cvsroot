head	4.4;
access;
symbols
	TCPIPLibs-5_66:4.4
	TCPIPLibs-5_65:4.3
	TCPIPLibs-5_64:4.3
	TCPIPLibs-5_63:4.3
	TCPIPLibs-5_62:4.3
	TCPIPLibs-5_61:4.3
	TCPIPLibs-5_60:4.3
	TCPIPLibs-5_59:4.3
	TCPIPLibs-5_58:4.3
	TCPIPLibs-5_57:4.3
	TCPIPLibs-5_56:4.3
	TCPIPLibs-5_55:4.3
	TCPIPLibs-5_54:4.3
	TCPIPLibs-5_53:4.3
	TCPIPLibs-5_52:4.3
	TCPIPLibs-5_51:4.3
	TCPIPLibs-5_50:4.3
	TCPIPLibs-5_49:4.3
	RO_5_07:4.3
	TCPIPLibs-5_48:4.3
	TCPIPLibs-5_47:4.3
	TCPIPLibs-5_46:4.3
	TCPIPLibs-5_45:4.3
	TCPIPLibs-5_44:4.3
	TCPIPLibs-5_43:4.3
	TCPIPLibs-5_42:4.3
	TCPIPLibs-5_41:4.3
	TCPIPLibs-5_40:4.3
	TCPIPLibs-5_39:4.3
	dellis_autobuild_BaseSW:4.3
	TCPIPLibs-5_38:4.3
	TCPIPLibs-5_37:4.3
	TCPIPLibs-5_36:4.3
	sbrodie_sedwards_16Mar2000:4.3
	TCPIPLibs-5_35:4.3
	TCPIPLibs-5_34:4.3
	TCPIPLibs-5_33:4.3
	TCPIPLibs-5_32:4.3
	TCPIPLibs-5_31:4.3
	dcotton_autobuild_BaseSW:4.3
	TCPIPLibs-5_30:4.3
	TCPIPLibs-5_29:4.3
	TCPIPLibs-5_28:4.3
	TCPIPLibs-5_27:4.3
	TCPIPLibs-5_26:4.3
	TCPIPLibs-5_25:4.3
	TCPIPLibs-5_24:4.3
	TCPIPLibs-5_23:4.3
	TCPIPLibs-5_22:4.3
	TCPIPLibs-5_21:4.3
	TCPIPLibs-5_20:4.3
	TCPIPLibs-5_19:4.3
	TCPIPLibs-5_18:4.3
	TCPIPLibs-5_17:4.3
	TCPIPLibs-5_16:4.3
	TCPIPLibs-5_15:4.3
	TCPIPLibs-5_14:4.3
	TCPIPLibs-5_13:4.3
	TCPIPLibs-5_12:4.2
	TCPIPLibs-5_11:4.2
	TCPIPLibs-5_10:4.2
	TCPIPLibs-5_09:4.2
	TCPIPLibs-5_08:4.2
	TCPIPLibs-5_07:4.2
	TCPIPLibs-5_06:4.2
	TCPIPLibs-5_05:4.2
	TCPIPLibs-5_04:4.2
	TCPIPLibs-5_03:4.2
	mstphens_UrsulaRiscPCBuild_20Nov98:4.2
	Ursula_RiscPC:4.2.0.4
	TCPIPLibs-5_02:4.2
	TCPIPLibs-5_01:4.2
	nicke_TCPIPLibs_25-9-98:4.2
	TCPIPLibs-5_00:4.2
	rthornb_UrsulaBuild-19Aug1998:4.2
	UrsulaBuild_FinalSoftload:4.2
	rthornb_UrsulaBuild-12Aug1998:4.2
	aglover_UrsulaBuild-05Aug1998:4.2
	rthornb_UrsulaBuild-29Jul1998:4.2
	celkins_inetlib-1_01:4.2
	rthornb_UrsulaBuild-22Jul1998:4.2
	Spinner:4.2
	rthornb_UrsulaBuild-15Jul1998:4.2
	rthornb_UrsulaBuild-07Jul1998:4.2
	Ursula_bp:4.2
	Ursula:4.2.0.2
	rthornb_UrsulaBuild-17Jun1998:4.1
	celkins_inetlib-1_00:4.2
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_19May1998_bp:4.1
	Ursula_19May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	afrost_Funai01-33:4.1.7.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.4
	RCA:4.1.0.2
	import:4.1.7.1;
locks; strict;
comment	@# @;


4.4
date	2018.08.25.20.12.51;	author rool;	state Exp;
branches;
next	4.3;
commitid	6sD4jRh4A048AxPA;

4.3
date	99.05.11.13.03.55;	author sbrodie;	state Exp;
branches;
next	4.2;

4.2
date	98.06.09.14.42.28;	author celkins;	state Exp;
branches;
next	4.1;

4.1
date	97.03.06.14.27.47;	author rbuckley;	state Exp;
branches
	4.1.7.1;
next	;

4.1.7.1
date	97.03.06.14.27.47;	author rbuckley;	state Exp;
branches;
next	;


desc
@@


4.4
log
@Add support for RFC2553
Detail:
  headers/net/if.h: new defines, structs, prototypes per RFC2553.
  headers/netdb.h: new defines, structs, prototypes per RFC2553 (from FreeBSD revision 102227).
  headers/sys/socket.h: portability sockaddr_storage struct, extend list of PF_ and AF_ defines (from FreeBSD revision 102227).
  headers/netinet/in.h: new defines, structs, prototypes per RFC2553 (from FreeBSD in6.h revision 102227)
  inetlib/if_indextoname.c
          if_nameindex.c
          if_nametoindex.c: import of new interface functions (from FreeBSD revision 100138).
          in6addr.c: constant structs for in6addr_any and in6addr_loopback per RFC2553.
          getnainfo.c: import of new function (from FreeBSD revision 158790).
          getipnode.c: new (with hostentdup based on _hpcopy from FreeBSD revision 103335).
          getadinfo.c: new (with portions based on FreeBSD revision 103640).
  LibraryDoc: updated with summaries of the new functions in Inetlib.
Admin:
  Test harness in test/rfc2553.c exercises most of the new functionality.
  Submission for TCP/IP bounty.

Version 5.66. Tagged as 'TCPIPLibs-5_66'
@
text
@/* -*-C-*-
 *
 * $Header: /home/rool/cvsroot/mixed/RiscOS/Sources/Lib/TCPIPLibs/inetlib/c/gethent,v 4.3 1999/05/11 13:03:55 sbrodie Exp $
 * $Source: /home/rool/cvsroot/mixed/RiscOS/Sources/Lib/TCPIPLibs/inetlib/c/gethent,v $
 *
 * Copyright (c) 1995 Acorn Computers Ltd., Cambridge, England
 *
 * :RCS Log discontinued:
 * Revision 1.2  95/04/20  12:38:42  kwelton
 * All library functions are now prototyped in inetlib.h.
 *
 * Revision 1.1	 95/04/18  16:47:46  kwelton
 * Initial revision
 *
 */
/*
 * Copyright (c) 1983 Regents of the University of California.
 * All rights reserved.	 The Berkeley software License Agreement
 * specifies the terms and conditions for redistribution.
 */

#if defined(LIBC_SCCS) && !defined(lint)
static char sccsid[] = "@@(#)gethostent.c	5.3 (Berkeley) 3/9/86";
#endif /* LIBC_SCCS and not lint */

#include <stdio.h>
#include <ctype.h>

#include "sys/types.h"
#include "sys/socket.h"
#include "netdb.h"

#include "inetlib.h"

/*
 * Internet version.
 */
#define MAXALIASES	35
#define MAXADDRSIZE	64	/* This up'd from 14 : 980609 RCE */
#define LBUFSIZ		255

static char HOSTDB[] = "InetDBase:Hosts";
static FILE *hostf = NULL;
static char hostaddr[MAXADDRSIZE];
static char line[LBUFSIZ+1];
static struct hostent host;
static char *host_aliases[MAXALIASES];
static char *host_addrs[2];

int _host_stayopen;

static char *any(char *, char *);

void sethostent(int f)
{
	if (hostf != NULL)
		rewind(hostf);
	else hostf = fopen(HOSTDB, "r");
	_host_stayopen |= f;
}

void endhostent(void)
{
	if (hostf) {
		fclose(hostf);
		hostf = NULL;
	}
	_host_stayopen = 0;
}

struct hostent *namisipadr(const char *nam)
{
	u_long val;
	char **q;

	val = inet_addr(nam);
	if (val == -1)
		return (NULL);

	/*
	 * ksr 22.9.92
	 */
	host_addrs[0] = hostaddr;

	host.h_addr_list = host_addrs;
	*((u_long *)host.h_addr) = val;
	host.h_length = sizeof (u_long);
	host.h_addrtype = AF_INET;
	host.h_name = (char *) nam;
	q = host.h_aliases = host_aliases;
	*q = NULL;
	return (&host);
}

struct hostent *gethostent(void)
{
	char *p;
	register char *cp, **q;

	if (hostf == NULL && (hostf = fopen(HOSTDB, "r" )) == NULL)
		return (NULL);
again:
	if ((p = fgets(line, LBUFSIZ, hostf)) == NULL)
		return (NULL);
	if (*p == '#')
		goto again;
	while (*p == ' ' || *p == '\t')
		p++;
	cp = any(p, "#\n");
	if (cp == NULL)
		goto again;
	*cp = '\0';
	cp = any(p, " \t");
	if (cp == NULL)
		goto again;
	*cp++ = '\0';
	/* THIS STUFF IS INTERNET SPECIFIC */

	/*
	 * ksr 22.9.92
	 */
	host_addrs[0] = hostaddr;

	host.h_addr_list = host_addrs;
	*((u_long *)host.h_addr) = inet_addr(p);
	host.h_length = sizeof (u_long);
	host.h_addrtype = AF_INET;
	while (*cp == ' ' || *cp == '\t')
		cp++;
	host.h_name = cp;
	q = host.h_aliases = host_aliases;
	cp = any(cp, " \t");
	if (cp != NULL)
		*cp++ = '\0';
	while (cp && *cp) {
		if (*cp == ' ' || *cp == '\t') {
			cp++;
			continue;
		}
		if (q < &host_aliases[MAXALIASES - 1])
			*q++ = cp;
		cp = any(cp, " \t");
		if (cp != NULL)
			*cp++ = '\0';

	}
	*q = NULL;
	return (&host);
}

static char *any(char *cp, char *match)
{
	register char *mp, c;

	while (c = *cp) {
		for (mp = match; *mp; mp++)
			if (*mp == c)
				return (cp);
		cp++;
	}
	return ((char *)0);
}

/* EOF gethent.c */
@


4.3
log
@  Added data allocation redirection capability to RPClib.
Detail:
  The low-level malloc and free calls made by the RPC and XDR libraries
    can now be intercepted if an application defined the two functions
    _rpclib_malloc and _rpclib_free with appropriate prototypes as per
    malloc and free.  This means that you can override the default
    behaviour of stuffing the data into the RMA if you want to, but that
    the default of using the RMA is retained.
Admin:
  Tested with the NFS module.
  Required by NFS 3.00 and later (CVS tag: NFS-3_00)

Version 5.13. Tagged as 'TCPIPLibs-5_13'
@
text
@d3 2
a4 2
 * $Header: /projects2/renaissa/cvsroot/RiscOS/Sources/Lib/TCPIPLibs/inetlib/c/gethent,v 4.2 1998/06/09 14:42:28 celkins Exp $
 * $Source: /projects2/renaissa/cvsroot/RiscOS/Sources/Lib/TCPIPLibs/inetlib/c/gethent,v $
a28 2
#include "netdb.h"

d31 1
@


4.2
log
@Modified static buffer length used for hostname lookup in
gethostent function (extended from 14 chars to 64).
Believe this to have been the cause of a round of failures when
Acorn's hosts file acquired some long entries several months back.
This was the only modification.
@
text
@d3 1
a3 1
 * $Header: /projects2/renaissa/cvsroot/RiscOS/Sources/Lib/TCPIPLibs/inetlib/c/gethent,v 4.1 1997/03/06 14:27:47 rbuckley Exp $
@


4.1
log
@Initial revision
@
text
@d3 2
a4 2
 * $Header: /ax/networking:libs/inetlib/gethent.c:networking  1.2  $
 * $Source: /ax/networking:libs/inetlib/gethent.c: $
d40 1
a40 1
#define MAXADDRSIZE	14
@


4.1.7.1
log
@Imported from Babel
@
text
@@
