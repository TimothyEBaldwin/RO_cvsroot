head	4.2;
access;
symbols
	TCPIPLibs-5_66:4.2
	TCPIPLibs-5_65:4.1
	TCPIPLibs-5_64:4.1
	TCPIPLibs-5_63:4.1
	TCPIPLibs-5_62:4.1
	TCPIPLibs-5_61:4.1
	TCPIPLibs-5_60:4.1
	TCPIPLibs-5_59:4.1
	TCPIPLibs-5_58:4.1
	TCPIPLibs-5_57:4.1
	TCPIPLibs-5_56:4.1
	TCPIPLibs-5_55:4.1
	TCPIPLibs-5_54:4.1
	TCPIPLibs-5_53:4.1
	TCPIPLibs-5_52:4.1
	TCPIPLibs-5_51:4.1
	TCPIPLibs-5_50:4.1
	TCPIPLibs-5_49:4.1
	RO_5_07:4.1
	TCPIPLibs-5_48:4.1
	TCPIPLibs-5_47:4.1
	TCPIPLibs-5_46:4.1
	TCPIPLibs-5_45:4.1
	TCPIPLibs-5_44:4.1
	TCPIPLibs-5_43:4.1
	TCPIPLibs-5_42:4.1
	TCPIPLibs-5_41:4.1
	TCPIPLibs-5_40:4.1
	TCPIPLibs-5_39:4.1
	dellis_autobuild_BaseSW:4.1
	TCPIPLibs-5_38:4.1
	TCPIPLibs-5_37:4.1
	TCPIPLibs-5_36:4.1
	sbrodie_sedwards_16Mar2000:4.1
	TCPIPLibs-5_35:4.1
	TCPIPLibs-5_34:4.1
	TCPIPLibs-5_33:4.1
	TCPIPLibs-5_32:4.1
	TCPIPLibs-5_31:4.1
	dcotton_autobuild_BaseSW:4.1
	TCPIPLibs-5_30:4.1
	TCPIPLibs-5_29:4.1
	TCPIPLibs-5_28:4.1
	TCPIPLibs-5_27:4.1
	TCPIPLibs-5_26:4.1
	TCPIPLibs-5_25:4.1
	TCPIPLibs-5_24:4.1
	TCPIPLibs-5_23:4.1
	TCPIPLibs-5_22:4.1
	TCPIPLibs-5_21:4.1
	TCPIPLibs-5_20:4.1
	TCPIPLibs-5_19:4.1
	TCPIPLibs-5_18:4.1
	TCPIPLibs-5_17:4.1
	TCPIPLibs-5_16:4.1
	TCPIPLibs-5_15:4.1
	TCPIPLibs-5_14:4.1
	TCPIPLibs-5_13:4.1
	TCPIPLibs-5_12:4.1
	TCPIPLibs-5_11:4.1
	TCPIPLibs-5_10:4.1
	TCPIPLibs-5_09:4.1
	TCPIPLibs-5_08:4.1
	TCPIPLibs-5_07:4.1
	TCPIPLibs-5_06:4.1
	TCPIPLibs-5_05:4.1
	TCPIPLibs-5_04:4.1
	TCPIPLibs-5_03:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.10
	TCPIPLibs-5_02:4.1
	TCPIPLibs-5_01:4.1
	nicke_TCPIPLibs_25-9-98:4.1
	TCPIPLibs-5_00:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	celkins_inetlib-1_01:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	Spinner:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	celkins_inetlib-1_00:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.8
	Ursula_19May1998_bp:4.1
	Ursula_19May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	afrost_Funai01-33:4.1.7.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.4
	RCA:4.1.0.2
	import:4.1.7.1;
locks; strict;
comment	@# @;


4.2
date	2018.08.25.19.53.55;	author rool;	state Exp;
branches;
next	4.1;
commitid	0Awdheg8IUUDtxPA;

4.1
date	97.03.06.14.27.47;	author rbuckley;	state Exp;
branches
	4.1.7.1;
next	;

4.1.7.1
date	97.03.06.14.27.47;	author rbuckley;	state Exp;
branches;
next	;


desc
@@


4.2
log
@Add support for RFC2553
Detail:
  headers/net/if.h: new defines, structs, prototypes per RFC2553.
  headers/netdb.h: new defines, structs, prototypes per RFC2553 (from FreeBSD revision 102227).
  headers/sys/socket.h: portability sockaddr_storage struct, extend list of PF_ and AF_ defines (from FreeBSD revision 102227).
  headers/netinet/in.h: new defines, structs, prototypes per RFC2553 (from FreeBSD in6.h revision 102227)
  inetlib/if_indextoname.c
          if_nameindex.c
          if_nametoindex.c: import of new interface functions (from FreeBSD revision 100138).
          in6addr.c: constant structs for in6addr_any and in6addr_loopback per RFC2553.
          getnainfo.c: import of new function (from FreeBSD revision 158790).
          getipnode.c: new (with hostentdup based on _hpcopy from FreeBSD revision 103335).
          getadinfo.c: new (with portions based on FreeBSD revision 103640).
  LibraryDoc: updated with summaries of the new functions in Inetlib.
Admin:
  Test harness in test/rfc2553.c exercises most of the new functionality.
  Submission for TCP/IP bounty.

Version 5.66. Tagged as 'TCPIPLibs-5_66'
@
text
@/* -*-C-*-
 *
 * $Header: /home/rool/cvsroot/mixed/RiscOS/Sources/Lib/TCPIPLibs/inetlib/c/gethnad,v 4.1 1997/03/06 14:27:47 rbuckley Exp $
 * $Source: /home/rool/cvsroot/mixed/RiscOS/Sources/Lib/TCPIPLibs/inetlib/c/gethnad,v $
 *
 * Copyright (c) 1995 Acorn Computers Ltd., Cambridge, England
 *
 * :RCS Log discontinued:
 * Revision 1.3  95/05/24  13:06:04  kwelton
 * Replaced a call to bcmp() with the more correct memcmp().
 *
 * Revision 1.2  95/04/20  12:39:31  kwelton
 * All library functions are now prototyped in inetlib.h.
 *
 * Revision 1.1	 95/04/18  16:47:47  kwelton
 * Initial revision
 *
 */
/*
 * Copyright (c) 1983 Regents of the University of California.
 * All rights reserved.	 The Berkeley software License Agreement
 * specifies the terms and conditions for redistribution.
 */

#if defined(LIBC_SCCS) && !defined(lint)
static char sccsid[] = "@@(#)gethostnamadr.c	5.5 (Berkeley) 3/9/86";
#endif /* LIBC_SCCS and not lint */

#include <stdio.h>
#include <string.h>
#include <ctype.h>

#include "kernel.h"
#include "swis.h"
#include "sys/types.h"
#include "sys/socket.h"
#include "netinet/in.h"
#include "netdb.h"

#include "inetlib.h"

/*
 * DNS module SWIs
 */
#define DNS_GetHostByName 0x46000
#define DNS_GetHost       0x46001 /* According to ANT Resolver */
#define DNS_GetHostByAddr 0x46001 /* According to InetDB and ResolverZM */

#ifndef __riscos
#define MAXALIASES	35

static struct hostent host;
static char *host_aliases[MAXALIASES];
static char hostbuf[BUFSIZ+1];
static char *host_addrs[2];
static int _host_stayopen = 0;
#else
static int have_gethostbyaddr=-1;
#endif

struct hostent *gethostbyname(const char *nam)
{
	struct hostent *hp;
	register char **cp;
	_kernel_oserror *e;

	if ((hp = namisipadr((char *)nam)) != (struct hostent *)0)
		return (hp);

	e = _swix(DNS_GetHostByName, _INR(0,1)|_OUT(1), 0, nam, &hp);
	if ((e == NULL) && (hp != NULL))
		return (hp);

	/*
	 * only acceptable error is SWI not known
	 */
	if ((e != NULL) && (e->errnum != 0x1e6))
	    return (NULL);

	sethostent(_host_stayopen);
	while (hp = gethostent()) {
		if (strcmp(hp->h_name, nam) == 0)
			break;
		for (cp = hp->h_aliases; cp != 0 && *cp != 0; cp++)
			if (strcmp(*cp, nam) == 0)
				goto found;
	}
found:
	if (!_host_stayopen)
		endhostent();
	return(hp);
}

struct hostent *gethostbyaddr(const char *addr, int length, int type)
{
	struct hostent *hp;
	_kernel_oserror *e;
	char buffer[64];

	if (have_gethostbyaddr == -1) {
		_swix(OS_SWINumberToString, _INR(0,2),
		                            DNS_GetHostByAddr,
		                            buffer,
		                            sizeof buffer);
		have_gethostbyaddr = strstr(buffer, "GetHostByAddr") != NULL;
	}

	if (have_gethostbyaddr)
		e = _swix(DNS_GetHostByAddr, _INR(0,3)|_OUT(1),
	                                     0, addr, length, type, &hp);
	else if (length == sizeof(struct in_addr) && type == AF_INET) {
	        unsigned char *hack = (unsigned char *)addr;

		sprintf(buffer, "%d.%d.%d.%d", hack[0], hack[1], hack[2], hack[3]);

		e = _swix(DNS_GetHostByName, _INR(0,1)|_OUT(1),
					     0, buffer, &hp);
	}
	else
	        goto odd;

	if (e == NULL && hp != NULL)
		return (hp);

	if (e != NULL && e->errnum != 0x1e6)
		return (NULL);

odd:
	sethostent(_host_stayopen);
	while (hp = gethostent()) {
		if (hp->h_addrtype == type && hp->h_length == length
		    && memcmp(hp->h_addr, addr, length) == 0)
				break;
	}
	if (!_host_stayopen)
		endhostent();
	return (hp);
}

/* EOF gethnod.c */
@


4.1
log
@Initial revision
@
text
@d3 2
a4 2
 * $Header: /ax/networking:libs/inetlib/gethnad.c:networking  1.3  $
 * $Source: /ax/networking:libs/inetlib/gethnad.c: $
d35 3
d46 1
a46 1
#define DNS_GetHost       0x46001 /* According to a third party */
d111 1
a111 1
	else if (length == 4 && type == 2 /*AF_INET*/) {
@


4.1.7.1
log
@Imported from Babel
@
text
@@
