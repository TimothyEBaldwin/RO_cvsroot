head	4.1;
access;
symbols
	TCPIPLibs-5_66:4.1
	TCPIPLibs-5_65:4.1
	TCPIPLibs-5_64:4.1
	TCPIPLibs-5_63:4.1
	TCPIPLibs-5_62:4.1
	TCPIPLibs-5_61:4.1
	TCPIPLibs-5_60:4.1
	TCPIPLibs-5_59:4.1
	TCPIPLibs-5_58:4.1
	TCPIPLibs-5_57:4.1
	TCPIPLibs-5_56:4.1
	TCPIPLibs-5_55:4.1
	TCPIPLibs-5_54:4.1
	TCPIPLibs-5_53:4.1
	TCPIPLibs-5_52:4.1
	TCPIPLibs-5_51:4.1
	TCPIPLibs-5_50:4.1
	TCPIPLibs-5_49:4.1
	RO_5_07:4.1
	TCPIPLibs-5_48:4.1
	TCPIPLibs-5_47:4.1
	TCPIPLibs-5_46:4.1
	TCPIPLibs-5_45:4.1
	TCPIPLibs-5_44:4.1
	TCPIPLibs-5_43:4.1
	TCPIPLibs-5_42:4.1
	TCPIPLibs-5_41:4.1
	TCPIPLibs-5_40:4.1
	TCPIPLibs-5_39:4.1
	dellis_autobuild_BaseSW:4.1
	TCPIPLibs-5_38:4.1
	TCPIPLibs-5_37:4.1
	TCPIPLibs-5_36:4.1
	sbrodie_sedwards_16Mar2000:4.1
	TCPIPLibs-5_35:4.1
	TCPIPLibs-5_34:4.1
	TCPIPLibs-5_33:4.1
	TCPIPLibs-5_32:4.1
	TCPIPLibs-5_31:4.1
	dcotton_autobuild_BaseSW:4.1
	TCPIPLibs-5_30:4.1
	TCPIPLibs-5_29:4.1
	TCPIPLibs-5_28:4.1
	TCPIPLibs-5_27:4.1
	TCPIPLibs-5_26:4.1;
locks; strict;
comment	@# @;


4.1
date	99.07.15.17.26.42;	author kbracey;	state Exp;
branches;
next	;


desc
@@


4.1
log
@Added <bitstring.h>, a funky bitfield manipulation set of macros.
Added ffs() and sleep() to unixlib.
Added ALIGN() to <machine/param.h> - this allows CMSG_NXTHDR() to work.

Version 5.26. Tagged as 'TCPIPLibs-5_26'
@
text
@/* Copyright 1999 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <swis.h>
#include <unixlib.h>

unsigned int sleep(unsigned int n)
{
    unsigned int t1, t, dt;

    _swix(OS_ReadMonotonicTime, _OUT(0), &t1);
    t = t1;
    dt = t1 + n * 100;

    do
    {
        int escape;
        int wait = dt - t;

        if (wait >= 0x8000) wait = 0x7FFF;
        _swix(OS_Byte, _INR(0,2)|_OUT(2), 129, wait & 0xFF, wait >> 8, &escape);
        _swix(OS_ReadMonotonicTime, _OUT(0), &t);
        if (escape == 0x1B)
            break;
    } while (t - t1 < n * 100);

    return (signed)(dt - t) <= 0 ? 0 : (dt - t) / 100;
}
@
