head	4.3;
access;
symbols
	TCPIPLibs-5_66:4.3
	TCPIPLibs-5_65:4.3
	TCPIPLibs-5_64:4.3
	TCPIPLibs-5_63:4.3
	TCPIPLibs-5_62:4.3
	TCPIPLibs-5_61:4.3
	TCPIPLibs-5_60:4.3
	TCPIPLibs-5_59:4.3
	TCPIPLibs-5_58:4.3
	TCPIPLibs-5_57:4.2
	TCPIPLibs-5_56:4.2
	TCPIPLibs-5_55:4.2
	TCPIPLibs-5_54:4.2
	TCPIPLibs-5_53:4.2
	TCPIPLibs-5_52:4.2
	TCPIPLibs-5_51:4.2
	TCPIPLibs-5_50:4.2
	TCPIPLibs-5_49:4.2
	RO_5_07:4.2
	TCPIPLibs-5_48:4.2
	TCPIPLibs-5_47:4.2
	TCPIPLibs-5_46:4.2
	TCPIPLibs-5_45:4.2
	TCPIPLibs-5_44:4.2
	TCPIPLibs-5_43:4.2
	TCPIPLibs-5_42:4.2
	TCPIPLibs-5_41:4.2
	TCPIPLibs-5_40:4.2
	TCPIPLibs-5_39:4.2
	dellis_autobuild_BaseSW:4.2
	TCPIPLibs-5_38:4.2
	TCPIPLibs-5_37:4.2
	TCPIPLibs-5_36:4.2
	sbrodie_sedwards_16Mar2000:4.2
	TCPIPLibs-5_35:4.2
	TCPIPLibs-5_34:4.2
	TCPIPLibs-5_33:4.2
	TCPIPLibs-5_32:4.2
	TCPIPLibs-5_31:4.2
	dcotton_autobuild_BaseSW:4.2
	TCPIPLibs-5_30:4.2
	TCPIPLibs-5_29:4.2
	TCPIPLibs-5_28:4.2
	TCPIPLibs-5_27:4.2
	TCPIPLibs-5_26:4.2
	TCPIPLibs-5_25:4.2
	TCPIPLibs-5_24:4.1
	TCPIPLibs-5_23:4.1
	TCPIPLibs-5_22:4.1
	TCPIPLibs-5_21:4.1
	TCPIPLibs-5_20:4.1
	TCPIPLibs-5_19:4.1
	TCPIPLibs-5_18:4.1
	TCPIPLibs-5_17:4.1
	TCPIPLibs-5_16:4.1
	TCPIPLibs-5_15:4.1
	TCPIPLibs-5_14:4.1
	TCPIPLibs-5_13:4.1
	TCPIPLibs-5_12:4.1
	TCPIPLibs-5_11:4.1
	TCPIPLibs-5_10:4.1
	TCPIPLibs-5_09:4.1
	TCPIPLibs-5_08:4.1
	TCPIPLibs-5_07:4.1
	TCPIPLibs-5_06:4.1
	TCPIPLibs-5_05:4.1
	TCPIPLibs-5_04:4.1
	TCPIPLibs-5_03:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.10
	TCPIPLibs-5_02:4.1
	TCPIPLibs-5_01:4.1
	nicke_TCPIPLibs_25-9-98:4.1
	TCPIPLibs-5_00:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	Spinner:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.8
	Ursula_19May1998_bp:4.1
	Ursula_19May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	afrost_Funai01-33:4.1.7.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.4
	RCA:4.1.0.2
	import:4.1.7.1;
locks; strict;
comment	@# @;


4.3
date	2013.05.26.19.33.48;	author rsprowson;	state Exp;
branches;
next	4.2;
commitid	WEicgaeWcxFcZaRw;

4.2
date	99.07.13.10.46.39;	author kbracey;	state Exp;
branches;
next	4.1;

4.1
date	97.03.06.14.27.58;	author rbuckley;	state Exp;
branches
	4.1.7.1;
next	;

4.1.7.1
date	97.03.06.14.27.58;	author rbuckley;	state Exp;
branches;
next	;


desc
@@


4.3
log
@Build fixes for cc 5.70
The built in headers with cc 5.70 include new non-ANSI defines in <errno.h> which clash with some of the names in TCPIPLibs:sys/errno.h
This change extends the practice in some of the libs to not include <errno.h> when __unix is not defined (since the symbol for errno is also declared as extern at the top of the TCPIPLibs copy) to avoid the duplication and hence the clash.
Also, add error text for EAUTH and ENEEDAUTH (text from FreeBSD release 9.0.0 SVN revision 229286) in line with those the Internet module knows about in AUNMsgs.
Built with cc 5.70, but no runtime testing.


Version 5.58. Tagged as 'TCPIPLibs-5_58'
@
text
@/*-
 * Copyright (c) 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#if defined(LIBC_SCCS) && !defined(lint)
static char sccsid[] = "@@(#)err.c	8.1 (Berkeley) 6/4/93";
#endif /* LIBC_SCCS and not lint */

#include <err.h>
#ifdef __riscos
#include <sys/errno.h>
#else
#include <errno.h>
#endif
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifdef __STDC__
#include <stdarg.h>
#else
#include <varargs.h>
#endif
#include "unixlib.h"
#include "socklib.h"
#include <riscos.h>
#include <kernel.h>

extern char *__progname;		/* Program name, from crt0. */
#ifdef __riscos
static int errvarflag;
#endif

static FILE *err_file; /* file to use for error output */
static void (*err_exit)(int);

void
err_set_file(void *fp)
{
	if (fp)
		err_file = fp;
	else
		err_file = stderr;
}

void
err_set_exit(void (*ef)(int))
{
	err_exit = ef;
}

#ifdef __riscos
void
err_set_silent(int silent)
{
	errvarflag = silent;
}
#endif

__dead void
#ifdef __STDC__
err(int eval, const char *fmt, ...)
#else
err(eval, fmt, va_alist)
	int eval;
	const char *fmt;
	va_dcl
#endif
{
	va_list ap;
#if __STDC__
	va_start(ap, fmt);
#else
	va_start(ap);
#endif
	verr(eval, fmt, ap);
	va_end(ap);
}

__dead void
verr(eval, fmt, ap)
	int eval;
	const char *fmt;
	va_list ap;
{
#ifdef __riscos
	if (errvarflag) {
		char buffer[512];
		char *p = buffer;
		p += sprintf(p, "%s: ", __progname);
		if (fmt != NULL) {
			p += sprintf(p, fmt, ap);
			p += sprintf(p, ": ");
		}
		sprintf(p, "%s", _inet_err());
		_kernel_setenv("Inet$Error", buffer);
	}
	else {
#else
	int sverrno;

	sverrno = errno;
#endif
	if (! err_file)
		err_set_file((FILE *)0);
	(void)fprintf(err_file, "%s: ", __progname);
	if (fmt != NULL) {
		(void)vfprintf(err_file, fmt, ap);
		(void)fprintf(err_file, ": ");
	}
#ifdef __riscos
	(void)fprintf(err_file, "%s\n", _inet_err());
	}
#else
	(void)fprintf(err_file, "%s\n", strerror(sverrno));
#endif
	if(err_exit)
		err_exit(eval);
	exit(eval);
}

__dead void
#if __STDC__
errx(int eval, const char *fmt, ...)
#else
errx(eval, fmt, va_alist)
	int eval;
	const char *fmt;
	va_dcl
#endif
{
	va_list ap;
#if __STDC__
	va_start(ap, fmt);
#else
	va_start(ap);
#endif
	verrx(eval, fmt, ap);
	va_end(ap);
}

__dead void
verrx(eval, fmt, ap)
	int eval;
	const char *fmt;
	va_list ap;
{
#ifdef __riscos
	if (errvarflag) {
		char buffer[512];
		char *p = buffer;
		p += sprintf(p, "%s: ", __progname);
		if (fmt != NULL)
			vsprintf(p, fmt, ap);
		_kernel_setenv("Inet$Error", buffer);
	}
	else {
#endif
	if (! err_file)
		err_set_file((FILE *)0);
	(void)fprintf(err_file, "%s: ", __progname);
	if (fmt != NULL)
		(void)vfprintf(err_file, fmt, ap);
	(void)fprintf(err_file, "\n");
#ifdef __riscos
	}
#endif
	if (err_exit)
		err_exit(eval);
	exit(eval);
}

void
#if __STDC__
warn(const char *fmt, ...)
#else
warn(fmt, va_alist)
	const char *fmt;
	va_dcl
#endif
{
	va_list ap;
#if __STDC__
	va_start(ap, fmt);
#else
	va_start(ap);
#endif
	vwarn(fmt, ap);
	va_end(ap);
}

void
vwarn(fmt, ap)
	const char *fmt;
	va_list ap;
{
#ifdef __riscos
	if (errvarflag)
		return;
#else
	int sverrno;

	sverrno = errno;
#endif
	if (! err_file)
		err_set_file((FILE *)0);
	(void)fprintf(err_file, "%s: ", __progname);
	if (fmt != NULL) {
		(void)vfprintf(err_file, fmt, ap);
		(void)fprintf(err_file, ": ");
	}
#ifdef __riscos
	(void)fprintf(err_file, "%s\n", _inet_err());
#else
	(void)fprintf(err_file, "%s\n", strerror(sverrno));
#endif
}

void
#ifdef __STDC__
warnx(const char *fmt, ...)
#else
warnx(fmt, va_alist)
	const char *fmt;
	va_dcl
#endif
{
	va_list ap;
#ifdef __STDC__
	va_start(ap, fmt);
#else
	va_start(ap);
#endif
	vwarnx(fmt, ap);
	va_end(ap);
}

void
vwarnx(fmt, ap)
	const char *fmt;
	va_list ap;
{
#ifdef __riscos
	if (errvarflag)
		return;
#endif
	if (! err_file)
		err_set_file((FILE *)0);
	(void)fprintf(err_file, "%s: ", __progname);
	if (fmt != NULL)
		(void)vfprintf(err_file, fmt, ap);
	(void)fprintf(err_file, "\n");
}
@


4.2
log
@Added err_set_silent() to unixlib err() functions.
Added strdup() to unixlib.
Added sysctlbyname() to inetlib.
All the header file changes for Internet 5.31.

Version 5.25. Tagged as 'TCPIPLibs-5_25'
@
text
@d39 3
d43 1
@


4.1
log
@Initial revision
@
text
@d52 1
d55 3
d77 8
d111 14
a124 1
#ifndef __riscos
d138 1
d173 11
d190 3
d222 4
a225 1
#ifndef __riscos
d268 4
@


4.1.7.1
log
@Imported from Babel
@
text
@@
