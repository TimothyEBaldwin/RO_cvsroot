head	4.2;
access;
symbols
	TCPIPLibs-5_66:4.2
	TCPIPLibs-5_65:4.2
	TCPIPLibs-5_64:4.2
	TCPIPLibs-5_63:4.2
	TCPIPLibs-5_62:4.2
	TCPIPLibs-5_61:4.2
	TCPIPLibs-5_60:4.2
	TCPIPLibs-5_59:4.2
	TCPIPLibs-5_58:4.2
	TCPIPLibs-5_57:4.2
	TCPIPLibs-5_56:4.2
	TCPIPLibs-5_55:4.2
	TCPIPLibs-5_54:4.2
	TCPIPLibs-5_53:4.2
	TCPIPLibs-5_52:4.2
	TCPIPLibs-5_51:4.2
	TCPIPLibs-5_50:4.2
	TCPIPLibs-5_49:4.2
	RO_5_07:4.2
	TCPIPLibs-5_48:4.2
	TCPIPLibs-5_47:4.2
	TCPIPLibs-5_46:4.2
	TCPIPLibs-5_45:4.2
	TCPIPLibs-5_44:4.2
	TCPIPLibs-5_43:4.2
	TCPIPLibs-5_42:4.2
	TCPIPLibs-5_41:4.2
	TCPIPLibs-5_40:4.2
	TCPIPLibs-5_39:4.2
	dellis_autobuild_BaseSW:4.2
	TCPIPLibs-5_38:4.2
	TCPIPLibs-5_37:4.2
	TCPIPLibs-5_36:4.2
	sbrodie_sedwards_16Mar2000:4.1
	TCPIPLibs-5_35:4.1
	TCPIPLibs-5_34:4.1
	TCPIPLibs-5_33:4.1
	TCPIPLibs-5_32:4.1
	TCPIPLibs-5_31:4.1
	dcotton_autobuild_BaseSW:4.2
	TCPIPLibs-5_30:4.1
	TCPIPLibs-5_29:4.1
	TCPIPLibs-5_28:4.1
	TCPIPLibs-5_27:4.1
	TCPIPLibs-5_26:4.1
	TCPIPLibs-5_25:4.1
	TCPIPLibs-5_24:4.1
	TCPIPLibs-5_23:4.1
	TCPIPLibs-5_22:4.1
	TCPIPLibs-5_21:4.1
	TCPIPLibs-5_20:4.1
	TCPIPLibs-5_19:4.1
	TCPIPLibs-5_18:4.1
	TCPIPLibs-5_17:4.1
	TCPIPLibs-5_16:4.1
	TCPIPLibs-5_15:4.1
	TCPIPLibs-5_14:4.1
	TCPIPLibs-5_13:4.1
	TCPIPLibs-5_12:4.1
	TCPIPLibs-5_11:4.1
	TCPIPLibs-5_10:4.1
	TCPIPLibs-5_09:4.1
	TCPIPLibs-5_08:4.1
	TCPIPLibs-5_07:4.1
	TCPIPLibs-5_06:4.1
	TCPIPLibs-5_05:4.1
	TCPIPLibs-5_04:4.1
	TCPIPLibs-5_03:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.10
	TCPIPLibs-5_02:4.1
	TCPIPLibs-5_01:4.1
	nicke_TCPIPLibs_25-9-98:4.1
	TCPIPLibs-5_00:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	Spinner:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.8
	Ursula_19May1998_bp:4.1
	Ursula_19May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	afrost_Funai01-33:4.1.7.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.4
	RCA:4.1.0.2
	import:4.1.7.1;
locks; strict;
comment	@# @;


4.2
date	2000.05.03.10.35.03;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	97.03.06.14.27.52;	author rbuckley;	state Exp;
branches
	4.1.7.1;
next	;

4.1.7.1
date	97.03.06.14.27.52;	author rbuckley;	state Exp;
branches;
next	;


desc
@@


4.2
log
@  Minor modification to check that re_errno falls within the bounds
  0..sys_nerr-1 before attempting to dereference sys_errlist array
  with it.
Admin:
  Built.
  Should tidy up the output on RPC send failures (fault #1635)

Version 5.36. Tagged as 'TCPIPLibs-5_36'
@
text
@/* @@(#)clnt_perror.c    2.1 88/07/29 4.0 RPCSRC */
/*
 * Sun RPC is a product of Sun Microsystems, Inc. and is provided for
 * unrestricted use provided that this legend is included on all tape
 * media and as a part of the software program in whole or part.  Users
 * may copy or modify Sun RPC without charge, but are not authorized
 * to license or distribute it to anyone else except as part of a product or
 * program developed by the user.
 *
 * SUN RPC IS PROVIDED AS IS WITH NO WARRANTIES OF ANY KIND INCLUDING THE
 * WARRANTIES OF DESIGN, MERCHANTIBILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE OR TRADE PRACTICE.
 *
 * Sun RPC is provided with no support and without any obligation on the
 * part of Sun Microsystems, Inc. to assist in its use, correction,
 * modification or enhancement.
 *
 * SUN MICROSYSTEMS, INC. SHALL HAVE NO LIABILITY WITH RESPECT TO THE
 * INFRINGEMENT OF COPYRIGHTS, TRADE SECRETS OR ANY PATENTS BY SUN RPC
 * OR ANY PART THEREOF.
 *
 * In no event will Sun Microsystems, Inc. be liable for any lost revenue
 * or profits or other special, indirect and consequential damages, even if
 * Sun has been advised of the possibility of such damages.
 *
 * Sun Microsystems, Inc.
 * 2550 Garcia Avenue
 * Mountain View, California  94043
 */
#if !defined(lint) && defined(SCCSIDS)
static char sccsid[] = "@@(#)clnt_perror.c 1.15 87/10/07 Copyr 1984 Sun Micro";
#endif

/*
 * clnt_perror.c
 *
 * Copyright (C) 1984, Sun Microsystems, Inc.
 *
 */
#include <stdio.h>

#include <rpc/types.h>
#include <rpc/auth.h>
#include <rpc/clnt.h>

#ifndef RISCOS
extern char *sys_errlist[];
extern char *sprintf();
#else
#include "unixlib.h"
#endif
static char *auth_errmsg();

extern char *strcpy();

static char *buf;

static char *
_buf()
{

        if (buf == 0)
                buf = (char *)malloc(256);
        return (buf);
}

/*
 * Print reply error info
 */
char *
clnt_sperror(rpch, s)
        CLIENT *rpch;
        char *s;
{
        struct rpc_err e;
        void clnt_perrno();
        char *err;
        char *str = _buf();
        char *strstart = str;

        if (str == 0)
                return (0);
        CLNT_GETERR(rpch, &e);

        (void) sprintf(str, "%s: ", s);
        str += strlen(str);

        (void) strcpy(str, clnt_sperrno(e.re_status));
        str += strlen(str);

        switch (e.re_status) {
        case RPC_SUCCESS:
        case RPC_CANTENCODEARGS:
        case RPC_CANTDECODERES:
        case RPC_TIMEDOUT:
        case RPC_PROGUNAVAIL:
        case RPC_PROCUNAVAIL:
        case RPC_CANTDECODEARGS:
        case RPC_SYSTEMERROR:
        case RPC_UNKNOWNHOST:
        case RPC_UNKNOWNPROTO:
        case RPC_PMAPFAILURE:
        case RPC_PROGNOTREGISTERED:
        case RPC_FAILED:
                break;

        case RPC_CANTSEND:
        case RPC_CANTRECV:
#ifdef RISCOS
                if (!(e.re_errno > 0 && e.re_errno < sys_nerr))
                  (void) sprintf(str, "; errno = %d", e.re_errno);
                else
#endif
                (void) sprintf(str, "; errno = %s",
                    sys_errlist[e.re_errno]);
                str += strlen(str);
                break;

        case RPC_VERSMISMATCH:
                (void) sprintf(str,
                        "; low version = %lu, high version = %lu",
                        e.re_vers.low, e.re_vers.high);
                str += strlen(str);
                break;

        case RPC_AUTHERROR:
                err = auth_errmsg(e.re_why);
                (void) sprintf(str,"; why = ");
                str += strlen(str);
                if (err != NULL) {
                        (void) sprintf(str, "%s",err);
                } else {
                        (void) sprintf(str,
                                "(unknown authentication error - %d)",
                                (int) e.re_why);
                }
                str += strlen(str);
                break;

        case RPC_PROGVERSMISMATCH:
                (void) sprintf(str,
                        "; low version = %lu, high version = %lu",
                        e.re_vers.low, e.re_vers.high);
                str += strlen(str);
                break;

        default:        /* unknown */
                (void) sprintf(str,
                        "; s1 = %lu, s2 = %lu",
                        e.re_lb.s1, e.re_lb.s2);
                str += strlen(str);
                break;
        }
        (void) sprintf(str, "\n");
        return(strstart) ;
}

void
clnt_perror(rpch, s)
        CLIENT *rpch;
        char *s;
{
#ifndef RISCOS
        (void) fprintf(stderr,"%s",clnt_sperror(rpch,s));
#endif
}


struct rpc_errtab {
        enum clnt_stat status;
        char *message;
};

static struct rpc_errtab  rpc_errlist[] = {
        { RPC_SUCCESS,
                "(RPC success)" },
        { RPC_CANTENCODEARGS,
                "(RPC can't encode arguments)" },
        { RPC_CANTDECODERES,
                "(RPC can't decode result)" },
        { RPC_CANTSEND,
                "(RPC unable to send - check hardware or route)" },
        { RPC_CANTRECV,
                "(RPC unable to receive)" },
        { RPC_TIMEDOUT,
                "(RPC transaction timed out)" },
        { RPC_VERSMISMATCH,
                "(Incompatible RPC versions)" },
        { RPC_AUTHERROR,
                "(RPC authentication error)" },
        { RPC_PROGUNAVAIL,
                "(RPC program unavailable)" },
        { RPC_PROGVERSMISMATCH,
                "(RPC program/version mismatch)" },
        { RPC_PROCUNAVAIL,
                "(RPC procedure unavailable)" },
        { RPC_CANTDECODEARGS,
                "(Remote host can't decode RPC arguments)" },
        { RPC_SYSTEMERROR,
                "(System error)" },
        { RPC_UNKNOWNHOST,
                "(Cannot find hostname in host database)" },
        { RPC_UNKNOWNPROTO,
                "(Unknown protocol)" },
        { RPC_PMAPFAILURE,
                "(RPC Service not available on remote host (portmap failure))" },
        { RPC_PROGNOTREGISTERED,
                "(RPC Service not available on remote host (not registered))"},
        { RPC_FAILED,
                "(Unspecified RPC error)"}
};


/*
 * This interface for use by clntrpc
 */
char *
clnt_sperrno(stat)
        enum clnt_stat stat;
{
        int i;

        for (i = 0; i < sizeof(rpc_errlist)/sizeof(struct rpc_errtab); i++) {
                if (rpc_errlist[i].status == stat) {
                        return (rpc_errlist[i].message);
                }
        }
        return ("RPC: (unknown error code)");
}

void
clnt_perrno(num)
        enum clnt_stat num;
{
#ifndef RISCOS
        (void) fprintf(stderr,"%s",clnt_sperrno(num));
#endif
}


char *
clnt_spcreateerror(s)
        char *s;
{
        extern int sys_nerr;
        extern char *sys_errlist[];
        char *str = _buf();

        if (str == 0)
                return(0);
        (void) sprintf(str, "%s: ", s);
        (void) strcat(str, clnt_sperrno(rpc_createerr.cf_stat));
        switch (rpc_createerr.cf_stat) {
        case RPC_PMAPFAILURE:
                (void) strcat(str, " - ");
                (void) strcat(str,
                    clnt_sperrno(rpc_createerr.cf_error.re_status));
                break;

        case RPC_SYSTEMERROR:
                (void) strcat(str, " - ");
                if (rpc_createerr.cf_error.re_errno > 0
                    && rpc_createerr.cf_error.re_errno < sys_nerr)
                        (void) strcat(str,
                            sys_errlist[rpc_createerr.cf_error.re_errno]);
                else
                        (void) sprintf(&str[strlen(str)], "Error %d",
                            rpc_createerr.cf_error.re_errno);
                break;
        }
        (void) strcat(str, "\n");
        return (str);
}

void
clnt_pcreateerror(s)
        char *s;
{
#ifndef RISCOS
        (void) fprintf(stderr,"%s",clnt_spcreateerror(s));
#endif
}

struct auth_errtab {
        enum auth_stat status;
        char *message;
};

static struct auth_errtab auth_errlist[] = {
        { AUTH_OK,
                "Authentication OK" },
        { AUTH_BADCRED,
                "Invalid client credential" },
        { AUTH_REJECTEDCRED,
                "Server rejected credential" },
        { AUTH_BADVERF,
                "Invalid client verifier" },
        { AUTH_REJECTEDVERF,
                "Server rejected verifier" },
        { AUTH_TOOWEAK,
                "Client credential too weak" },
        { AUTH_INVALIDRESP,
                "Invalid server verifier" },
        { AUTH_FAILED,
                "Failed (unspecified error)" },
};

static char *
auth_errmsg(stat)
        enum auth_stat stat;
{
        int i;

        for (i = 0; i < sizeof(auth_errlist)/sizeof(struct auth_errtab); i++) {
                if (auth_errlist[i].status == stat) {
                        return(auth_errlist[i].message);
                }
        }
        return(NULL);
}
@


4.1
log
@Initial revision
@
text
@d9 1
a9 1
 * 
d13 1
a13 1
 * 
d17 1
a17 1
 * 
d21 1
a21 1
 * 
d25 1
a25 1
 * 
d46 1
a47 1
#ifndef RISCOS
d49 2
d85 1
a85 1
        (void) sprintf(str, "%s: ", s);  
d88 1
a88 1
        (void) strcpy(str, clnt_sperrno(e.re_status));  
d95 1
a95 1
        case RPC_TIMEDOUT:     
d109 5
d115 1
a115 1
                    sys_errlist[e.re_errno]); 
d121 1
a121 1
                        "; low version = %lu, high version = %lu", 
d141 2
a142 2
                (void) sprintf(str, 
                        "; low version = %lu, high version = %lu", 
d148 2
a149 2
                (void) sprintf(str, 
                        "; s1 = %lu, s2 = %lu", 
d175 3
a177 3
        { RPC_SUCCESS, 
                "(RPC success)" }, 
        { RPC_CANTENCODEARGS, 
d179 1
a179 1
        { RPC_CANTDECODERES, 
d181 1
a181 1
        { RPC_CANTSEND, 
d183 1
a183 1
        { RPC_CANTRECV, 
d185 1
a185 1
        { RPC_TIMEDOUT, 
d187 1
a187 1
        { RPC_VERSMISMATCH, 
d189 1
a189 1
        { RPC_AUTHERROR, 
d191 1
a191 1
        { RPC_PROGUNAVAIL, 
d193 1
a193 1
        { RPC_PROGVERSMISMATCH, 
d195 1
a195 1
        { RPC_PROCUNAVAIL, 
d197 1
a197 1
        { RPC_CANTDECODEARGS, 
d199 1
a199 1
        { RPC_SYSTEMERROR, 
d201 1
a201 1
        { RPC_UNKNOWNHOST, 
d205 1
a205 1
        { RPC_PMAPFAILURE, 
d207 1
a207 1
        { RPC_PROGNOTREGISTERED, 
d209 1
a209 1
        { RPC_FAILED, 
d285 1
a285 1
        enum auth_stat status;  
@


4.1.7.1
log
@Imported from Babel
@
text
@@
