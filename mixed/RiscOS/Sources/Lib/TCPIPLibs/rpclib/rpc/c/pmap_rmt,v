head	4.2;
access;
symbols
	TCPIPLibs-5_66:4.2
	TCPIPLibs-5_65:4.2
	TCPIPLibs-5_64:4.2
	TCPIPLibs-5_63:4.2
	TCPIPLibs-5_62:4.2
	TCPIPLibs-5_61:4.2
	TCPIPLibs-5_60:4.2
	TCPIPLibs-5_59:4.2
	TCPIPLibs-5_58:4.2
	TCPIPLibs-5_57:4.2
	TCPIPLibs-5_56:4.2
	TCPIPLibs-5_55:4.2
	TCPIPLibs-5_54:4.2
	TCPIPLibs-5_53:4.2
	TCPIPLibs-5_52:4.2
	TCPIPLibs-5_51:4.2
	TCPIPLibs-5_50:4.2
	TCPIPLibs-5_49:4.2
	RO_5_07:4.2
	TCPIPLibs-5_48:4.2
	TCPIPLibs-5_47:4.2
	TCPIPLibs-5_46:4.2
	TCPIPLibs-5_45:4.2
	TCPIPLibs-5_44:4.2
	TCPIPLibs-5_43:4.2
	TCPIPLibs-5_42:4.2
	TCPIPLibs-5_41:4.2
	TCPIPLibs-5_40:4.2
	TCPIPLibs-5_39:4.2
	dellis_autobuild_BaseSW:4.2
	TCPIPLibs-5_38:4.2
	TCPIPLibs-5_37:4.2
	TCPIPLibs-5_36:4.2
	sbrodie_sedwards_16Mar2000:4.2
	TCPIPLibs-5_35:4.2
	TCPIPLibs-5_34:4.2
	TCPIPLibs-5_33:4.2
	TCPIPLibs-5_32:4.2
	TCPIPLibs-5_31:4.2
	dcotton_autobuild_BaseSW:4.2
	TCPIPLibs-5_30:4.2
	TCPIPLibs-5_29:4.2
	TCPIPLibs-5_28:4.2
	TCPIPLibs-5_27:4.2
	TCPIPLibs-5_26:4.2
	TCPIPLibs-5_25:4.2
	TCPIPLibs-5_24:4.2
	TCPIPLibs-5_23:4.2
	TCPIPLibs-5_22:4.2
	TCPIPLibs-5_21:4.2
	TCPIPLibs-5_20:4.2
	TCPIPLibs-5_19:4.2
	TCPIPLibs-5_18:4.2
	TCPIPLibs-5_17:4.2
	TCPIPLibs-5_16:4.2
	TCPIPLibs-5_15:4.2
	TCPIPLibs-5_14:4.2
	TCPIPLibs-5_13:4.2
	TCPIPLibs-5_12:4.2
	TCPIPLibs-5_11:4.2
	TCPIPLibs-5_10:4.2
	TCPIPLibs-5_09:4.2
	TCPIPLibs-5_08:4.2
	TCPIPLibs-5_07:4.2
	TCPIPLibs-5_06:4.2
	TCPIPLibs-5_05:4.2
	TCPIPLibs-5_04:4.2
	TCPIPLibs-5_03:4.1
	mstphens_UrsulaRiscPCBuild_20Nov98:4.1
	Ursula_RiscPC:4.1.0.10
	TCPIPLibs-5_02:4.1
	TCPIPLibs-5_01:4.1
	nicke_TCPIPLibs_25-9-98:4.1
	TCPIPLibs-5_00:4.1
	rthornb_UrsulaBuild-19Aug1998:4.1
	UrsulaBuild_FinalSoftload:4.1
	rthornb_UrsulaBuild-12Aug1998:4.1
	aglover_UrsulaBuild-05Aug1998:4.1
	rthornb_UrsulaBuild-29Jul1998:4.1
	rthornb_UrsulaBuild-22Jul1998:4.1
	Spinner:4.1
	rthornb_UrsulaBuild-15Jul1998:4.1
	rthornb_UrsulaBuild-07Jul1998:4.1
	rthornb_UrsulaBuild-17Jun1998:4.1
	rthornb_UrsulaBuild-03Jun1998:4.1
	rthornb_UrsulaBuild-27May1998:4.1
	rthornb_UrsulaBuild-21May1998:4.1
	Ursula_bp:4.1
	Ursula:4.1.0.8
	Ursula_19May1998_bp:4.1
	Ursula_19May1998:4.1.0.4
	rthornb_UrsulaBuild_01May1998:4.1
	afrost_NC2_Generic:4.1.7.1
	afrost_Funai01-33:4.1.7.1
	Spinner_RCA116:4.1.7.1
	Spinner_B20_2:4.1.7.1
	Spinner_19_3:4.1.7.1
	Spinner_B18:4.1.7.1
	Spinner_B17:4.1.7.1
	Spinner_B15:4.1.7.1
	Spinner_B14:4.1.7.1
	Spinner_B13:4.1.7.1
	Spinner_B12:4.1.7.1
	Spinner_B10:4.1.7.1
	Daytona:4.1.0.6
	Daytona_bp:4.1
	Spinner_B7:4.1.7.1
	ARTtmp_merge:4.1.7.1
	Spin_3Apr97:4.1.7.1
	RCA_bp:4.1
	ARTtmp:4.1.7.1.0.4
	RCA:4.1.0.2
	import:4.1.7.1;
locks; strict;
comment	@# @;


4.2
date	98.11.27.15.40.19;	author sbrodie;	state Exp;
branches;
next	4.1;

4.1
date	97.03.06.14.27.53;	author rbuckley;	state Exp;
branches
	4.1.7.1;
next	;

4.1.7.1
date	97.03.06.14.27.53;	author rbuckley;	state Exp;
branches;
next	;


desc
@@


4.2
log
@  Prototypes upgraded to ANSI-style.  This is required so that C++ source code
    can include them (third party needs this)
  Removed duplicate headers from inside rpclib - now uses the exported headers
    which should avoid inconsistencies developing.
  No longer uses cc400 during builds.
Detail:
  Nearly every header is changed.  Parameter prototypes cross-checked against
    actual source code, Solaris 2.6 headers, and comments in the rpclib headers.
  Build improvement: no longer uses "cc400" to compile clnt_udp.c.  Previously
    this was done because newer compilers were alleged to generate broken code.
    The example quoted was the NFS module's free display.  The fault actually
    lies in the NFS module passing the wrong parameters to xdr_string!  Future
    builds of NFS will require TCPIPLibs-5_04 or later.
Admin:
  Built.  Tested by building NFS against it.  Verified free space display works
    properly (needs NFS 2.36).  Tested inclusion of all RPC headers from C++
    source file worked without warnings or errors.

Version 5.04. Tagged as 'TCPIPLibs-5_04'
@
text
@/* @@(#)pmap_rmt.c       2.2 88/08/01 4.0 RPCSRC */
/*
 * Sun RPC is a product of Sun Microsystems, Inc. and is provided for
 * unrestricted use provided that this legend is included on all tape
 * media and as a part of the software program in whole or part.  Users
 * may copy or modify Sun RPC without charge, but are not authorized
 * to license or distribute it to anyone else except as part of a product or
 * program developed by the user.
 *
 * SUN RPC IS PROVIDED AS IS WITH NO WARRANTIES OF ANY KIND INCLUDING THE
 * WARRANTIES OF DESIGN, MERCHANTIBILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE OR TRADE PRACTICE.
 *
 * Sun RPC is provided with no support and without any obligation on the
 * part of Sun Microsystems, Inc. to assist in its use, correction,
 * modification or enhancement.
 *
 * SUN MICROSYSTEMS, INC. SHALL HAVE NO LIABILITY WITH RESPECT TO THE
 * INFRINGEMENT OF COPYRIGHTS, TRADE SECRETS OR ANY PATENTS BY SUN RPC
 * OR ANY PART THEREOF.
 *
 * In no event will Sun Microsystems, Inc. be liable for any lost revenue
 * or profits or other special, indirect and consequential damages, even if
 * Sun has been advised of the possibility of such damages.
 *
 * Sun Microsystems, Inc.
 * 2550 Garcia Avenue
 * Mountain View, California  94043
 */
#if !defined(lint) && defined(SCCSIDS)
static char sccsid[] = "@@(#)pmap_rmt.c 1.21 87/08/27 Copyr 1984 Sun Micro";
#endif

/*
 * pmap_rmt.c
 * Client interface to pmap rpc service.
 * remote call and broadcast service
 *
 * Copyright (C) 1984, Sun Microsystems, Inc.
 */

#include <rpc/rpc.h>
#include <rpc/pmap_prot.h>
#include <rpc/pmap_clnt.h>
#include <rpc/pmap_rmt.h>
#include <sys/socket.h>
#include <stdio.h>
#ifdef RISCOS
#include <sys/errno.h>
#else
#include <errno.h>
#endif
#include <net/if.h>
#include <sys/ioctl.h>
#include <arpa/inet.h>
#define MAX_BROADCAST_SIZE 1400

extern int errno;
static struct timeval timeout = { 3, 0 };


/*
 * pmapper remote-call-service interface.
 * This routine is used to call the pmapper remote call service
 * which will look up a service program in the port maps, and then
 * remotely call that routine with the given parameters.  This allows
 * programs to do a lookup and call in one step.
*/
enum clnt_stat
pmap_rmtcall(addr, prog, vers, proc, xdrargs, argsp, xdrres, resp, tout, port_ptr)
        struct sockaddr_in *addr;
        u_long prog, vers, proc;
        xdrproc_t xdrargs, xdrres;
        caddr_t argsp, resp;
        struct timeval tout;
        u_long *port_ptr;
{
        int socket = -1;
        register CLIENT *client;
        struct rmtcallargs a;
        struct rmtcallres r;
        enum clnt_stat stat;

        addr->sin_port = htons(PMAPPORT);
        client = clntudp_create(addr, PMAPPROG, PMAPVERS, timeout, &socket);
        if (client != (CLIENT *)NULL) {
                a.prog = prog;
                a.vers = vers;
                a.proc = proc;
                a.args_ptr = argsp;
                a.xdr_args = xdrargs;
                r.port_ptr = port_ptr;
                r.results_ptr = resp;
                r.xdr_results = xdrres;
                stat = CLNT_CALL(client, PMAPPROC_CALLIT, xdr_rmtcall_args, &a,
                    xdr_rmtcallres, &r, tout);
                CLNT_DESTROY(client);
        } else {
                stat = RPC_FAILED;
        }
        (void)close(socket);
        addr->sin_port = 0;
        return (stat);
}


/*
 * XDR remote call arguments
 * written for XDR_ENCODE direction only
 */
bool_t
xdr_rmtcall_args(xdrs, cap)
        register XDR *xdrs;
        register struct rmtcallargs *cap;
{
        u_int lenposition, argposition, position;

        if (xdr_u_long(xdrs, &(cap->prog)) &&
            xdr_u_long(xdrs, &(cap->vers)) &&
            xdr_u_long(xdrs, &(cap->proc))) {
                lenposition = XDR_GETPOS(xdrs);
                if (! xdr_u_long(xdrs, &(cap->arglen)))
                    return (FALSE);
                argposition = XDR_GETPOS(xdrs);
                if (! (*(cap->xdr_args))(xdrs, cap->args_ptr))
                    return (FALSE);
                position = XDR_GETPOS(xdrs);
                cap->arglen = (u_long)position - (u_long)argposition;
                XDR_SETPOS(xdrs, lenposition);
                if (! xdr_u_long(xdrs, &(cap->arglen)))
                    return (FALSE);
                XDR_SETPOS(xdrs, position);
                return (TRUE);
        }
        return (FALSE);
}

/*
 * XDR remote call results
 * written for XDR_DECODE direction only
 */
bool_t
xdr_rmtcallres(xdrs, crp)
        register XDR *xdrs;
        register struct rmtcallres *crp;
{
        caddr_t port_ptr;

        port_ptr = (caddr_t)crp->port_ptr;
        if (xdr_reference(xdrs, &port_ptr, sizeof (u_long),
            xdr_u_long) && xdr_u_long(xdrs, &crp->resultslen)) {
                crp->port_ptr = (u_long *)port_ptr;
                return ((*(crp->xdr_results))(xdrs, crp->results_ptr));
        }
        return (FALSE);
}


/*
 * The following is kludged-up support for simple rpc broadcasts.
 * Someday a large, complicated system will replace these trivial
 * routines which only support udp/ip .
 */

static int
getbroadcastnets(addrs, sock, buf)
        struct in_addr *addrs;
        int sock;  /* any valid socket will do */
        char *buf;  /* why allocxate more when we can use existing... */
{
        struct ifconf ifc;
        struct ifreq ifreq, *ifr;
        struct sockaddr_in *sin;
        int n, i;

        ifc.ifc_len = UDPMSGSIZE;
        ifc.ifc_buf = buf;
        if (ioctl(sock, SIOCGIFCONF, (char *)&ifc) < 0) {
                perror("broadcast: ioctl (get interface configuration)");
                return (0);
        }
        ifr = ifc.ifc_req;
        for (i = 0, n = ifc.ifc_len/sizeof (struct ifreq); n > 0; n--, ifr++) {
                ifreq = *ifr;
                if (ioctl(sock, SIOCGIFFLAGS, (char *)&ifreq) < 0) {
                        perror("broadcast: ioctl (get interface flags)");
                        continue;
                }
                if ((ifreq.ifr_flags & IFF_BROADCAST) &&
                    (ifreq.ifr_flags & IFF_UP) &&
                    ifr->ifr_addr.sa_family == AF_INET) {
                        sin = (struct sockaddr_in *)&ifr->ifr_addr;
#ifdef SIOCGIFBRDADDR   /* 4.3BSD */
                        if (ioctl(sock, SIOCGIFBRDADDR, (char *)&ifreq) < 0) {
                                addrs[i++] = inet_makeaddr(inet_netof
                            (sin->sin_addr), INADDR_ANY);
                        } else {
                                addrs[i++] = ((struct sockaddr_in*)
                                  &ifreq.ifr_addr)->sin_addr;
                        }
#else /* 4.2 BSD */
                        addrs[i++] = inet_makeaddr(inet_netof
                          (sin->sin_addr.s_addr), INADDR_ANY);
#endif
                }
        }
        return (i);
}


enum clnt_stat
clnt_broadcast(prog, vers, proc, xargs, argsp, xresults, resultsp, eachresult)
        u_long          prog;           /* program number */
        u_long          vers;           /* version number */
        u_long          proc;           /* procedure number */
        xdrproc_t       xargs;          /* xdr routine for args */
        caddr_t         argsp;          /* pointer to args */
        xdrproc_t       xresults;       /* xdr routine for results */
        caddr_t         resultsp;       /* pointer to results */
        resultproc_t    eachresult;     /* call with each result obtained */
{
        enum clnt_stat stat;
        AUTH *unix_auth = authunix_create_default();
        XDR xdr_stream;
        register XDR *xdrs = &xdr_stream;
        int outlen, inlen, fromlen, nets;
        register int sock;
        int on = 1;
#ifdef FD_SETSIZE
        fd_set mask;
        fd_set readfds;
#else
        int readfds;
        register int mask;
#endif /* def FD_SETSIZE */
        register int i;
        bool_t done = FALSE;
        register u_long xid;
        u_long port;
        struct in_addr addrs[20];
        struct sockaddr_in baddr, raddr; /* broadcast and response addresses */
        struct rmtcallargs a;
        struct rmtcallres r;
        struct rpc_msg msg;
        struct timeval t;
        char outbuf[MAX_BROADCAST_SIZE], inbuf[UDPMSGSIZE];

        /*
         * initialization: create a socket, a broadcast address, and
         * preserialize the arguments into a send buffer.
         */
        if ((sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) < 0) {
                perror("Cannot create socket for broadcast rpc");
                stat = RPC_CANTSEND;
                goto done_broad;
        }
#ifdef SO_BROADCAST
        if (setsockopt(sock, SOL_SOCKET, SO_BROADCAST, &on, sizeof (on)) < 0) {
                perror("Cannot set socket option SO_BROADCAST");
                stat = RPC_CANTSEND;
                goto done_broad;
        }
#endif /* def SO_BROADCAST */
#ifdef FD_SETSIZE
        FD_ZERO(&mask);
        FD_SET(sock, &mask);
#else
        mask = (1 << sock);
#endif /* def FD_SETSIZE */
        nets = getbroadcastnets(addrs, sock, inbuf);
        bzero((char *)&baddr, sizeof (baddr));
        baddr.sin_family = AF_INET;
        baddr.sin_port = htons(PMAPPORT);
        baddr.sin_addr.s_addr = htonl(INADDR_ANY);
/*      baddr.sin_addr.S_un.S_addr = htonl(INADDR_ANY); */
        (void)gettimeofday(&t, (struct timezone *)0);
        msg.rm_xid = xid = getpid() ^ t.tv_sec ^ t.tv_usec;
        t.tv_usec = 0;
        msg.rm_direction = CALL;
        msg.rm_call.cb_rpcvers = RPC_MSG_VERSION;
        msg.rm_call.cb_prog = PMAPPROG;
        msg.rm_call.cb_vers = PMAPVERS;
        msg.rm_call.cb_proc = PMAPPROC_CALLIT;
        msg.rm_call.cb_cred = unix_auth->ah_cred;
        msg.rm_call.cb_verf = unix_auth->ah_verf;
        a.prog = prog;
        a.vers = vers;
        a.proc = proc;
        a.xdr_args = xargs;
        a.args_ptr = argsp;
        r.port_ptr = &port;
        r.xdr_results = xresults;
        r.results_ptr = resultsp;
        xdrmem_create(xdrs, outbuf, MAX_BROADCAST_SIZE, XDR_ENCODE);
        if ((! xdr_callmsg(xdrs, &msg)) || (! xdr_rmtcall_args(xdrs, &a))) {
                stat = RPC_CANTENCODEARGS;
                goto done_broad;
        }
        outlen = (int)xdr_getpos(xdrs);
        xdr_destroy(xdrs);
        /*
         * Basic loop: broadcast a packet and wait a while for response(s).
         * The response timeout grows larger per iteration.
         */
        for (t.tv_sec = 4; t.tv_sec <= 14; t.tv_sec += 2) {
                for (i = 0; i < nets; i++) {
                        baddr.sin_addr = addrs[i];
                        if (sendto(sock, outbuf, outlen, 0,
                                (struct sockaddr *)&baddr,
                                sizeof (struct sockaddr)) != outlen) {
                                perror("Cannot send broadcast packet");
                                stat = RPC_CANTSEND;
                                goto done_broad;
                        }
                }
                if (eachresult == NULL) {
                        stat = RPC_SUCCESS;
                        goto done_broad;
                }
        recv_again:
                msg.acpted_rply.ar_verf = _null_auth;
                msg.acpted_rply.ar_results.where = (caddr_t)&r;
                msg.acpted_rply.ar_results.proc = xdr_rmtcallres;
                readfds = mask;
                switch (select(_rpc_dtablesize(), &readfds, (int *)NULL,
                               (int *)NULL, &t)) {

                case 0:  /* timed out */
                        stat = RPC_TIMEDOUT;
                        continue;

                case -1:  /* some kind of error */
                        if (errno == EINTR)
                                goto recv_again;
                        perror("Broadcast select problem");
                        stat = RPC_CANTRECV;
                        goto done_broad;

                }  /* end of select results switch */
        try_again:
                fromlen = sizeof(struct sockaddr);
                inlen = recvfrom(sock, inbuf, UDPMSGSIZE, 0,
                        (struct sockaddr *)&raddr, &fromlen);
                if (inlen < 0) {
                        if (errno == EINTR)
                                goto try_again;
                        perror("Cannot receive reply to broadcast");
                        stat = RPC_CANTRECV;
                        goto done_broad;
                }
                if (inlen < sizeof(u_long))
                        goto recv_again;
                /*
                 * see if reply transaction id matches sent id.
                 * If so, decode the results.
                 */
                xdrmem_create(xdrs, inbuf, (u_int)inlen, XDR_DECODE);
                if (xdr_replymsg(xdrs, &msg)) {
                        if ((msg.rm_xid == xid) &&
                                (msg.rm_reply.rp_stat == MSG_ACCEPTED) &&
                                (msg.acpted_rply.ar_stat == SUCCESS)) {
                                raddr.sin_port = htons((u_short)port);
                                done = (*eachresult)(resultsp, &raddr);
                        }
                        /* otherwise, we just ignore the errors ... */
                } else {
#ifndef RISCOS
#ifdef notdef
                        /* some kind of deserialization problem ... */
                        if (msg.rm_xid == xid)
                                fprintf(stderr, "Broadcast deserialization problem");
                        /* otherwise, just random garbage */
#endif
#endif
                }
                xdrs->x_op = XDR_FREE;
                msg.acpted_rply.ar_results.proc = xdr_void;
                (void)xdr_replymsg(xdrs, &msg);
                (void)(*xresults)(xdrs, resultsp);
                xdr_destroy(xdrs);
                if (done) {
                        stat = RPC_SUCCESS;
                        goto done_broad;
                } else {
                        goto recv_again;
                }
        }
done_broad:
        (void)close(sock);
        AUTH_DESTROY(unix_auth);
        return (stat);
}

@


4.1
log
@Initial revision
@
text
@a209 1
typedef bool_t (*resultproc_t)();
@


4.1.7.1
log
@Imported from Babel
@
text
@@
