head	1.4;
access;
symbols
	NSPRLib-0_03:1.4
	NSPRLib-0_02:1.3
	NSPRLib-0_01:1.2
	dcotton_autobuild_BaseSW:1.2
	ahodgkin_207release:1.2
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2007.10.18.11.35.34;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	2007.01.27.02.20.59;	author srevill;	state Exp;
branches;
next	1.2;

1.2
date	98.09.10.12.07.15;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	98.04.28.16.42.03;	author ahodgkin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.04.28.16.42.03;	author ahodgkin;	state Exp;
branches;
next	;


desc
@@


1.4
log
@  Updated or added ReadMe files.
Detail:
  Some components have mixed licence conditions for files inside them.
  The added or updated ReadMe files explain the situation.
Admin:
  None.
@
text
@NSPRLib 18/10/2007 - ReadMe
===========================

Some Mozilla source code uses the NSPR - NetScape Portable Run-Time, a
complex library that defines just about everything you might want to get
a piece of software as complex as a web browser running at a technical
level. It even includes threading support for operating systems that
don't have it themselves.

The JavaScript interpreter doesn't require much of the NSPR, as the code
of it is meant to be stand-alone anyway. However, some of the NSPR header
files - in particular those relating to fundamental 'cross platform'
datatypes - are required.

Rather than kludge those into JSLib, these headers are available through
NSPRLib, along with various other functions which the JavaScript source
would like to see. Note, the API presented by the exported headers is NOT
wholly supported by the compiled binary! There will almost certainly be
several fragments of source code here which simply aren't used yet, and
the source itself is not a complete set of NSPR sources.

Note the 'SetPaths' obey file - useful for some editors. None of the
system variable names are allocated though...

The majority of the library files fall under the NPL (now called the MPL
in its more modern incarnation). Files created anew for the port fall
under the shared source licence. The applicable licence is described by
comments within individual files.


Replacing malloc, free, calloc and realloc
==========================================

By adding "-DUSE_NSPRLIB_ALLOC_REGISTRATION", the malloc() family of calls
will not be used. Instead, functions in "RISCOSconf.c.ROSallocs" are used;
these let you register any function you like. The default is for the
malloc family, but MemLib could be used instead.

There is a slight speed penalty for doing this, so in builds where the
malloc() family is an acceptable allocation method it is best to build
without USE_NSPRLIB_ALLOC_REGISTRATION defined.

It is up to the client application to register different functions and
call any relevant initialisation functions for a chosen replacement memory
system before any functions in NSPRLib, if functions other than the
malloc() family are required.
@


1.3
log
@  Lots of new bits required for the latest Browse build
Detail:
  Some tweaks and lots of header files added to support the latest Browse
  build.
Admin:
  Yet to be tested fully in a ROOL-Browse build

Version 0.02. Tagged as 'NSPRLib-0_02'
@
text
@d1 1
a1 1
NSPRLib 10/09/1998 - ReadMe
d4 1
a4 1
The Mozilla source code uses the NSPR - NetScape Portable Run-Time, a
d25 5
@


1.2
log
@Can now be built either to use the malloc() family for memory allocations
or a set of functions allowing run-time replacement of those functions,
though malloc() etc. are still used by default. See !!ReadMe for more info.
@
text
@a41 6

-- 
Andrew Hodgkinson, Senior Software Engineer, Internet Technologies
Acorn Computers Ltd.                         Tel: +44 (0) 1223 725247
Acorn House, 645 Newmarket Road              Fax: +44 (0) 1223 725347
Cambridge, CB5 8PB, United Kingdom           WWW: http://www.acorn.co.uk/@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
NSPRLib 28/04/1998 - ReadMe
d24 18
@


1.1.1.1
log
@
First attempt at a port of the NSPR (Netscape Portable Runtime), with just
enough in it to support JavaScript. And it really is, this time...

@
text
@@
