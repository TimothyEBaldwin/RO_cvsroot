head	1.10;
access;
symbols
	ImageLib-0_09:1.10
	ImageLib-0_08:1.10
	ImageLib-0_07:1.10
	ImageLib-0_06:1.10
	ImageLib-0_05:1.10
	ImageLib-0_04:1.10
	ImageLib-0_03:1.10
	ImageLib-0_02:1.10
	ImageLib-0_01:1.10
	dcotton_autobuild_BaseSW:1.10
	ahodgkin_207release:1.10
	ahodgkin_206release:1.10
	ahodgkin_205release:1.10
	ahodgkin_133beta:1.6
	kbracey_126beta:1.4
	kbracey_AW97patch:1.3
	ahodgkin_AW97:1.3;
locks; strict;
comment	@# @;


1.10
date	98.03.09.12.13.24;	author kbracey;	state Exp;
branches;
next	1.9;

1.9
date	98.03.06.15.25.05;	author kbracey;	state Exp;
branches;
next	1.8;

1.8
date	98.03.06.12.29.29;	author kbracey;	state Exp;
branches;
next	1.7;

1.7
date	98.03.03.11.31.16;	author kbracey;	state Exp;
branches;
next	1.6;

1.6
date	97.11.12.11.15.00;	author kbracey;	state Exp;
branches;
next	1.5;

1.5
date	97.11.04.15.27.42;	author kbracey;	state Exp;
branches;
next	1.4;

1.4
date	97.10.30.16.25.43;	author kbracey;	state Exp;
branches;
next	1.3;

1.3
date	97.10.14.13.45.39;	author kbracey;	state Exp;
branches;
next	1.2;

1.2
date	97.10.10.20.10.07;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	97.07.21.12.23.40;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Updated to libpng-1.0.0
@
text
@
/* pngconf.h - machine configurable file for libpng
 *
 * libpng 1.0.0
 * For conditions of distribution and use, see copyright notice in png.h
 * Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.
 * Copyright (c) 1996, 1997 Andreas Dilger
 * Copyright (c) 1998, Glenn Randers-Pehrson
 * March 8, 1998
 */

/* Any machine specific code is near the front of this file, so if you
 * are configuring libpng for a machine, you may want to read the section
 * starting here down to where it starts to typedef png_color, png_text,
 * and png_info.
 */

#ifndef PNGCONF_H
#define PNGCONF_H

/* This is the size of the compression buffer, and thus the size of
 * an IDAT chunk.  Make this whatever size you feel is best for your
 * machine.  One of these will be allocated per png_struct.  When this
 * is full, it writes the data to the disk, and does some other
 * calculations.  Making this an extremely small size will slow
 * the library down, but you may want to experiment to determine
 * where it becomes significant, if you are concerned with memory
 * usage.  Note that zlib allocates at least 32Kb also.  For readers,
 * this describes the size of the buffer available to read the data in.
 * Unless this gets smaller than the size of a row (compressed),
 * it should not make much difference how big this is.
 */

#ifndef PNG_ZBUF_SIZE
#define PNG_ZBUF_SIZE 8192
#endif

/* If you are running on a machine where you cannot allocate more
 * than 64K of memory at once, uncomment this.  While libpng will not
 * normally need that much memory in a chunk (unless you load up a very
 * large file), zlib needs to know how big of a chunk it can use, and
 * libpng thus makes sure to check any memory allocation to verify it
 * will fit into memory.
#define PNG_MAX_MALLOC_64K
 */
#if defined(MAXSEG_64K) && !defined(PNG_MAX_MALLOC_64K)
#define PNG_MAX_MALLOC_64K
#endif

/* This protects us against compilers which run on a windowing system
 * and thus don't have or would rather us not use the stdio types:
 * stdin, stdout, and stderr.  The only one currently used is stderr
 * in png_error() and png_warning().  #defining PNG_NO_STDIO will
 * prevent these from being compiled and used.
 * #define PNG_NO_STDIO
 */

#ifndef PNG_NO_STDIO 
#include <stdio.h>
#endif

/* This macro protects us against machines that don't have function
 * prototypes (ie K&R style headers).  If your compiler does not handle
 * function prototypes, define this macro and use the included ansi2knr.
 * I've always been able to use _NO_PROTO as the indicator, but you may
 * need to drag the empty declaration out in front of here, or change the
 * ifdef to suit your own needs.
 */
#ifndef PNGARG

#ifdef OF /* zlib prototype munger */
#define PNGARG(arglist) OF(arglist)
#else

#ifdef _NO_PROTO
#define PNGARG(arglist) ()
#else
#define PNGARG(arglist) arglist
#endif /* _NO_PROTO */

#endif /* OF */

#endif /* PNGARG */

/* Try to determine if we are compiling on a Mac.  Note that testing for
 * just __MWERKS__ is not good enough, because the Codewarrior is now used
 * on non-Mac platforms.
 */
#ifndef MACOS
#if (defined(__MWERKS__) && defined(macintosh)) || defined(applec) || \
    defined(THINK_C) || defined(__SC__) || defined(TARGET_OS_MAC)
#define MACOS
#endif
#endif

/* enough people need this for various reasons to include it here */
#if !defined(MACOS) && !defined(RISCOS)
#include <sys/types.h>
#endif

/* This is an attempt to force a single setjmp behaviour on Linux.  If
 * the X config stuff didn't define _BSD_SOURCE we wouldn't need this.
 */
#ifdef __linux__
#ifdef _BSD_SOURCE
#define _PNG_SAVE_BSD_SOURCE
#undef _BSD_SOURCE
#endif
#ifdef _SETJMP_H
__png.h__ already includes setjmp.h
__dont__ include it again
#endif
#endif /* __linux__ */

/* include setjmp.h for error handling */
#include <setjmp.h>

#ifdef __linux__
#ifdef _PNG_SAVE_BSD_SOURCE
#define _BSD_SOURCE
#undef _PNG_SAVE_BSD_SOURCE
#endif
#endif /* __linux__ */

#ifdef BSD
#include <strings.h>
#else
#include <string.h>
#endif

/* Other defines for things like memory and the like can go here.  */
#ifdef PNG_INTERNAL
#include <stdlib.h>

/* The functions exported by PNG_EXTERN are PNG_INTERNAL functions, which
 * aren't usually used outside the library (as far as I know), so it is
 * debatable if they should be exported at all.  In the future, when it is
 * possible to have run-time registry of chunk-handling functions, some of
 * these will be made available again.
#define PNG_EXTERN extern
 */
#define PNG_EXTERN

/* Other defines specific to compilers can go here.  Try to keep
 * them inside an appropriate ifdef/endif pair for portability.
 */

#if defined(MACOS)
/* We need to check that <math.h> hasn't already been included earlier
 * as it seems it doesn't agree with <fp.h>, yet we should really use
 * <fp.h> if possible.
 */
#if !defined(__MATH_H__) && !defined(__MATH_H) && !defined(__cmath__)
#include <fp.h>
#endif
#else
#include <math.h>
#endif

/* Codewarrior on NT has linking problems without this. */
#if defined(__MWERKS__) && defined(WIN32)
#define PNG_ALWAYS_EXTERN
#endif

/* For some reason, Borland C++ defines memcmp, etc. in mem.h, not
 * stdlib.h like it should (I think).  Or perhaps this is a C++
 * "feature"?
 */
#ifdef __TURBOC__
#include <mem.h>
#include "alloc.h"
#endif

#ifdef _MSC_VER
#include <malloc.h>
#endif

/* This controls how fine the dithering gets.  As this allocates
 * a largish chunk of memory (32K), those who are not as concerned
 * with dithering quality can decrease some or all of these.
 */
#ifndef PNG_DITHER_RED_BITS
#define PNG_DITHER_RED_BITS 5
#endif
#ifndef PNG_DITHER_GREEN_BITS
#define PNG_DITHER_GREEN_BITS 5
#endif
#ifndef PNG_DITHER_BLUE_BITS
#define PNG_DITHER_BLUE_BITS 5
#endif

/* This controls how fine the gamma correction becomes when you
 * are only interested in 8 bits anyway.  Increasing this value
 * results in more memory being used, and more pow() functions
 * being called to fill in the gamma tables.  Don't set this value
 * less then 8, and even that may not work (I haven't tested it).
 */

#ifndef PNG_MAX_GAMMA_8
#define PNG_MAX_GAMMA_8 11
#endif

/* This controls how much a difference in gamma we can tolerate before
 * we actually start doing gamma conversion.
 */
#ifndef PNG_GAMMA_THRESHOLD
#define PNG_GAMMA_THRESHOLD 0.05
#endif

#endif /* PNG_INTERNAL */

/* The following uses const char * instead of char * for error
 * and warning message functions, so some compilers won't complain.
 * If you do not want to use const, define PNG_NO_CONST here.
 */

#ifndef PNG_NO_CONST
#  define PNG_CONST const
#else
#  define PNG_CONST
#endif

/* The following defines give you the ability to remove code from the
 * library that you will not be using.  I wish I could figure out how to
 * automate this, but I can't do that without making it seriously hard
 * on the users.  So if you are not using an ability, change the #define
 * to and #undef, and that part of the library will not be compiled.  If
 * your linker can't find a function, you may want to make sure the
 * ability is defined here.  Some of these depend upon some others being
 * defined.  I haven't figured out all the interactions here, so you may
 * have to experiment awhile to get everything to compile.  If you are
 * creating or using a shared library, you probably shouldn't touch this,
 * as it will affect the size of the structures, and this will cause bad
 * things to happen if the library and/or application ever change.
 */

/* Any transformations you will not be using can be undef'ed here */

/* GR-P, 0.96a: Set "*TRANSFORMS_SUPPORTED as default but allow user
   to turn it off with "*TRANSFORMS_NOT_SUPPORTED" on the compile line,
   then pick and choose which ones to define without having to edit
   this file. It is safe to use the *TRANSFORMS_NOT_SUPPORTED if you
   only want to have a png-compliant reader/writer but don't need
   any of the extra transformations.  This saves about 80 kbytes in a
   typical installation of the library.
 */


#ifndef PNG_READ_TRANSFORMS_NOT_SUPPORTED
#define PNG_READ_TRANSFORMS_SUPPORTED
#endif
#ifndef PNG_WRITE_TRANSFORMS_NOT_SUPPORTED
#define PNG_WRITE_TRANSFORMS_SUPPORTED
#endif

#ifdef PNG_READ_TRANSFORMS_SUPPORTED
#define PNG_READ_EXPAND_SUPPORTED
#define PNG_READ_SHIFT_SUPPORTED
#define PNG_READ_PACK_SUPPORTED
#define PNG_READ_BGR_SUPPORTED
#define PNG_READ_SWAP_SUPPORTED
#define PNG_READ_PACKSWAP_SUPPORTED
#define PNG_READ_INVERT_SUPPORTED
#define PNG_READ_DITHER_SUPPORTED
#define PNG_READ_BACKGROUND_SUPPORTED
#define PNG_READ_16_TO_8_SUPPORTED
#define PNG_READ_FILLER_SUPPORTED
#define PNG_READ_GAMMA_SUPPORTED
#define PNG_READ_GRAY_TO_RGB_SUPPORTED
#define PNG_READ_SWAP_ALPHA_SUPPORTED
#define PNG_READ_INVERT_ALPHA_SUPPORTED
#define PNG_READ_STRIP_ALPHA_SUPPORTED
#define PNG_READ_USER_TRANSFORM_SUPPORTED
/* the following aren't implemented yet
#define PNG_READ_RGB_TO_GRAY_SUPPORTED
 */
#endif /* PNG_READ_TRANSFORMS_SUPPORTED */

#ifndef PNG_PROGRESSIVE_READ_NOT_SUPPORTED   /* if you don't do progressive   */
#define PNG_PROGRESSIVE_READ_SUPPORTED       /* reading.  This is not talking */
#endif                               /* about interlacing capability!  You'll */
              /* still have interlacing unless you change the following line: */
#define PNG_READ_INTERLACING_SUPPORTED /* required for PNG-compliant decoders */
#define PNG_READ_COMPOSITE_NODIV_SUPPORTED    /* well tested on Intel and SGI */

#ifdef PNG_WRITE_TRANSFORMS_SUPPORTED
#define PNG_WRITE_SHIFT_SUPPORTED
#define PNG_WRITE_PACK_SUPPORTED
#define PNG_WRITE_BGR_SUPPORTED
#define PNG_WRITE_SWAP_SUPPORTED
#define PNG_WRITE_PACKSWAP_SUPPORTED
#define PNG_WRITE_INVERT_SUPPORTED
#define PNG_WRITE_FILLER_SUPPORTED  /* This is the same as WRITE_STRIP_ALPHA */
#define PNG_WRITE_FLUSH_SUPPORTED
#define PNG_WRITE_SWAP_ALPHA_SUPPORTED
#define PNG_WRITE_INVERT_ALPHA_SUPPORTED
#define PNG_WRITE_WEIGHTED_FILTER_SUPPORTED
#define PNG_WRITE_USER_TRANSFORM_SUPPORTED
#endif /* PNG_WRITE_TRANSFORMS_SUPPORTED */

#define PNG_WRITE_INTERLACING_SUPPORTED  /* not required for PNG-compliant
                                            encoders, but can cause trouble
                                            if left undefined */

#if !defined(PNG_NO_STDIO)
#define PNG_TIME_RFC1123_SUPPORTED
#endif

/* This adds extra functions in pngget.c for accessing data from the
 * info pointer (added in version 0.99)
 * png_get_image_width()
 * png_get_image_height()
 * png_get_bit_depth()
 * png_get_color_type()
 * png_get_compression_type()
 * png_get_filter_type()
 * png_get_interlace_type()
 * png_get_pixel_aspect_ratio()
 * png_get_pixels_per_meter()
 * png_get_x_offset_pixels()
 * png_get_y_offset_pixels()
 * png_get_x_offset_microns()
 * png_get_y_offset_microns()
 */
#if !defined(PNG_NO_EASY_ACCESS)
#define PNG_EASY_ACCESS_SUPPORTED
#endif

/* These are currently experimental features, define them if you want */

/* very little testing */
/*
#define PNG_READ_16_TO_8_ACCURATE_SCALE_SUPPORTED
*/

/* This is only for PowerPC big-endian and 680x0 systems */
/* some testing */
/*
#define PNG_READ_BIG_ENDIAN_SUPPORTED
*/

/* These functions are turned off by default, as they will be phased out. */
/*
#define  PNG_USELESS_TESTS_SUPPORTED
#define  PNG_CORRECT_PALETTE_SUPPORTED
*/

/* Any chunks you are not interested in, you can undef here.  The
 * ones that allocate memory may be expecially important (hIST,
 * tEXt, zTXt, tRNS, pCAL).  Others will just save time and make png_info
 * a bit smaller.
 */

#ifndef PNG_READ_ANCILLARY_CHUNKS_NOT_SUPPORTED
#define PNG_READ_ANCILLARY_CHUNKS_SUPPORTED
#endif
#ifndef PNG_WRITE_ANCILLARY_CHUNKS_NOT_SUPPORTED
#define PNG_WRITE_ANCILLARY_CHUNKS_SUPPORTED
#endif

#ifdef PNG_READ_ANCILLARY_CHUNKS_SUPPORTED
#define PNG_READ_bKGD_SUPPORTED
#define PNG_READ_cHRM_SUPPORTED
#define PNG_READ_gAMA_SUPPORTED
#define PNG_READ_hIST_SUPPORTED
#define PNG_READ_oFFs_SUPPORTED
#define PNG_READ_pCAL_SUPPORTED
#define PNG_READ_pHYs_SUPPORTED
#define PNG_READ_sBIT_SUPPORTED
#define PNG_READ_sRGB_SUPPORTED
#define PNG_READ_tEXt_SUPPORTED
#define PNG_READ_tIME_SUPPORTED
#define PNG_READ_tRNS_SUPPORTED
#define PNG_READ_zTXt_SUPPORTED
#define PNG_READ_OPT_PLTE_SUPPORTED /* only affects support of the optional */
                                    /* PLTE chunk in RGB and RGBA images */
#endif /* PNG_READ_ANCILLARY_CHUNKS_SUPPORTED */

#ifdef PNG_WRITE_ANCILLARY_CHUNKS_SUPPORTED
#define PNG_WRITE_bKGD_SUPPORTED
#define PNG_WRITE_cHRM_SUPPORTED
#define PNG_WRITE_gAMA_SUPPORTED
#define PNG_WRITE_hIST_SUPPORTED
#define PNG_WRITE_oFFs_SUPPORTED
#define PNG_WRITE_pCAL_SUPPORTED
#define PNG_WRITE_pHYs_SUPPORTED
#define PNG_WRITE_sBIT_SUPPORTED
#define PNG_WRITE_sRGB_SUPPORTED
#define PNG_WRITE_tEXt_SUPPORTED
#define PNG_WRITE_tIME_SUPPORTED
#define PNG_WRITE_tRNS_SUPPORTED
#define PNG_WRITE_zTXt_SUPPORTED
#endif /* PNG_WRITE_ANCILLARY_CHUNKS_SUPPORTED */

/* need the time information for reading tIME chunks */
#if defined(PNG_READ_tIME_SUPPORTED) || defined(PNG_WRITE_tIME_SUPPORTED)
#include <time.h>
#endif

/* Some typedefs to get us started.  These should be safe on most of the
 * common platforms.  The typedefs should be at least as large as the
 * numbers suggest (a png_uint_32 must be at least 32 bits long), but they
 * don't have to be exactly that size.  Some compilers dislike passing
 * unsigned shorts as function parameters, so you may be better off using
 * unsigned int for png_uint_16.  Likewise, for 64-bit systems, you may
 * want to have unsigned int for png_uint_32 instead of unsigned long.
 */

typedef unsigned long png_uint_32;
typedef long png_int_32;
typedef unsigned short png_uint_16;
typedef short png_int_16;
typedef unsigned char png_byte;

/* This is usually size_t.  It is typedef'ed just in case you need it to
   change (I'm not sure if you will or not, so I thought I'd be safe) */
typedef size_t png_size_t;

/* The following is needed for medium model support.  It cannot be in the
 * PNG_INTERNAL section.  Needs modification for other compilers besides
 * MSC.  Model independent support declares all arrays and pointers to be
 * large using the far keyword.  The zlib version used must also support
 * model independent data.  As of version zlib 1.0.4, the necessary changes
 * have been made in zlib.  The USE_FAR_KEYWORD define triggers other
 * changes that are needed. (Tim Wegner)
 */

/* Separate compiler dependencies (problem here is that zlib.h always
   defines FAR. (SJT) */
#ifdef __BORLANDC__
#if defined(__LARGE__) || defined(__HUGE__) || defined(__COMPACT__)
#define LDATA 1
#else
#define LDATA 0
#endif

#if !defined(__WIN32__) && !defined(__FLAT__)
#define PNG_MAX_MALLOC_64K
#if (LDATA != 1)
#ifndef FAR
#define FAR __far
#endif
#define USE_FAR_KEYWORD
#endif   /* LDATA != 1 */

/* Possibly useful for moving data out of default segment.
 * Uncomment it if you want. Could also define FARDATA as
 * const if your compiler supports it. (SJT)
#  define FARDATA FAR
 */
#endif  /* __WIN32__, __FLAT__ */

#endif   /* __BORLANDC__ */


/* Suggest testing for specific compiler first before testing for
 * FAR.  The Watcom compiler defines both __MEDIUM__ and M_I86MM,
 * making reliance oncertain keywords suspect. (SJT)
 */

/* MSC Medium model */
#if defined(FAR)
#  if defined(M_I86MM)
#     define USE_FAR_KEYWORD
#     define FARDATA FAR
#     include <dos.h>
#  endif
#endif

/* SJT: default case */
#ifndef FAR
#   define FAR
#endif

/* At this point FAR is always defined */
#ifndef FARDATA
#define FARDATA
#endif

/* Add typedefs for pointers */
typedef void            FAR * png_voidp;
typedef png_byte        FAR * png_bytep;
typedef png_uint_32     FAR * png_uint_32p;
typedef png_int_32      FAR * png_int_32p;
typedef png_uint_16     FAR * png_uint_16p;
typedef png_int_16      FAR * png_int_16p;
typedef PNG_CONST char  FAR * png_const_charp;
typedef char            FAR * png_charp;
typedef double          FAR * png_doublep;

/* Pointers to pointers; i.e. arrays */
typedef png_byte        FAR * FAR * png_bytepp;
typedef png_uint_32     FAR * FAR * png_uint_32pp;
typedef png_int_32      FAR * FAR * png_int_32pp;
typedef png_uint_16     FAR * FAR * png_uint_16pp;
typedef png_int_16      FAR * FAR * png_int_16pp;
typedef PNG_CONST char  FAR * FAR * png_const_charpp;
typedef char            FAR * FAR * png_charpp;
typedef double          FAR * FAR * png_doublepp;

/* Pointers to pointers to pointers; i.e. pointer to array */
typedef char            FAR * FAR * FAR * png_charppp;

/* libpng typedefs for types in zlib. If zlib changes
 * or another compression library is used, then change these.
 * Eliminates need to change all the source files.
 */
typedef charf *         png_zcharp;
typedef charf * FAR *   png_zcharpp;
typedef z_stream FAR *  png_zstreamp; 

/* allow for compilation as dll under MS Windows */
#ifdef __WIN32DLL__
#define PNG_EXPORT(type,symbol) __declspec(dllexport) type symbol
#endif

/* allow for compilation as dll with BORLAND C++ 5.0 */
#if defined(__BORLANDC__) && defined(_Windows) && defined(__DLL__)
#   define PNG_EXPORT(type,symbol) type _export symbol
#endif

/* allow for compilation as shared lib under BeOS */
#ifdef __BEOSDLL__
#define PNG_EXPORT(type,symbol) __declspec(export) type symbol
#endif

#ifndef PNG_EXPORT
#define PNG_EXPORT(type,symbol) type symbol
#endif


/* User may want to use these so not in PNG_INTERNAL. Any library functions
 * that are passed far data must be model independent.
 */

#if defined(USE_FAR_KEYWORD)  /* memory model independent fns */
/* use this to make far-to-near assignments */
#   define CHECK   1
#   define NOCHECK 0
#   define CVT_PTR(ptr) (png_far_to_near(png_ptr,ptr,CHECK))
#   define CVT_PTR_NOCHECK(ptr) (png_far_to_near(png_ptr,ptr,NOCHECK))
#   define png_strlen _fstrlen
#   define png_memcmp _fmemcmp      /* SJT: added */
#   define png_memcpy _fmemcpy
#   define png_memset _fmemset
#else /* use the usual functions */
#   define CVT_PTR(ptr)         (ptr)
#   define CVT_PTR_NOCHECK(ptr) (ptr)
#   define png_strlen strlen
#   define png_memcmp memcmp     /* SJT: added */
#   define png_memcpy memcpy
#   define png_memset memset
#endif
/* End of memory model independent support */

/* Just a double check that someone hasn't tried to define something
 * contradictory. 
 */
#if (PNG_ZBUF_SIZE > 65536) && defined(PNG_MAX_MALLOC_64K)
#undef PNG_ZBUF_SIZE
#define PNG_ZBUF_SIZE 65536
#endif

#endif /* PNGCONF_H */

@


1.9
log
@Updated to libpng-0.99g
@
text
@d4 1
a4 1
 * libpng 0.99g
d9 1
a9 1
 * March 6, 1998
d239 2
a240 2
/* GR-P, 0.96a: Set "*FULLY_SUPPORTED as default but allow user
   to turn it off with "*NOT_FULLY_SUPPORTED" on the compile line,
d242 1
a242 1
   this file. It is safe to use the *NOT_FULLY_SUPPORTED if you
d244 2
a245 2
   any of the extra transformations or progressive reading.  This
   saves about 80 kbytes in a typical installation of the library.
d248 3
a250 2
#ifndef PNG_READ_NOT_FULLY_SUPPORTED
#define PNG_READ_FULLY_SUPPORTED
d252 2
a253 2
#ifndef PNG_WRITE_NOT_FULLY_SUPPORTED
#define PNG_WRITE_FULLY_SUPPORTED
d256 1
a256 2
#ifdef PNG_READ_FULLY_SUPPORTED
#define PNG_PROGRESSIVE_READ_SUPPORTED
d277 1
a277 1
#endif /* PNG_READ_FULLY_SUPPORTED */
d279 6
a284 2
#define PNG_READ_COMPOSITE_NODIV_SUPPORTED  /* well tested on Intel and SGI */
#define PNG_READ_INTERLACING_SUPPORTED  /* required for PNG-compliant decoders */
d286 1
a286 1
#ifdef PNG_WRITE_FULLY_SUPPORTED
d299 1
a299 1
#endif /* PNG_WRITE_FULLY_SUPPORTED */
d301 2
a302 2
#define PNG_WRITE_INTERLACING_SUPPORTED  /* not required for PNG-compliant */
                                         /* encoders, but can cause trouble
@


1.8
log
@Updated to pnglib-0.99f. Some code in ImageLib/png.c tidied up and
commented better.
@
text
@d4 1
a4 1
 * libpng 0.99f
d9 1
a9 1
 * March 5, 1998
@


1.7
log
@Updated to libpng-0.99e and zlib-1.1.1
@
text
@d4 1
a4 1
 * libpng 0.99e
d9 1
a9 1
 * February 28, 1998
d55 1
a56 1
#define PNG_NO_STDIO
d58 1
a58 1
#ifndef PNG_NO_STDIO
d242 4
a245 1
   this file.
d258 1
a258 1
#undef  PNG_READ_SHIFT_SUPPORTED
d260 2
a261 2
#undef  PNG_READ_BGR_SUPPORTED
#undef   PNG_READ_SWAP_SUPPORTED
d263 3
a265 3
#undef  PNG_READ_INVERT_SUPPORTED
#undef  PNG_READ_DITHER_SUPPORTED
#undef  PNG_READ_BACKGROUND_SUPPORTED
d269 8
a276 5
#undef  PNG_READ_GRAY_TO_RGB_SUPPORTED
#undef  PNG_READ_SWAP_ALPHA_SUPPORTED
#undef  PNG_READ_INVERT_ALPHA_SUPPORTED
#undef  PNG_READ_STRIP_ALPHA_SUPPORTED
#define PNG_READ_COMPOSITE_NODIV_SUPPORTED        /* well tested on Intel */
d279 1
d294 1
d359 1
a359 1
#undef  PNG_READ_cHRM_SUPPORTED
d361 4
a364 4
#undef  PNG_READ_hIST_SUPPORTED
#undef  PNG_READ_oFFs_SUPPORTED
#undef  PNG_READ_pCAL_SUPPORTED
#undef  PNG_READ_pHYs_SUPPORTED
d367 2
a368 2
#undef  PNG_READ_tEXt_SUPPORTED
#undef  PNG_READ_tIME_SUPPORTED
d370 2
a371 2
#undef  PNG_READ_zTXt_SUPPORTED
#undef  PNG_READ_OPT_PLTE_SUPPORTED /* only affects support of the optional */
a404 4
#ifdef RISCOS
typedef unsigned int png_uint_32;
typedef int png_int_32;
#else
a406 1
#endif
d506 1
a506 1
typedef z_stream FAR *  png_zstreamp;
d553 1
a553 1
 * contradictory.
@


1.6
log
@Stripped down libpng a bit more.
Withdrew PNG pHYs support (it sucked).
Made spare palette entries of alpha images opaque black instead of transparent.
More fixes for greyscale palettes.
Made export of alpha PNGs work (for real this time).
Made transparent GIF backgrounds work.
@
text
@d2 9
a10 8
/* pngconf.c - machine configurable file for libpng

   libpng 1.0 beta 5 - version 0.95
   For conditions of distribution and use, see copyright notice in png.h
   Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.
   Copyright (c) 1996, 1997 Andreas Dilger
   March 30, 1997
   */
d13 4
a16 3
   are configuring libpng for a machine, you may want to read the section
   starting here down to where it starts to typedef png_color, png_text,
   and png_info */
d22 11
a32 10
   an IDAT chunk.  Make this whatever size you feel is best for your
   machine.  One of these will be allocated per png_struct.  When this
   is full, it writes the data to the disk, and does some other
   calculations.  Making this an extreamly small size will slow
   the library down, but you may want to experiment to determine
   where it becomes significant, if you are concerned with memory
   usage.  Note that zlib allocates at least 32Kb also.  For readers,
   this describes the size of the buffer available to read the data in.
   Unless this gets smaller then the size of a row (compressed),
   it should not make much difference how big this is.  */
d34 1
d36 1
d39 5
a43 5
   than 64K of memory at once, uncomment this.  While libpng will not
   normally need that much memory in a chunk (unless you load up a very
   large file), zlib needs to know how big of a chunk it can use, and
   libpng thus makes sure to check any memory allocation to verify it
   will fit into memory.
d45 1
a45 1
*/
d51 5
a55 5
   and thus don't have or would rather us not use the stdio types:
   stdin, stdout, and stderr.  The only one currently used is stderr
   in png_error() and png_warning().  #defining PNG_NO_STDIO will
   prevent these from being compiled and used. */

d58 1
a58 2
/* for FILE.  If you are not using standard io, you don't need this */
/*#ifndef PNG_NO_STDIO*/
d60 1
a60 1
/*#endif*/
d63 6
a68 5
   prototypes (ie K&R style headers).  If your compiler does not handle
   function prototypes, define this macro and use the included ansi2knr.
   I've always been able to use _NO_PROTO as the indicator, but you may
   need to drag the empty declaration out in front of here, or change the
   ifdef to suit your own needs. */
d85 7
a91 2
/* Try to determine if we are compiling on a Mac */
#if defined(__MWERKS__) ||defined(applec) ||defined(THINK_C) ||defined(__SC__)
d94 1
d102 3
a104 2
   the X config stuff didn't define _BSD_SOURCE we wouldn't need this. */
#ifdef linux
d110 2
a111 2
error  __png_h_already_includes_setjmp_h__
error  __dont_include_it_again__
d113 1
a113 1
#endif /* linux */
d118 1
a118 1
#ifdef linux
d123 1
a123 1
#endif /* linux */
a133 3
/* Where do we need this???
#include <ctype.h>
*/
d145 2
a146 1
   them inside an appropriate ifdef/endif pair for portability */
d150 3
a152 2
   as it seems it doesn't agree with <fp.h>, yet we should really use
   <fp.h> if possible. */
d160 5
d166 3
a168 2
   stdlib.h like it should (I think).  Or perhaps this is a C++
   "feature"? */
d179 4
a182 2
   a largish chunk of memory (32K), those who are not as concerned
   with dithering quality can decrease some or all of these. */
d184 2
d187 2
d190 1
d193 5
a197 5
   are only interested in 8 bits anyway.  Increasing this value
   results in more memory being used, and more pow() functions
   being called to fill in the gamma tables.  Don't set this
   value less then 8, and even that may not work (I haven't tested
   it). */
d199 1
d201 1
d204 3
a206 1
   we actually start doing gamma conversion.  */
d208 1
d213 3
a215 6
   and warning message functions, so some compilers won't complain.
   If you want to use const, define PNG_USE_CONST here.  It is not
   normally defined to make configuration easier, as it is not a
   critical part of the code.
   */
#define PNG_USE_CONST
d217 1
a217 1
#ifdef PNG_USE_CONST
d224 12
a235 11
   library that you will not be using.  I wish I could figure out how to
   automate this, but I can't do that without making it seriously hard
   on the users.  So if you are not using an ability, change the #define
   to and #undef, and that part of the library will not be compiled.  If
   your linker can't find a function, you may want to make sure the
   ability is defined here.  Some of these depend upon some others being
   defined.  I haven't figured out all the interactions here, so you may
   have to experiment awhile to get everything to compile.  If you are
   creating or using a shared library, you probably shouldn't touch this,
   as it will affect the size of the structures, and this will cause bad
   things to happen if the library and/or application ever change. */
d238 15
a253 2
#undef  PNG_READ_OPT_PLTE_SUPPORTED
#define PNG_READ_INTERLACING_SUPPORTED
d258 1
a258 1
#undef  PNG_READ_SWAP_SUPPORTED
d268 1
d270 4
d275 1
a275 1
#define PNG_WRITE_INTERLACING_SUPPORTED
d281 1
a281 1
#undef  PNG_WRITE_INVERT_SUPPORTED
d285 1
d287 1
d289 34
a322 3
/* These are currently experimental features */
#undef PNG_READ_16_TO_8_ACCURATE_SHIFT_SUPPORTED /* very little testing */
#undef PNG_READ_COMPOSITE_NODIV_SUPPORTED        /* very little testing */
d325 4
a328 1
#undef PNG_READ_BIG_ENDIAN_SUPPORTED             /* some testing */
d331 4
a334 3
#undef  PNG_USE_OWN_CRC
#undef  PNG_USELESS_TESTS_SUPPORTED
#define PNG_CORRECT_PALETTE_SUPPORTED
d339 1
a339 2
 * a bit smaller.  OPT_PLTE only disables the optional palette in RGB
 * and RGBA images.
d342 8
d358 1
d363 3
d367 1
d376 1
d381 1
d440 2
a441 2
   Uncomment it if you want. Could also define FARDATA as
   const if your compiler supports it. (SJT)
d443 1
a443 1
*/
d450 3
a452 2
   FAR.  The Watcom compiler defines both __MEDIUM__ and M_I86MM,
   making reliance oncertain keywords suspect. (SJT) */
d505 1
a505 1
/* allow for compilation as dll under windows */
d510 10
d521 1
a521 1
#define PNG_EXPORT(t,s) t s
d526 2
a527 1
   that are passed far data must be model independent. */
d533 2
a534 2
#   define CVT_PTR(ptr) (far_to_near(png_ptr,ptr,CHECK))
#   define CVT_PTR_NOCHECK(ptr) (far_to_near(png_ptr,ptr,NOCHECK))
@


1.5
log
@Removed lots of compilation warnings in PNG stuff.
Added some "fast plot without translation" optimisations.
Convert RGB PNGs with <=5 significant bits on every channel into 16bpp sprites.
Fixed a few RGB/greyscale tRNS anomalies.
Made sure no gamma correction occurs if no gAMA chunk in PNG.
Ensured that values 0 and 255 in alpha blending gamma tables are correct.
Made < 8bpp paletted PNGs with complex transparency work.
Made n bpp paletted PNGs with <n^(1/2) palette entries work. (eg 8bpp images
with 8 palette entries (yuck)).
Ensured spare palette entries in PNGs cleared.
Added support for saving paletted transparent PNGs as sprites composited onto the PNG
background colour.
Added support for alpha blending in < 8bpp modes.
@
text
@d212 1
a212 1
#define PNG_READ_OPT_PLTE_SUPPORTED
d221 1
a221 1
#define PNG_READ_DITHER_SUPPORTED
d267 1
a267 1
#define PNG_READ_pHYs_SUPPORTED
@


1.4
log
@Did major sorting out of 24 bit PNG images on RISC OS 3.1.
Implemented alpha blending on RISC OS 3.1.
@
text
@d216 1
a216 1
#undef  PNG_READ_PACK_SUPPORTED
d301 4
d307 1
@


1.3
log
@Made RGB PNGs work on RISC OS 3.1 (but slowly!)
Added dithering to PNGs with alpha.
Made ModeChange delay action until image is next rendered.
@
text
@d264 1
a264 1
#define PNG_READ_hIST_SUPPORTED
@


1.2
log
@PNG alpha support added, with some hackery to pnglib.
JPEGs told not to render if < 8 pixels wide.
@
text
@d264 1
a264 1
#undef  PNG_READ_hIST_SUPPORTED
@


1.1
log
@First commit to CVS
@
text
@d252 1
a252 1
#undef  PNG_CORRECT_PALETTE_SUPPORTED
@
