head	1.2;
access;
symbols
	ImageLib-0_09:1.2
	ImageLib-0_08:1.2
	ImageLib-0_07:1.2
	ImageLib-0_06:1.2
	ImageLib-0_05:1.2
	ImageLib-0_04:1.2
	ImageLib-0_03:1.2
	ImageLib-0_02:1.2
	ImageLib-0_01:1.2
	dcotton_autobuild_BaseSW:1.2
	ahodgkin_207release:1.2
	ahodgkin_206release:1.2
	ahodgkin_205release:1.2
	ahodgkin_133beta:1.2
	kbracey_126beta:1.2
	kbracey_AW97patch:1.2
	ahodgkin_AW97:1.1;
locks; strict;
comment	@# @;


1.2
date	97.10.21.15.47.44;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	97.07.21.12.24.55;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Stripped down lzw_[de]comp into a lean, mean compressing machine.
Converted it to 11-bit LZW to save memory in compression tables.
Fixed lots of redraw errors in the GIF code.
Stopped PNG code attempting to do alpha processing on RISC OS 3.1 (we
don't have a ColourTrans to supply the inverse table).
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* lzw_comp.h - interface to LZW compressor */

  /* type for procedure provided by user in GIF image case, which
     empties compressed block buffer; when emptier_proc is called:
       outbuff     = pointer to start of block to write
       outbuffsize = bytes in block (up to 256)
       handle      = arbitrary user pointer, given to LZW_compress_start */
typedef void (*emptier_proc)(uint8 *outbuff, int outbuffsize, void *handle);

extern _kernel_oserror* LZW_compress_start(uint8 *buffer, int buffer_size, int hdl);
  /* Begin LZW compression sequence, giving specification of buffer for
       (block of) compression output (this need only be 256 bytes in GIF
       case. */

extern void LZW_compress_next(uint8 *buffer, uint8 *data, int Nbytes, int hdl);
  /* compress next batch of 'Nbytes' bytes, at 'data' */

extern void LZW_compress_flush(int *Nbytes, int hdl, uint8 *buffer);
  /* end compression of current block; returns number of bytes in buffer
     (given to LZW_compress_start) which are ready to be output */

extern void LZW_compress_end(int hdl);
  /* free memory used by compressor; returns compression ratio (as
     percentage) of last compression task */

int LZW_compress_new(void);
/* We want to start compressing a new picture, so grab the memory we need
   and return a handle */
@


1.1
log
@First commit to CVS
@
text
@d24 1
a24 3
extern _kernel_oserror* LZW_compress_start(uint8 *buffer, int buffer_size,
                            char client_id, int data_bits,
                            emptier_proc emptier, void *handle, int hdl);
d27 1
a27 5
       case.
     client_id is 'G' for GIF images, 'T' for TIFF images
     data_bits is nominal bits per data item (2..8)
     emptier is registered function to empty block buffer (NULL for TIFF)
     handle is arbitrary client pointer which will be passed to emptier   */
d36 1
a36 1
extern float LZW_compress_end(int hdl);
@
