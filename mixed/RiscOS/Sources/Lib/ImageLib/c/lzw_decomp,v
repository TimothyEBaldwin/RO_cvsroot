head	1.3;
access;
symbols
	ImageLib-0_09:1.3
	ImageLib-0_08:1.3
	ImageLib-0_07:1.3
	ImageLib-0_06:1.3
	ImageLib-0_05:1.3
	ImageLib-0_04:1.3
	ImageLib-0_03:1.3
	ImageLib-0_02:1.3
	ImageLib-0_01:1.3
	dcotton_autobuild_BaseSW:1.3
	ahodgkin_207release:1.3
	ahodgkin_206release:1.3
	ahodgkin_205release:1.3
	ahodgkin_133beta:1.3
	kbracey_126beta:1.3
	kbracey_AW97patch:1.3
	ahodgkin_AW97:1.2;
locks; strict;
comment	@# @;


1.3
date	97.10.21.15.47.24;	author kbracey;	state Exp;
branches;
next	1.2;

1.2
date	97.09.05.13.17.15;	author rleggett;	state Exp;
branches;
next	1.1;

1.1
date	97.07.21.12.24.37;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Stripped down lzw_[de]comp into a lean, mean compressing machine.
Converted it to 11-bit LZW to save memory in compression tables.
Fixed lots of redraw errors in the GIF code.
Stopped PNG code attempting to do alpha processing on RISC OS 3.1 (we
don't have a ColourTrans to supply the inverse table).
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* lzw_decomp.c -  LZW data decompression; mjs March 93 */

/* Version 2.00:
     handles LZW decompression with enough flexibility to support
     TIFF or GIF images (2..8 bit data in, 3..12 bit codes)

     Not any more!!! KJB... */

/*---------------------------------------------------------------------------------------*/
/* Changes for direct image rendering code :                                             */
/* 00-Jan-97: RML: Got rid of input buffer - data fetched directly instead.              */
/* 00-Jan-97: RML: Commented out some choices between 'G' and 'T' type pictures - type G */
/*                 not needed.                                                           */
/* 10-Mar-97: RML: Made decompress_next take in the value of the buffer (instead of just */
/*                 decompress_start), as this removes problems with flex.                */
/* 04-Sep-97: RML: Made PendingBuff be a flex block.                                     */
/* 20-Oct-97: KJB: Stripped it down into a lean, mean decompressing machine.             */
/*                 Changed to using 11-bit LZW to save memory in the tables.             */
/*---------------------------------------------------------------------------------------*/


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"
#include "flex.h"

//#include "sys.h"
#include "defines.h"
#include "lzw_decomp.h"

  /* depth of input data items; TIFF says 8 */
#define DataInBits 8
#define DataInSize (1 << 8)

  /* max bits of LZW codes; TIFF, GIF say 12 */
#define LZWbits 11
#define TableSize (1<<LZWbits)
#define RestartTableSize (TableSize-3)

  /* special values */
#define EndOfList -1

  /* reserved indices in code table; 0..DataInSize-1 are initial encodings */
#define NumReserved 2
#define ClearCode   (DataInSize)
#define EndOfBlock  (DataInSize+1)
  /* Note: decompressor ignores (code == EndOfBlock), except at end of input
     data, since its output block size is driven by client's wishes */

  /* an entry in code table (int16 types implies LZWbits <= 15) */
typedef struct
{
  int16 parent;     /* index of parent (previous item of coded string) */
  int16 length;     /* length of coded string (no. of data items) */
  uint8 suffix;     /* last data item of coded string */
  uint8 item1;      /* first data item of coded string */
} CodeTableEntry_t; /* this structure differs from the compress version */

/* ------------------------------------------------------------------------ */

static CodeTableEntry_t CodeTable[TableSize];

static int    NextCode;        /* next unused code */
static int    BitsPerCode;     /* current bits-per-code; TIFF,GIF say use
                                  variable code width as table fills */
static int    ExtraBitAt;      /* value of NextCode at which bits-per-code
                                  should next increment */

static uint8  PendingBuff[TableSize]; /* pending decompress buffer */
static uint8  *PendingBuffPtr; /* next byte in buffer */
static int    PendingLeft;     /* number of bytes still to output from last
                                  decompress (pending because client's
                                  receiving buffer filled) */
static uint8  *InBuffer;       /* pointer to fixed input buffer */
static uint8  *InBuffPtr;      /* next available input byte */
static int    InBuffBits;      /* bits not yet used in *InBuffPtr (0..8) */


/* ------------------------------------------------------------------------ */

#ifdef TRACE
static _kernel_oserror* lzwdecomp_error(char *s)
{
  static _kernel_oserror e;

  e.errnum=1;
  sprintf(e.errmess,"Error from decompressor: %s\n",s);
  return &e;
}
#endif


static void initialise_CodeTable(void)
{
  /* set-up bootstrap entries; for the corresponding 1-item 'strings', and
     the reserved codes */

  int c;

/* fprintf(stderr,"lzwd: init code table\n"); */

  NextCode    = DataInSize + NumReserved;
  BitsPerCode = DataInBits + 1;
  ExtraBitAt  = DataInSize*2;

  for (c=0; c<NextCode; c++)
  {
    CodeTable[c].parent = EndOfList;
    CodeTable[c].length = 1;
    if (c < DataInSize)
      CodeTable[c].suffix = CodeTable[c].item1 = c;
  }

}

/* ------------------------------------------------------------------------ */

static uint32 read_next_code(void)
{
  /* handles bit alignment/packing of received codes in buffer; assumes
     code length between 2 and 16 bits (code always spans either 1, 2 or
     3 bytes in buffer) */

  uint32 code, codemask = (1 << BitsPerCode) - 1;
  int    bytes, morebits = BitsPerCode - InBuffBits;

    code = ((uint32)InBuffPtr[0] << 16) | ((uint32)InBuffPtr[1] << 8) |
            (uint32)InBuffPtr[2];
    code = (code >> (InBuffBits + 16 - BitsPerCode)) & codemask;

  if (morebits >= 0)
  {
    bytes =  1 + (morebits >> 3);
    InBuffPtr += bytes;
    InBuffBits = 8 - (morebits &  7);
  }
  else InBuffBits -= BitsPerCode;

  if (InBuffBits == 0)
  {
    InBuffBits = 8;
    InBuffPtr++;
  }

  /* ignore EndOfBlock (except at end of all data) */
  if (code == EndOfBlock)
  {
    //printf("lzwd: EndOfBlock\n");
    if (InBuffBits != 8)
    {
      /* next block starts with new byte */
      InBuffBits = 8;
      InBuffPtr++;
    }
    BitsPerCode = DataInBits + 1; /* bits-per-code restart */
    code = read_next_code(); /* ... should be ClearCode */
  }

/* fprintf(stderr,"lzwd: read code = %4.4x (%2d) (%1d) (%2.2x)\n",
           code,BitsPerCode,InBuffBits,*InBuffPtr); */

  return(code);
}

/* ------------------------------------------------------------------------ */

static void add_table_entry(int suffix, int parent)
{
  /* add new entry with given suffix to <current string> */

  int bump_it;

/* fprintf(stderr,"lzwd: add_table_entry %5d\n",NextCode); */

  CodeTable[NextCode].parent = parent;
  CodeTable[NextCode].suffix = suffix;
  CodeTable[NextCode].item1  = CodeTable[parent].item1;
  CodeTable[NextCode].length = CodeTable[parent].length + 1;

  NextCode++;

    bump_it = (NextCode == ExtraBitAt-1);

  if (bump_it)
  {
/* fprintf(stderr,"lzwd: extra bit (%2d,%4d)\n",BitsPerCode+1,NextCode); */
    BitsPerCode++;
    ExtraBitAt *= 2;
  }
}

/* ------------------------------------------------------------------------ */

static void decompress_code(uint32 code, uint8 **buffptr, int *buff_left)
{
  /* output decompressed code to *buffptr, holding pending output if it
     exceeds buff_left bytes */

  int   cl;
  int   max_out = *buff_left;
  uint8 *ptr, *buffout = *buffptr;

  if ((cl = CodeTable[code].length) > max_out)
  {
    /* spill-over to pending buffer */
    PendingBuffPtr = PendingBuff;
    PendingLeft    = cl - max_out;
/* fprintf(stderr,"lzwd: spill over %1d\n",PendingLeft); */
    for (ptr = PendingBuff + PendingLeft - 1;
         ptr >= PendingBuff;
         code = CodeTable[code].parent)
      *ptr-- = CodeTable[code].suffix;
    cl = max_out;
  }

  /* (remaining) output to client's buffer */
  for (ptr = buffout + cl - 1;
       code != EndOfList;
       code = CodeTable[code].parent)
    *ptr-- = CodeTable[code].suffix;

  *buffptr   = buffout + cl;
  *buff_left = max_out - cl;
}

/* ------------------------------------------------------------------------ */

_kernel_oserror* LZW_decompress_start(uint8 *data)
{
  /* Begin LZW decompression sequence */

  InBuffer = data;

  PendingLeft = 0;

  InBuffPtr   = InBuffer;
  InBuffBits  = 8; /* ie. will be 8 bits in first byte, when filled */

  initialise_CodeTable();
  return NULL;
}

/* ------------------------------------------------------------------------ */


#ifdef TRACE
_kernel_oserror* LZW_decompress_next(uint8 *buffer, int buffer_size, uint8 *indata, int* bytes_out)
#else
_kernel_oserror* LZW_decompress_next(uint8 *buffer, int buffer_size, uint8 *indata)
#endif
{
  /* decompress next batch, writing up to 'buffer_size' output bytes to
     buffer; returns actual number of bytes written (less than buffer_size
     means client infiller procedure has finished supplying decompressor) */

  static int old_code; /* remember across calls */

  uint8  *buffptr = buffer;
  int    Nout_left = buffer_size;
  int    diff;
  uint32 code;

  diff = InBuffPtr - InBuffer;
  InBuffer  = indata;
  InBuffPtr = indata + diff;

  if (PendingLeft)
  {
/* fprintf(stderr,"lzwd: pending output\n"); */
    /* output bytes from pending decompress output*/
    int Nxfer = (Nout_left < PendingLeft) ? Nout_left : PendingLeft;
    memcpy(buffptr,PendingBuffPtr,Nxfer);
    PendingBuffPtr += Nxfer;
    buffptr += Nxfer;
    Nout_left   -= Nxfer;
    PendingLeft -= Nxfer;
  }

  /* output bytes via still unused decompress input */
  while (Nout_left)
  {
    code = read_next_code();
    if (code == EndOfBlock) break;
    if (code == ClearCode)
    {
 //printf("lzwd: ClearCode (%1d)\n",NextCode);
      initialise_CodeTable();
      code = read_next_code();
      if (code == EndOfBlock) break;
      decompress_code(code,&buffptr,&Nout_left);
      old_code = code;
    }
    else
    {
      if (code < NextCode)
      {
        /* code is in table; decompress it */
        decompress_code(code,&buffptr,&Nout_left);
        add_table_entry(CodeTable[code].item1,old_code);
        old_code = code;
      }
      else
      {
        if (code != NextCode) {
          /*char s[255];*/
          #ifdef TRACE
          *bytes_out=buffer_size;
          #endif
          return NULL;

          /*sprintf(s,"bad compressed image (code: %4.4x %4.4x)\n",code,NextCode);
          return lzwdecomp_error(s);*/
        }
        /* put code in table, and decompress it */
        add_table_entry(CodeTable[old_code].item1,old_code);
        old_code = code;
        decompress_code(code = NextCode-1,&buffptr,&Nout_left);
      }
    }
  } /* while */

  #ifdef TRACE
  *bytes_out=(buffer_size - Nout_left);
  #endif

  return NULL;
  //return(buffer_size - Nout_left);
}

/* ------------------------------------------------------------------------ */

void LZW_decompress_end(void)
{
  /* free memory used by LZW decompressor */

  /*flex_free((flex_ptr) &CodeTable);*/
  //free(CodeTable);
  //free(InBuffer);
  /*flex_free((flex_ptr)&PendingBuff);*/

  InBuffer    = NULL;
}

@


1.2
log
@EndLoad now returns a BBox; Corrected flex problems on 3.1 machines; Corrected 16 colour mode bug.
@
text
@d19 3
a21 1
     TIFF or GIF images (2..8 bit data in, 3..12 bit codes) */
d31 2
d47 2
a48 5
static int DataInBits; /* 2..8 */
static int DataInSize; /* = (1 << DataInBits) ; this many codes set at start */

  /* 'T' means TIFF, 'G' means GIF */
static char ClientType;
d51 1
a51 1
#define LZWbits 12
a54 3
  /* the maximum number of bytes which will be requested from client */
#define InBufferSize (16*1024)

a56 2
#define ReservedCode -2
#define NullCode -3
a68 2
  int16 suffix;     /* last data item of coded string */
  int16 item1;      /* first data item of coded string */
d70 2
d76 1
a76 2
  /* to be allocated as CodeTable[TableSize] */
static CodeTableEntry_t *CodeTable = NULL;
d84 2
a85 3
static uint8  *PendingBuff;    /* pointer to pending decompress buffer */
//static uint8  *PendingBuffPtr; /* next byte in buffer */
static int    PendingBuffPtr;  /* next byte in buffer */
a88 1

a90 1
static int    InBytesLeft;     /* input bytes remaining */
a92 4
  /* the client infiller */
static void          *ClientHandle;
static infiller_proc ClientInfiller;
static int           InfillerExhausted;
d96 1
d102 1
a102 1
  sprintf(e.errmess,"Error from compressor: %s\n",s);
d105 1
a126 2
    else
      CodeTable[c].suffix = CodeTable[c].item1 = ReservedCode;
a131 20
#if 0
static void refill_InBuffer(void)
{
  int i;

  if (InfillerExhausted) return;

/* fprintf(stderr,"lzwd: refill_InBuffer\n"); */

  exit(0); /* RML */
  if (InBytesLeft) memcpy(InBuffer,InBuffPtr,InBytesLeft);
  InBuffPtr = InBuffer;

  i = ClientInfiller(InBuffer+InBytesLeft,InBufferSize-InBytesLeft,
                     ClientHandle);
  InBytesLeft += i;
  InfillerExhausted = (i < 2);
}
#endif
/* ------------------------------------------------------------------------ */
a141 14
//  if (InBytesLeft < 4) refill_InBuffer(); /* no partial codes! */

  if (InBytesLeft*8 + InBuffBits < BitsPerCode)
  {
    /* must be end of input data */
    InBytesLeft = 0;
    InBuffBits  = 0;
    InfillerExhausted = 1;
/* fprintf(stderr,"lzwd: input exhausted\n"); */
    return(EndOfBlock);
  }

//  if (ClientType == 'T') /* TIFF */
//  {
a144 7
//  }
//  else /* ClientType == 'G' (GIF) */
//  {
//    code = ((uint32)InBuffPtr[2] << 16) | ((uint32)InBuffPtr[1] << 8) |
//            (uint32)InBuffPtr[0];
//    code = (code >> (8 - InBuffBits)) & codemask;
//  }
a149 1
    InBytesLeft -= bytes;
a157 1
    InBytesLeft--;
a167 1
      InBytesLeft--;
a196 1
//  if (ClientType == 'T')
a197 2
//  else /* ClientType == 'G' */
//    bump_it = ((NextCode == ExtraBitAt) && (ExtraBitAt < TableSize));
d214 2
a215 1
  int   cl, max_out = *buff_left;
d221 1
a221 1
    PendingBuffPtr = 0; //PendingBuff;
d243 1
a243 2
_kernel_oserror* LZW_decompress_start(infiller_proc infiller, char client_id,
                          int data_bits, void *handle, uint8 *data)
d245 1
a245 15
  /* Begin LZW decompression sequence, registering infiller function provided
       by client which will, on request, provide a batch of bytes to be
       decompressed.
     client_id is 'G' for GIF images, 'T' for TIFF images
     data_bits is nominal bits per decoded data item (2..8)
     handle is arbitrary client pointer which will be passed to infiller */

  ClientType = client_id;
  DataInBits = data_bits;
  DataInSize = (1 << DataInBits);

  //CodeTable = malloc(TableSize*sizeof(CodeTableEntry_t));
  //if (!CodeTable) return lzwdecomp_error("Not enough memory for code table.");
  if (!flex_alloc((flex_ptr) &CodeTable, TableSize*sizeof(CodeTableEntry_t)))
     return lzwdecomp_error("Not enough memory for code table.");
a246 1
  //InBuffer = malloc(InBufferSize + 4);
a247 4
  
  if (!flex_alloc((flex_ptr)&PendingBuff, TableSize))
    return lzwdecomp_error("Not enough memory for decompressor.");
  //PendingBuff = malloc(TableSize);
d249 1
a249 2
  if ((CodeTable == NULL) || (InBuffer == NULL) || (PendingBuff == NULL))
    return lzwdecomp_error("Not enough memory for decompressor.");
a251 2
  //InBytesLeft = 0;
  InBytesLeft = 9999999; /* RML: arbitary figure to ensure that buffer never empty */
a253 7
  PendingBuffPtr = 0; //PendingBuff;
  PendingLeft    = 0;

  ClientInfiller    = infiller;
  ClientHandle      = handle;
  InfillerExhausted = 0;

d260 2
d263 3
d274 1
a274 1
  int    Nxfer, Nout_left = buffer_size;
d286 2
a287 3
    Nxfer = (Nout_left < PendingLeft) ? Nout_left : PendingLeft;
    //memcpy(buffptr,PendingBuffPtr,Nxfer);
    memcpy(buffptr,PendingBuff + PendingBuffPtr,Nxfer);
d320 2
a321 1
          char s[255];
d323 1
d326 2
a327 2
          sprintf(s,"bad compressed image (code: %4.4x %4.4x)\n",code,NextCode);
          return lzwdecomp_error(s);
d337 1
d339 1
d351 1
a351 1
  flex_free((flex_ptr) &CodeTable);
d354 1
a354 2
  //free(PendingBuff);
  flex_free((flex_ptr)&PendingBuff);
a355 1
  CodeTable   = NULL;
a356 1
  PendingBuff = NULL;
@


1.1
log
@First commit to CVS
@
text
@d28 1
d90 2
a91 1
static uint8  *PendingBuffPtr; /* next byte in buffer */
d279 1
a279 1
    PendingBuffPtr = PendingBuff;
d315 4
a318 4
  CodeTable = malloc(TableSize*sizeof(CodeTableEntry_t));
  if (!CodeTable) return lzwdecomp_error("Not enough memory for code table.");
  //if (!flex_alloc((flex_ptr) &CodeTable, TableSize*sizeof(CodeTableEntry_t)))
  //   return lzwdecomp_error("Not enough memory for code table.");
d322 4
a325 1
  PendingBuff = malloc(TableSize);
d335 1
a335 1
  PendingBuffPtr = PendingBuff;
d370 2
a371 1
    memcpy(buffptr,PendingBuffPtr,Nxfer);
d431 2
a432 2
  //flex_free((flex_ptr) &CodeTable);
  free(CodeTable);
d434 2
a435 1
  free(PendingBuff);
@
