head	1.9;
access;
symbols
	ImageLib-0_09:1.9
	ImageLib-0_08:1.9
	ImageLib-0_07:1.9
	ImageLib-0_06:1.9
	ImageLib-0_05:1.9
	ImageLib-0_04:1.9
	ImageLib-0_03:1.9
	ImageLib-0_02:1.9
	ImageLib-0_01:1.9
	dcotton_autobuild_BaseSW:1.9
	ahodgkin_207release:1.9
	ahodgkin_206release:1.9
	ahodgkin_205release:1.9
	ahodgkin_133beta:1.9
	kbracey_126beta:1.6
	kbracey_AW97patch:1.5
	ahodgkin_AW97:1.5;
locks; strict;
comment	@# @;


1.9
date	97.11.27.12.35.42;	author kbracey;	state Exp;
branches;
next	1.8;

1.8
date	97.11.25.10.22.37;	author kbracey;	state Exp;
branches;
next	1.7;

1.7
date	97.11.06.18.00.47;	author kbracey;	state Exp;
branches;
next	1.6;

1.6
date	97.10.27.18.14.27;	author kbracey;	state Exp;
branches;
next	1.5;

1.5
date	97.10.14.17.45.46;	author kbracey;	state Exp;
branches;
next	1.4;

1.4
date	97.10.14.13.45.49;	author kbracey;	state Exp;
branches;
next	1.3;

1.3
date	97.09.12.13.20.31;	author rleggett;	state Exp;
branches;
next	1.2;

1.2
date	97.09.05.13.17.01;	author rleggett;	state Exp;
branches;
next	1.1;

1.1
date	97.07.21.12.24.30;	author blaughto;	state Exp;
branches;
next	;


desc
@@


1.9
log
@1-pixel high backgrounds occasionally got scrambled
@
text
@/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*------------------------------------------------------------------------------------------------------*/
/* File:    c.gif                                                                                       */
/* Purpose: GIF image library component                                                                 */
/*          Makes use of direct to screen plotting, rather than interval sprite                         */
/* Author:  Richard Leggett                                                                             */
/* History: 04-Feb-97: RML: Created                                                                     */
/*          17-Mar-97: RML: Minor modifications.							*/
/*          24-Mar-97: RML: Improved error handling							*/
/*          06-May-97: RML: Modified Render routine to take an x and y size to scale to, instead of a   */
/*                          percentage.                                                                 */
/*------------------------------------------------------------------------------------------------------*/

#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include "swis.h"
#include "defines.h"
#include "imagetrans.h"
#include "internal.h"
#include "sprite.h"
#include "datastruct.h"
#include "gif.h"
#include "gif_stream.h"
#include "render.h"
#include "rml_misc.h"

static _kernel_oserror *LoadGIF(Image *this, const char *data, int len, BBox *changed);
static _kernel_oserror *EndLoad(Image *this, BBox *changed);
static _kernel_oserror *Render(Image *this, int x, int y, int scale, int x_size, int y_size);
static _kernel_oserror *DumpToCache(Image *this, const char *filename, int *justuseorig);
static _kernel_oserror *LoadFromCache(Image *this, const char *filename);
static _kernel_oserror *ModeChange(Image *this);
static _kernel_oserror *StartExportGIF(Image *this, int *size);
static _kernel_oserror *ExportGIF(Image *this, char *buffer, int *len);
static _kernel_oserror *EndExportGIF(Image *this);
static _kernel_oserror *BGColGIF(Image *this, int *bgcol, int dontoverride);
static _kernel_oserror *Delete(Image *this);
static _kernel_oserror *GIFNeedRedraw(Image *this, int* need, BBox *changed);
static _kernel_oserror *GIFRegisterFiller(Image *this, FillerFunction *fill_fn,
                                          void* handle1, int* handle2);

static void gifstream_report_error(_kernel_oserror *e)
{
    if (e)
    {
        debug_error(e->errmess);
#if ReportErrorsToScreen
        _swi(OS_WriteC,_IN(0),7);
        _swi(OS_WriteC,_IN(0),4);
        _swi(OS_WriteC,_IN(0),26);
        printf("%d, %s                \n", e->errnum, e->errmess);
        //_swi(OS_ReadC,0);
        //exit(0);
#endif
    }
}


int NewGIF(Image *im)
{
    _kernel_oserror *e;
    int              gifhandle;

    debug_print("\nGIF, NewGIF");

    /* Setup a few variables */
    im->Load           = LoadGIF;
    im->DumpSprite     = SaveSpriteGIF;
    im->EndLoad        = EndLoad;
    im->Delete         = Delete;
    im->Render         = Render;
    /*im->ModeChange     = ModeChange;*/
    im->LoadFromCache  = LoadFromCache;
    im->DumpToCache    = DumpToCache;
    im->StartExport    = StartExportGIF;
    im->Export         = ExportGIF;
    im->EndExport      = EndExportGIF;
    im->BGCol          = BGColGIF;
    im->NeedRedraw     = GIFNeedRedraw;
    im->RegisterFiller = GIFRegisterFiller;

    /* Reset width, height etc. so we know where we are */
    im->width = im->height = im->width_os = im->height_os = -1;
    im->mutable_mask = 0;
    im->animated = 0;

    /* Call 'gifstream' begin routine */
    e=gifstream_begin(&gifhandle, im->flags);
    debug_value("  gifhandle ",gifhandle);

    /* If an error occurred, report it, then set flags to indicate this is an invalid structure */
    if (e)
    {
        gifstream_report_error(e);
        im->flags=-1;
        return 0;
    }

    /* Put the handle for the image in the flags field */
    im->flags=gifhandle;

    return 0;
}


_kernel_oserror *LoadGIF(Image *this, const char *data, int len, BBox *changed)
{
    _kernel_oserror *e;
    int              gif_handle=this->flags;
    int              return_width, return_height, return_mask, return_anim;

    debug_value("\nGIF, LoadGIF ",gif_handle);

    /* If flags are -1, then structure is invalid - do nothing */
    if (this->flags==-1) return NULL;

    /* Tell 'gifstream' that we've loaded a bit of data */
    e=gifstream_load(gif_handle, (char*)data, len, changed, &return_width,
                     &return_height, &return_mask, &return_anim);
    this->animated = return_anim;

    if (e)
    {
        gifstream_report_error(e);
        this->flags=-1;
        return e;
    }

    /* Set the mutable maks according to the returned value */
    this->mutable_mask = return_mask;

    /* If returned width and height are not -1, then they have been read from the GIF file */
    if ((this->width==-1) && (return_width>-1))
    {
        this->width =return_width;
        this->height=return_height;
        if (this->width_os==-1)  this->width_os = this->width *2;
        if (this->height_os==-1) this->height_os = this->height *2;
    }

    debug_value("GIF, End LoadGIF ",gif_handle);

    return NULL;
}


_kernel_oserror *EndLoad(Image *this, BBox *changed)
{
    _kernel_oserror *e;
    int              gif_handle=this->flags;

    debug_value("\nGIF, EndLoad ",gif_handle);

    /* Check if the structure is invalid */
    if (this->flags==-1) return NULL;

    /* Call the end load routine */
    e=gifstream_end(gif_handle);

    if (e)
    {
        gifstream_report_error(e);
        this->flags=-1;
        return e;
    }

    changed->xmin = 0;
    changed->xmax = this->width_os;
    changed->ymin = 0;
    changed->ymax = 8;

    debug_value("GIF, End EndLoad ",gif_handle);
    return NULL;
}


_kernel_oserror *Render(Image *this, int x, int y, int scale, int x_size, int y_size)
{
    _kernel_oserror *e;
    int              gif_handle=this->flags;
    scale_factor     s;
    int              xos, yos;

    debug_value("\nGIF, Render ",gif_handle);

    /* Check if structure is invalid */
    if (this->flags==-1) return NULL;

    if (this->modechanged)
    {
        e = ModeChange(this);
        if (e) return e;
        this->modechanged = 0;
    }

    /* Read scaling pixels -> OS Units */
    xos = 1 << _swi(OS_ReadModeVariable,_IN(0)|_IN(1)|_RETURN(2),-1,4);
    yos = 1 << _swi(OS_ReadModeVariable,_IN(0)|_IN(1)|_RETURN(2),-1,5);

    /* By default, scale is specfied by 'scale' variable */
    //s.x_mul = scale * 2;
    //s.x_div = 100 * xos;
    //s.y_mul = scale * 2;
    //s.y_div = 100 * yos;

    /* If specified, scale so that image is x_size wide and y_size high */
    if ((x_size>0) && (y_size>0))
    {
        s.x_mul = x_size;
        s.y_mul = y_size;
        s.x_div = this->width*xos;
        s.y_div = this->height*yos;
    }

    /* if defined by host application, scale is specified by width_os and height_os */
    else //if ((this->width_os>0) && (this->width_os != this->width*xos))
    {
        s.x_mul = this->width_os;
        s.y_mul = this->height_os;
        s.x_div = this->width * xos;
        s.y_div = this->height * yos;

        if (scale != 100)
        {
            s.x_mul *= scale;
            s.x_div *= 100;
            s.y_mul *= scale;
            s.y_div *= 100;
        }
    }

    /* Plot the image */
    e=gifstream_plot(gif_handle, x, y, s);
    if (e)
    {
        gifstream_report_error(e);
        this->flags=-1;
        return e;
    }

    debug_value("GIF, End Render ",gif_handle);
    return NULL;
}


_kernel_oserror *SaveSpriteGIF(Image *this, const char *filename, int maxbpp)
{
    int gif_handle=this->flags;

    maxbpp=maxbpp;
    gifstream_export_sprite(gif_handle, (char*)filename);

    return 0;
}


_kernel_oserror *DumpToCache(Image *this, const char *filename, int *justuseorig)
{
    int gif_handle=this->flags;

    gif_handle=gif_handle;
    filename=filename;
    justuseorig=justuseorig;

    return 0;
}


_kernel_oserror *LoadFromCache(Image *this, const char *filename)
{
    int gif_handle=this->flags;

    gif_handle=gif_handle;
    filename=filename;

    return 0;
}


_kernel_oserror *ModeChange(Image *this)
{
    _kernel_oserror *e=0;
    int              gif_handle=this->flags;

    debug_value("\nGIF, ModeChange ",gif_handle);

    /* Check this image is valid */
    if (this->flags==-1) return NULL;

    /* Call the appropriate routine */
    e=gifstream_mode_change(gif_handle);
    if (e)
    {
        gifstream_report_error(e);
        this->flags=-1;
        return e;
    }

    debug_value("GIF, End ModeChange ",gif_handle);

    return e;
}


_kernel_oserror *StartExportGIF(Image *this, int *size)
{
    int gif_handle=this->flags;

    gif_handle=gif_handle;
    size=size;

    return 0;
}


_kernel_oserror *ExportGIF(Image *this, char *buffer, int *len)
{
    int gif_handle=this->flags;

    gif_handle=gif_handle;
    buffer=buffer;
    len=len;

    return 0;
}


_kernel_oserror *EndExportGIF(Image *this)
{
    int gif_handle=this->flags;

    gif_handle=gif_handle;

    return 0;
}


_kernel_oserror *BGColGIF(Image *this, int *bgcol, int dontoverride)
{
    int gif_handle=this->flags;
    int *newarea, copy_row = 0;
    void *mode;
    unsigned int log2bpp, size, r1, r2, r3, nw, nh;
    _kernel_oserror *e;
    Spriteloaddata *l;
    scale_factor scale;

    l = (Spriteloaddata *)malloc(sizeof *l);
    if (!l)
        return NULL;

    /*
     * Right, this is obviously a background image, so lets munge it into
     * a sprite of the current mode and palette!
     */
    _swix(OS_Byte, _IN(0)|_OUT(2), 135, &mode);
    log2bpp=_swi(OS_ReadModeVariable, _INR(0,1)|_RETURN(2), mode, 9);

    scale.x_mul = 2;
    scale.x_div = 1 << _swi(OS_ReadModeVariable, _INR(0,1)|_RETURN(2), mode, 4);
    scale.y_mul = 2;
    scale.y_div = 1 << _swi(OS_ReadModeVariable, _INR(0,1)|_RETURN(2), mode, 5);

    nw=this->width * scale.x_mul / scale.x_div;
    nh=this->height * scale.y_mul / scale.y_div;
    if (nw == 0) nw=1;
    if (nh == 0) nh=1;

    /* SpriteExtend bodge */
    if (nh==1) {
      nh=8;
      this->height*=8;
      this->height_os*=8;
      copy_row=1;
    }

    size = SpriteAreaSize(mode, nw, nh);
    if (log2bpp <= 3)
        /* Add the palette... */
        size += 8 << (1 << log2bpp);

    newarea = malloc(size);
    if (!newarea)
        return NULL;

    newarea[0] = size;
    newarea[2] = 16;
    /* Initialise sprite area */
    _swix(OS_SpriteOp, _INR(0,1), 256+SprInitArea, newarea);

    /* Create sprite */
    e=_swix(OS_SpriteOp, _INR(0,6), 256+SprCreateSprite, newarea, "sprite",
                                    0, nw, nh, mode);

    /* Add the palette */
    if (!e && log2bpp <= 3)
    {
        void *palette;
        e=_swix(OS_SpriteOp, _INR(0,3), 256+SprAddPalette, newarea, "sprite", (1U<<31)+1);
        if (!e)
            e=_swix(OS_SpriteOp, _INR(0,3)|_OUT(4), 256+SprAddPalette, newarea, "sprite", -1, &palette);
        if (!e)
            e=_swix(ColourTrans_ReadPalette, _INR(0,4), -1, -1, palette, 8<<(1<<log2bpp), 2);
    }
    if (e)
    {
        free(newarea);
        return NULL;
    }

    /* Switch output to it */
    e=_swix(OS_SpriteOp, _INR(0,3)|_OUTR(1,3), 256+SprSwitchVdu, newarea, "sprite", 0,
                                               &r1, &r2, &r3);
    if (e)
    {
        free(newarea);
        return NULL;
    }

    /* Set background colour */
    _swix(ColourTrans_SetGCOL, _IN(0)|_INR(3,4), *bgcol, 128, 0);
    /* CLG */
    _swix(OS_WriteI+16, 0);

    //this->RegisterFiller(this, bgfiller, this, (int *) &bg);

    /* Plot the image */
    this->Render(this, 0, 0, 100, -1, -1);

    /* Unswitch output */
    _swix(OS_SpriteOp, _INR(0,3), 256+SprSwitchVdu, r1, r2, r3);

    /* If it was a one row GIF, copy the one row to the other seven. */
    if (copy_row)
    {
      int          *sprite_area;
      int          *sprite_header;
      char         *sprite_data;
      int           n, sw, widthinwords;

      widthinwords = ((this->width << log2bpp) + 31) / 32;

      sw = widthinwords * 4;

      sprite_area   = (int*) newarea;
      sprite_header = (int*) ((char*)sprite_area + sprite_area[2]);
      sprite_data   = (char*) ((char*)sprite_header + sprite_header[8]);

      for (n=0; n<7; n++) memcpy(sprite_data + (n*sw), sprite_data + (7*sw), sw);
    }

    BGCol(newarea, bgcol);

    if (flex_alloc((flex_ptr) &this->private_data2, size) == 0)
    {
        free(newarea);
        return NULL;
    }

    gifstream_delete(gif_handle);

    memcpy(this->private_data2, newarea, size);
    free(newarea);

    this->DumpSprite=SpriteDumpSprite;
    this->Render=RenderSprite;
    this->DumpToCache=DumpToCacheSprite;
    this->StartExport=StartExportSprite;
    this->Export=Export;
    this->EndExport=EndExport;
    this->Delete=DeleteSprite;
    this->private_data=l;
    this->transparent=0;
    this->mutable_mask=0;
    this->width=nw;
    this->height=nh;
    this->NeedRedraw=0;
    this->RegisterFiller=0;

    l->memory=size;
    l->xeig=_swi(OS_ReadModeVariable, _INR(0,1)|_RETURN(2), mode, 4);
    l->yeig=_swi(OS_ReadModeVariable, _INR(0,1)|_RETURN(2), mode, 5);
    l->bpp =_swi(OS_ReadModeVariable, _INR(0,1)|_RETURN(2), mode, 9);
    {
        int *pal;
        _swi(OS_SpriteOp, _INR(0,3)|_OUTR(3,4), 256+37, this->private_data2, "sprite", -1, &l->palsize, &pal);
        if (pal)
            l->paloffset = pal - this->private_data2;
        else
            l->paloffset = 0;
    }
    this->table = 0;
    this->factors[0]=this->factors[1]=this->factors[2]=this->factors[3]=1;
    strcpy(l->name, "sprite");
    return NULL;
}


_kernel_oserror *Delete(Image *this)
{
    _kernel_oserror *e;
    int              gif_handle=this->flags;

    debug_value("\nGIF, Delete ",gif_handle);

    /* Check it's a valid image */
    if (this->flags==-1) return NULL;

    /* Delete the image */
    e=gifstream_delete(gif_handle);
    if (e)
    {
        gifstream_report_error(e);
        this->flags=-1;
        return e;
    }

    /* Free the memory for this data structure */
    free(this);
    this = 0;

    debug_value("GIF, End Delete ",gif_handle);

    return 0;
}


_kernel_oserror *GIFNeedRedraw(Image *this, int *redraw, BBox *changed)
{
    *redraw = gifstream_need_redraw(this->flags, changed);
    return NULL;
}


_kernel_oserror* GIFRegisterFiller(Image *this, FillerFunction *fill_fn, void* handle1, int* handle2)
{
    gifstream_register_filler(this->flags, fill_fn, handle1, handle2);

    return NULL;
}

@


1.8
log
@One pixel high background PNGs and GIFs fixed (again).
@
text
@d453 1
a453 1
      int           n, sw, bpp, widthinbytes;
d455 1
a455 1
      bpp = 1<< log2bpp;
d457 1
a457 4
      widthinbytes = (this->width * bpp) / 8;
      if (this->width % bpp) widthinbytes++;

      sw = (widthinbytes+3)&~3;
@


1.7
log
@More optimisations - in particular background GIFs are now converted into
the current mode and palette.
Sprite plotter (used for backgrounds) sped up.
Background chunk now read correctly and gamma corrected in PNGs (for
sprite output and use as page backgrounds).
Support for PNG pHYS chunk added.
<8bpp greyscale PNGs where no gamma correction was done didn't work.
@
text
@d355 1
a355 1
    int *newarea;
d380 10
d446 22
@


1.6
log
@Rendering in filler functions in non-EX1 EY1 modes should now work.
PNG background images with alpha now handled properly.
@
text
@d33 2
d48 2
a49 2
static _kernel_oserror *Export(Image *this, char *buffer, int *len);
static _kernel_oserror *EndExport(Image *this);
d90 2
a91 2
    im->Export         = Export;
    im->EndExport      = EndExport;
d215 4
a218 4
    s.x_mul = scale * 2;
    s.x_div = 100 * xos;
    s.y_mul = scale * 2;
    s.y_div = 100 * yos;
d230 1
a230 1
    else if ((this->width_os>0) && (this->width_os != this->width*xos))
d236 8
d330 1
a330 1
_kernel_oserror *Export(Image *this, char *buffer, int *len)
d342 1
a342 1
_kernel_oserror *EndExport(Image *this)
d355 73
d429 52
a480 1
    return gifstream_background_colour(gif_handle, bgcol);
@


1.5
log
@Implemented background colour determination for JPEGs and GIFs.
Made basic BGCol routine work on 16 and 32 bpp sprites.
@
text
@d48 1
a48 1
static _kernel_oserror *BGColGIF(Image *this, int *bgcol);
a53 2
static int xos, yos;

a77 4
    /* Read scaling, pixels -> OS units */
    xos = 1 << _swi(OS_ReadModeVariable,_IN(0)|_IN(1)|_RETURN(2),-1,4);
    yos = 1 << _swi(OS_ReadModeVariable,_IN(0)|_IN(1)|_RETURN(2),-1,5);

d194 1
d208 4
a290 4
    /* Read scaling pixels -> OS Units */
    xos = 1 << _swi(OS_ReadModeVariable,_IN(0)|_IN(1)|_RETURN(2),-1,4);
    yos = 1 << _swi(OS_ReadModeVariable,_IN(0)|_IN(1)|_RETURN(2),-1,5);

d342 1
a342 1
_kernel_oserror *BGColGIF(Image *this, int *bgcol)
@


1.4
log
@Made RGB PNGs work on RISC OS 3.1 (but slowly!)
Added dithering to PNGs with alpha.
Made ModeChange delay action until image is next rendered.
@
text
@d351 1
a351 4
    gif_handle=gif_handle;
    *bgcol = -2;

    return NULL;
@


1.3
log
@DumpSprite for GIFs now implemented
@
text
@d61 1
a61 1
#if ReportErrorsToScreen        
d90 1
a90 1
    im->ModeChange     = ModeChange;
d108 1
a108 1
   
d202 1
a202 1
    
d206 7
d289 1
a289 1
 
d295 1
a295 1
    
d380 1
a380 1
    
d397 1
a397 1
   
@


1.2
log
@EndLoad now returns a BBox; Corrected flex problems on 3.1 machines; Corrected 16 colour mode bug.
@
text
@a247 1
    gif_handle=gif_handle;
d249 1
a249 1
    filename=filename;
@


1.1
log
@First commit to CVS
@
text
@d40 1
a40 1
static _kernel_oserror *EndLoad(Image *this);
d65 1
a65 1
        printf("%d, %s\n", e->errnum, e->errmess);
d165 1
a165 1
_kernel_oserror *EndLoad(Image *this)
d177 1
d185 5
a190 1
   
a239 1

d283 1
a283 1

d292 1
a292 1
    
d374 1
a374 1

a382 2
    //BBox changed;

@
