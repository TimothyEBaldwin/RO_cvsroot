head	1.2;
access;
symbols
	zlib-1_18:1.1.1.2
	zlib-1_17:1.1.1.2
	zlib-1_16:1.1.1.2
	zlib-1_15:1.1.1.2
	zlib-1_14:1.1.1.2
	dellis_autobuild_BaseSW:1.1.1.2
	dcotton_autobuild_BaseSW:1.1.1.2
	zlib-1_13:1.1.1.2
	zlib_1_1_3:1.1.1.2
	ahodgkin_207release:1.1.1.1
	nicke_Zlib_24-9-98:1.1.1.1
	ahodgkin_204release:1.1.1.1
	zlib_1_1_2:1.1.1.1
	zlib:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2012.02.04.21.01.56;	author jlee;	state dead;
branches;
next	1.1;
commitid	B097BkcmarS2OSRv;

1.1
date	98.03.30.12.02.01;	author kbracey;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.30.12.02.01;	author kbracey;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.05.19.11.31.19;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Update to zlib 1.2.5, plus modifications
Detail:
  zlib 1.2.5 update:
  - README, c/*, h/* - Updated to zlib 1.2.5
  - algorithm - Deleted; updated doc now in 'doc' folder
  - doc/* - Added docs for zlib 1.2.5
  Changes compared to the official zlib distribution:
  - h/zutil - Use OS_CODE of 0x0d for RISC OS, as decreed by rfc1952
  - c/gzlib, c/gzread, c/gzwrite, h/zconf, h/zlib - Reintroduced ability to use ISO file access functions instead of POSIX ones, to allow the library to be easily used with Norcroft. Added gzgetheader() and gzputheader() functions to allow easy read/write of gzip file headers via the gzip file interface
  Other changes:
  - Makefile - Makefile rewritten. Now supports building of two components: zlib for the main zlib libraries (in application, module and utility/relocatable forms), and zlibmodlib, a library that wraps the ZLib module SWIs to provide a drop-in replacement for static linking against zlib (only builds application & module configs)
  - c/modlib - Main zlibmodlib source
Admin:
  Main deflate/inflate code tested somewhat
  gzip code modifications and zlibmodlib currently untested


Version 1.19. Tagged as 'zlib-1_19'
@
text
@/* maketree.c -- make inffixed.h table for decoding fixed codes
 * Copyright (C) 1998 Mark Adler
 * For conditions of distribution and use, see copyright notice in zlib.h 
 */

/* WARNING: this file should *not* be used by applications. It is
   part of the implementation of the compression library and is
   subject to change. Applications should only use zlib.h.
 */

/* This program is included in the distribution for completeness.
   You do not need to compile or run this program since inffixed.h
   is already included in the distribution.  To use this program
   you need to compile zlib with BUILDFIXED defined and then compile
   and link this program with the zlib library.  Then the output of
   this program can be piped to inffixed.h. */

#include <stdio.h>
#include <stdlib.h>
#include "zutil.h"
#include "inftrees.h"

/* simplify the use of the inflate_huft type with some defines */
#define exop word.what.Exop
#define bits word.what.Bits

/* showtree is only used for debugging purposes */
void showtree(uInt b, inflate_huft *t, int d)
{
  int i, e;
  char p[2*d+1];

  for (i = 0; i < 2*d; i++)
    p[i] = ' ';
  p[i] = 0;
  printf("%s[%d]\n", p, 1<<b);
  for (i = 0; i < (1<<b); i++)
  {
    e = t[i].exop;
    if (e == 0)                 /* simple code */
      printf("%s%d(%d): literal=%d\n", p, i, t[i].bits, t[i].base);
    else if (e & 16)            /* length */
      printf("%s%d(%d): length/distance=%d+(%d)\n",
                p, i, t[i].bits, t[i].base, e & 15);
    else if ((e & 64) == 0)     /* next table */
    {
      printf("%s%d(%d): *sub table*\n", p, i, t[i].bits);
      showtree(e, t + t[i].base, d + 1);
    }
    else if (e & 32)            /* end of block */
      printf("%s%d(%d): end of block\n", p, i, t[i].bits);
    else                        /* bad code */
      printf("%s%d: bad code\n", p, i);
  }
}

/* generate initialization table for an inflate_huft structure array */
void maketree(uInt b, inflate_huft *t)
{
  int i, e;

  i = 0;
  while (1)
  {
    e = t[i].exop;
    if (e && (e & (16+64)) == 0)        /* table pointer */
    {
      fprintf(stderr, "maketree: cannot initialize sub-tables!\n");
      exit(1);
    }
    if (i % 5 == 0)
      printf("\n   ");
    printf(" {{%u,%u},%u}", t[i].exop, t[i].bits, t[i].base);
    if (++i == (1<<b))
      break;
    putchar(',');
  }
  puts("");
}

/* create the fixed tables in C initialization syntax */
void main(void)
{
  int r;
  uInt bl, bd;
  inflate_huft *tl, *td;
  z_stream z;

  z.zalloc = zcalloc;
  z.opaque = (voidpf)0;
  z.zfree = zcfree;
  r = inflate_trees_fixed(&bl, &bd, &tl, &td, &z);
  if (r)
  {
    fprintf(stderr, "inflate_trees_fixed error %d\n", r);
    return;
  }
  /* puts("Literal/Length Tree:");
     showtree(bl, tl, 1);
     puts("Distance Tree:");
     showtree(bd, td, 1); */
  puts("/* inffixed.h -- table for decoding fixed codes");
  puts(" * Generated automatically by the maketree.c program");
  puts(" */");
  puts("");
  puts("/* WARNING: this file should *not* be used by applications. It is");
  puts("   part of the implementation of the compression library and is");
  puts("   subject to change. Applications should only use zlib.h.");
  puts(" */");
  puts("");
  printf("local uInt fixed_bl = %d;\n", bl);
  printf("local uInt fixed_bd = %d;\n", bd);
  printf("local inflate_huft fixed_tl[] = {");
  maketree(bl, tl);
  puts("  };");
  printf("local inflate_huft fixed_td[] = {");
  maketree(bd, td);
  puts("  };");
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Imported zlib-1.1.2
@
text
@@


1.1.1.2
log
@Imported zlib-1.1.3
@
text
@d27 30
d71 1
a71 1
    if (i % 4 == 0)
d73 1
a73 1
    printf(" {{{%u,%u}},%u}", t[i].exop, t[i].bits, t[i].base);
d98 4
@
