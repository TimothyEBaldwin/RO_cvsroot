head	1.2;
access;
symbols
	zlib-1_18:1.1.1.1
	zlib-1_17:1.1.1.1
	zlib-1_16:1.1.1.1
	zlib-1_15:1.1.1.1
	zlib-1_14:1.1.1.1
	dellis_autobuild_BaseSW:1.1.1.1
	dcotton_autobuild_BaseSW:1.1.1.1
	zlib-1_13:1.1.1.1
	zlib_1_1_3:1.1.1.1
	ahodgkin_207release:1.1.1.1
	nicke_Zlib_24-9-98:1.1.1.1
	ahodgkin_204release:1.1.1.1
	zlib_1_1_2:1.1.1.1
	zlib:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2012.02.04.21.01.56;	author jlee;	state dead;
branches;
next	1.1;
commitid	B097BkcmarS2OSRv;

1.1
date	98.03.30.12.02.01;	author kbracey;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.03.30.12.02.01;	author kbracey;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Update to zlib 1.2.5, plus modifications
Detail:
  zlib 1.2.5 update:
  - README, c/*, h/* - Updated to zlib 1.2.5
  - algorithm - Deleted; updated doc now in 'doc' folder
  - doc/* - Added docs for zlib 1.2.5
  Changes compared to the official zlib distribution:
  - h/zutil - Use OS_CODE of 0x0d for RISC OS, as decreed by rfc1952
  - c/gzlib, c/gzread, c/gzwrite, h/zconf, h/zlib - Reintroduced ability to use ISO file access functions instead of POSIX ones, to allow the library to be easily used with Norcroft. Added gzgetheader() and gzputheader() functions to allow easy read/write of gzip file headers via the gzip file interface
  Other changes:
  - Makefile - Makefile rewritten. Now supports building of two components: zlib for the main zlib libraries (in application, module and utility/relocatable forms), and zlibmodlib, a library that wraps the ZLib module SWIs to provide a drop-in replacement for static linking against zlib (only builds application & module configs)
  - c/modlib - Main zlibmodlib source
Admin:
  Main deflate/inflate code tested somewhat
  gzip code modifications and zlibmodlib currently untested


Version 1.19. Tagged as 'zlib-1_19'
@
text
@/* inflate_util.c -- data and routines common to blocks and codes
 * Copyright (C) 1995-1998 Mark Adler
 * For conditions of distribution and use, see copyright notice in zlib.h 
 */

#include "zutil.h"
#include "infblock.h"
#include "inftrees.h"
#include "infcodes.h"
#include "infutil.h"

struct inflate_codes_state {int dummy;}; /* for buggy compilers */

/* And'ing with mask[n] masks the lower n bits */
uInt inflate_mask[17] = {
    0x0000,
    0x0001, 0x0003, 0x0007, 0x000f, 0x001f, 0x003f, 0x007f, 0x00ff,
    0x01ff, 0x03ff, 0x07ff, 0x0fff, 0x1fff, 0x3fff, 0x7fff, 0xffff
};


/* copy as much as possible from the sliding window to the output area */
int inflate_flush(s, z, r)
inflate_blocks_statef *s;
z_streamp z;
int r;
{
  uInt n;
  Bytef *p;
  Bytef *q;

  /* local copies of source and destination pointers */
  p = z->next_out;
  q = s->read;

  /* compute number of bytes to copy as far as end of window */
  n = (uInt)((q <= s->write ? s->write : s->end) - q);
  if (n > z->avail_out) n = z->avail_out;
  if (n && r == Z_BUF_ERROR) r = Z_OK;

  /* update counters */
  z->avail_out -= n;
  z->total_out += n;

  /* update check information */
  if (s->checkfn != Z_NULL)
    z->adler = s->check = (*s->checkfn)(s->check, q, n);

  /* copy as far as end of window */
  zmemcpy(p, q, n);
  p += n;
  q += n;

  /* see if more to copy at beginning of window */
  if (q == s->end)
  {
    /* wrap pointers */
    q = s->window;
    if (s->write == s->end)
      s->write = s->window;

    /* compute bytes to copy */
    n = (uInt)(s->write - q);
    if (n > z->avail_out) n = z->avail_out;
    if (n && r == Z_BUF_ERROR) r = Z_OK;

    /* update counters */
    z->avail_out -= n;
    z->total_out += n;

    /* update check information */
    if (s->checkfn != Z_NULL)
      z->adler = s->check = (*s->checkfn)(s->check, q, n);

    /* copy */
    zmemcpy(p, q, n);
    p += n;
    q += n;
  }

  /* update pointers */
  z->next_out = p;
  s->read = q;

  /* done */
  return r;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Imported zlib-1.1.2
@
text
@@
