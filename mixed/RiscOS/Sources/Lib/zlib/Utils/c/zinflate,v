head	1.2;
access;
symbols
	zlib-1_20:1.2
	zlib-1_19:1.2
	zlib-1_18:1.2
	zlib-1_17:1.2
	zlib-1_16:1.2
	zlib-1_15:1.2
	dcotton_autobuild_BaseSW:1.2
	zlib-1_14:1.1;
locks; strict;
comment	@# @;


1.2
date	2001.05.25.12.55.27;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.23.10.14.54;	author ahodgkin;	state Exp;
branches;
next	;


desc
@@


1.2
log
@  Call ...End functions; deal with zero byte input.
Detail:
  The inflateEnd and deflateEnd functions weren't being called in the two
  bits of example code. Since the code generated a one-shot stand alone
  utility, this never mattered, but when used in a larger work that went
  through several compression or decompression cycles it would result in
  a large memory leak. Meanwhile, if the input was zero bytes in size, a
  divide by zero error would have been raised by the percentage file size
  change display; fixed (will always say '100%', though for the inflate
  case it'd never get that far as a zero byte input file is invalid).
Admin:
  Built both, tested both on zero byte files. Worked as expected.

Version 1.15. Tagged as 'zlib-1_15'
@
text
@/* Copyright 2001 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*************************************************/
/* File   : zinflate.c                           */
/*                                               */
/* Purpose: Decompress a file with the zlib      */
/*          stream interface. Info on zlib is    */
/*          at:                                  */
/*                                               */
/*    http://www.cdrom.com/pub/infozip/zlib/     */
/*                                               */
/*  Author: A.D.Hodgkinson, K.J.Bracey           */
/*                                               */
/* History: 30/09/1998: Lovingly hand crafted.   */
/*          23/05/2001: Fixed a few comments.    */
/*************************************************/

#include <stdlib.h>
#include <stdio.h>

#include "zlib/zlib.h"

/* Local definitions */

#define InBuf_Size  8192
#define OutBuf_Size 8192

/* Static function prototypes */

static void exit_with_error(int err, FILE * in, FILE * out);

/*************************************************/
/* main()                                        */
/*                                               */
/* Decompress a given file in a streaming        */
/* fashion using zlib.                           */
/*                                               */
/* Command line syntax:                          */
/*                                               */
/*   zinflate <infile> <outfile>                 */
/*************************************************/

int main(int argc, char * argv[])
{
  z_stream      stream;

  FILE        * infile;
  FILE        * outfile;

  static Byte   inbuf  [InBuf_Size];
  static Byte   outbuf [OutBuf_Size];

  int           error;
  long int      insize, outsize;
  size_t        read,   written;

  /* Check we have enough arguments */

  if (argc != 3)
  {
    fprintf(stderr, "Syntax: zinflate <infile> <outfile>\n");
    exit(EXIT_FAILURE);
  }

  /* Open the files */

  infile = fopen(argv[1], "rb");

  if (!infile)
  {
    perror(argv[1]);
    exit(EXIT_FAILURE);
  }

  outfile = fopen(argv[2], "wb");

  if (!outfile)
  {
    perror(argv[2]);
    exit(EXIT_FAILURE);
  }

  /* Set up basic stream info */

  stream.zalloc = Z_NULL;
  stream.zfree  = Z_NULL;
  stream.opaque = Z_NULL;

  /* Initialise the inflate engine */

  error = inflateInit(&stream);
  if (error) exit_with_error(error, infile, outfile);

  /* Main inflate loop */

  do
  {
    /* Read a chunk */

    read = fread(inbuf,
                 sizeof(Byte),
                 sizeof(inbuf) /  sizeof(Byte),
                 infile);

    printf(".");

    stream.next_in  = inbuf;
    stream.avail_in = (uInt) (read * sizeof(Byte));

    /* Decompressor loop */

    do
    {
      stream.next_out  = outbuf;
      stream.avail_out = (uInt) sizeof(outbuf);

      /* If we've read nothing, we're at the end of the input stream so */
      /* start telling inflate to finish up with Z_FINISH rather than   */
      /* Z_NO_FLUSH                                                     */

      error = inflate(&stream, read ? Z_NO_FLUSH : Z_FINISH);
      if (error && error != Z_STREAM_END) exit_with_error(error, infile, outfile);

      /* Write out the decompressed data */

      written = fwrite(outbuf,
                       sizeof(Byte),
                       (sizeof(outbuf) / sizeof(Byte)) - stream.avail_out,
                       outfile);
    }
    while (stream.avail_in > 0 && !error);
  }
  while (error != Z_STREAM_END);

  /* End the inflate session */

  error = inflateEnd(&stream);
  if (error) exit_with_error(error, infile, outfile);

  /* Close the output files and exit */

  insize  = ftell(infile);
  outsize = ftell(outfile);

  fclose(infile);
  fclose(outfile);

  printf("\n\nFinished.\n\n"

         "Input:       %ld bytes\n"
         "Output:      %ld bytes\n"
         "Inflated to: %d%% of original\n",

         insize,
         outsize,
         insize == 0 ? 100 : (int) ((100L * outsize) / insize));

  exit(EXIT_SUCCESS);
}

/*************************************************/
/* exit_with_error()                             */
/*                                               */
/* Print an error message quoting a given error  */
/* number to stderr, close the given input and   */
/* output file handles and exit with             */
/* EXIT_FAILURE.                                 */
/*                                               */
/* Parameters: Integer error number to report;   */
/*                                               */
/*             Pointer to a FILE struct for the  */
/*             input file;                       */
/*                                               */
/*             Pointer to a FILE struct for the  */
/*             output file.                      */
/*                                               */
/* Assumes:    The FILE pointers may be NULL.    */
/*************************************************/

static void exit_with_error(int err, FILE * in, FILE * out)
{
  fprintf(stderr, "\nError code %d received from inflate engine\n", err);

  if (in)  fclose(in);
  if (out) fclose(out);

  exit(EXIT_FAILURE);
}
@


1.1
log
@  Added zinflate.
Detail:
  Kevin had taken the zdeflate example code and modified it to form
  a zinflate utility, but it never made it into CVS.
Admin:
  Built both, compressed zdeflate.c and uncompressed it using the two
  utilities, output matched input.


Version 1.14. Tagged as 'zlib-1_14'
@
text
@d147 5
d168 1
a168 1
         (int) ((100L * outsize) / insize));
@

