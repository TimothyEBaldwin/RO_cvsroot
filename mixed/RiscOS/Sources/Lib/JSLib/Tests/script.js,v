head	1.2;
access;
symbols
	JSLib-0_07:1.2
	JSLib-0_06:1.2
	JSLib-0_05:1.2
	JSLib-0_04:1.1.1.1
	dcotton_autobuild_BaseSW:1.2
	JSLib-0_03:1.1.1.1
	JSLib-0_02:1.1.1.1
	sbrodie_32bit_compat:1.1.1.1
	ahodgkin_207release:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2001.06.13.14.59.01;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	98.04.28.16.27.56;	author ahodgkin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.04.28.16.27.56;	author ahodgkin;	state Exp;
branches;
next	;


desc
@@


1.2
log
@  Modified test harness a bit.
Detail:
  In order to better assess where potential (or real) memory leaks are,
  the big and huge strings created by the test script are done in a
  local code block and so should be discarded by the GC routines when
  the GC system is next called. Pause points at a forced GC call and
  interpreter shutdown have been put in to allow memory usage to be
  inspected in the Task Manager manually.
Admin:
  Tested; it works. Shows lots of leaking but that may just be down to
  the fragmentation of the area since a lot of the variables in the test
  script are still global. The dynamic area size stays large after the
  interpreter is shut down, implying a context-independent allocation
  from the script.

Version 0.05. Tagged as 'JSLib-0_05'
@
text
@///////////////////////////////////////////////////////////////////////////

var st, en;
var i;

///////////////////////////////////////////////////////////////////////////
print("\n** Entering long loop...\n");
///////////////////////////////////////////////////////////////////////////

st = new Date();

for(i = 0; i < 750000; i++)
{
  /* Do nothing */
}

en = new Date();

print("That took " + (en.getTime() - st.getTime()) / 1000 + " seconds");

///////////////////////////////////////////////////////////////////////////
print("\n** Loop with calls...\n");
///////////////////////////////////////////////////////////////////////////

function square(x)
{
  return(x*x);
}

st = new Date();

for(i = 0; i < 100000; i++)
{
  var y = square(20);
  var z = square(10);

  y = square(z);
  z = y / z;
}

en = new Date();

print("That took " + (en.getTime() - st.getTime()) / 1000 + " seconds");

///////////////////////////////////////////////////////////////////////////
print("\n** Loop with allocations...\n");
///////////////////////////////////////////////////////////////////////////

st = new Date();

for(i = 0; i < 50000; i++)
{
  var y = new Date();
  var o = new Object;
  var z = Math.PI;
  var a = i * 1.2;
}

en = new Date();

print("That took " + (en.getTime() - st.getTime()) / 1000 + " seconds");

///////////////////////////////////////////////////////////////////////////
print("\n** Building big string...\n");
///////////////////////////////////////////////////////////////////////////

st = new Date();

{
  var s = "";

  for(i = 0; i < 2000; i++)
  {
    s += i + " ";
  }
}

en = new Date();

print("That took " + (en.getTime() - st.getTime()) / 1000 + " seconds");

///////////////////////////////////////////////////////////////////////////
print("\n** Building huge string...\n");
///////////////////////////////////////////////////////////////////////////

st = new Date();

{
  var s = "";

  for(i = 0; i < 4000; i++)
  {
    s += i + " ";
  }
}

en = new Date();

print("That took " + (en.getTime() - st.getTime()) / 1000 + " seconds");
@


1.1
log
@Initial revision
@
text
@a4 1
var s = "";
a67 1
s  = "";
a68 1
for(i = 0; i < 2000; i++)
d70 6
a75 1
  s += i + " ";
a85 1
s  = "";
d88 2
d91 4
a94 3
for(i = 0; i < 4000; i++)
{
  s += i + " ";
@


1.1.1.1
log
@
First attempt at a port of the NSPR (Netscape Portable Runtime), with just
enough in it to support JavaScript.

@
text
@@
