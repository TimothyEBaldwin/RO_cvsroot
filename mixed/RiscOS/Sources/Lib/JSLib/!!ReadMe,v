head	1.4;
access;
symbols
	JSLib-0_07:1.4
	JSLib-0_06:1.3
	JSLib-0_05:1.2
	JSLib-0_04:1.2
	dcotton_autobuild_BaseSW:1.2
	JSLib-0_03:1.2
	JSLib-0_02:1.2
	sbrodie_32bit_compat:1.2
	ahodgkin_207release:1.2
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2007.10.18.11.35.32;	author ahodgkin;	state Exp;
branches;
next	1.3;

1.3
date	2007.01.27.02.15.59;	author srevill;	state Exp;
branches;
next	1.2;

1.2
date	98.09.10.12.37.15;	author ahodgkin;	state Exp;
branches;
next	1.1;

1.1
date	98.04.28.16.27.45;	author ahodgkin;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.04.28.16.27.45;	author ahodgkin;	state Exp;
branches;
next	;


desc
@@


1.4
log
@  Updated or added ReadMe files.
Detail:
  Some components have mixed licence conditions for files inside them.
  The added or updated ReadMe files explain the situation.
Admin:
  None.
@
text
@JSLib 18/10/2007 - ReadMe
=========================

Before building JSLib, you must have built and exported NSPRLib.
That done, there are three things you can build here:

 1) A library (linked and compiled without debug - beware Norcroft compiler
    bugs with this...!). A single #include to 'JSLibAPI.h' may be made if
    you want to include the core facilities (basically, jsapi.h, SetFPSR.h
    and maybe some other bits and pieces). However, for more sophisticated
    work you'll probably need to start taking in other header files
    directly.

    JSLib requires header file components of NSPRLib, so you must build
    and export NSPRLib first.

 2) A test program that runs 'script/js' through the interpreter. This
    is really quite simple though I did some hacking around just to test
    out the presented API. It's a good starting point to see how minimal
    the usage of the library can be (but note the binary size penalty!).

    You can find this in 'Tests'. It links with JSLib, so build and export
    that first.

    You can build non-debug and debug versions of the interpreter itself,
    though since it links with the exported copy of JSLib most of the
    code will depend on whatever you did with JSLib. The various !Mk...
    and !Run... filenames are suffixed with a 'D' to imply they're a
    debug version.

    For debug versions, *always remember to kill the task from the
    debugger end before closing the task window* - either hold down
    Escape until it responds, or keep doing Shift+F12 until the
    debugger pops up.

 3) A stand-alone JavaScript interpreter that runs under the debugger
    in a task window. Again, *always remember to kill the task from the
    debugger end before closing the task window*. The interpreter
    provides a 'quit' command for quick exit (type 'help' for a list
    of other extras).

    The interpreter's main() function is in 'Core.c.js'. It's an example
    of a more complex use of the interpreter, but was also written as a
    demonstration rather than anything else.

    Use !MkIntrpr[D] to build, and RunIntrpr[D] to run it.

    The interpreter uses NSPRLib but not JSLib. It builds its own local
    copy of the JSLib files; this is to aid in debugging - you can
    build a 'fully' debug version of the interpreter (apart from the
    NSPR) without disturbing the exported libraries.

!MkClean cleans out the interpreter and library, but not the test
program; you can use !MkClean in 'Tests' to do that separately.
Alternatively, !MkCleanAll cleans out the whole lot.

Note the 'SetPaths' obey file - useful for some editors. None of
the system variable names are allocated though...

The majority of the library files fall under the NPL (now called the MPL
in its more modern incarnation). Files created anew for the port fall
under the shared source licence. The applicable licence is described by
comments within individual files.


Replacing the malloc() family for memory allocation
===================================================

NSPRLib has a build-time option "USE_NSPRLIB_ALLOC_REGISTRATION" which
allows the malloc() family to be replaced by a registration function
in the exported header 'NSPRLib/h.ROSallocs'. This is done by a set of
#defines in 'NSPRLib/h.prcpucfg', the latter header file including the
former.

All JSLib sources include this header file, albeit usually by including
something else in NSPRLib that includes the other header itself. So, if
you want to replace malloc() etc. calls in JSLib with calls to the
re-registerable stuff in NSPRLib, add "-DUSE_NSPRLIB_ALLOC_REGISTRATION"
to the MakeFile's DFLAGS and rebuild. Otherwise, JSLib will use the
malloc() family and NSPRLib will use - well, whatever NSPRLib was built
to use.

Note the side-effect: Any software including JSLib headers also gets
NSPRLib's prcpufg.h, and therefore can replace its own use of malloc()
etc. by the NSPRLib ROSallocs.h alternatives if it wishes by placing
the appropriate definition on the CC command line.
@


1.3
log
@  Lots of new bits required for the latest Browse build
Detail:
  Some tweaks and lots of header files added to support the latest Browse
  build.
Admin:
  Yet to be tested fully in a ROOL-Browse build

Version 0.06. Tagged as 'JSLib-0_06'
@
text
@d1 1
a1 1
JSLib 10/09/1998 - ReadMe
d60 5
@


1.2
log
@Updated to use NSPRLib's reregisterable memory allocation functions. Test
script runner and interactive interpreter both replace the malloc() family
with MemLib equivalents.
@
text
@a81 6

-- 
Andrew Hodgkinson, Senior Software Engineer, Internet Technologies
Acorn Computers Ltd.                         Tel: +44 (0) 1223 725247
Acorn House, 645 Newmarket Road              Fax: +44 (0) 1223 725347
Cambridge, CB5 8PB, United Kingdom           WWW: http://www.acorn.co.uk/@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
JSLib 28/04/1998 - ReadMe
d59 23
@


1.1.1.1
log
@
First attempt at a port of the NSPR (Netscape Portable Runtime), with just
enough in it to support JavaScript.

@
text
@@
