head	1.2;
access;
symbols
	TchScrn-1_00:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2016.06.10.21.29.49;	author tmilius;	state Exp;
branches;
next	1.1;
commitid	SD08yRR4qiwOSX9z;

1.1
date	2008.02.25.19.14.03;	author srevill;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.02.25.19.14.03;	author srevill;	state Exp;
branches;
next	;


desc
@@


1.2
log
@  (overview of change) Detail:
U  (list files and functions that have changed)
Admin:
  (highlight level of testing that has taken place)
  (bugfix number if appropriate)
Changed calibration access entirely to usages of module commands
Module commands added
- TchScrn_TellPoint
- TchScrn_Status
Support of modern D-WAV Egalax USB HID chips added
Support of non USB based touchscreen added
@
text
@/** @@file

  Contains access to the touch screen over USB and is used by the driver
  itself and the calibration program.

  */
/* Created 31.12.2007 T. Milius
   Changed 12.04.2016 T. Milius D-WAV egalax HID added
   Changed 15.04.2016 T. Milius Entirely rewrite of USB handling */
/* Copyright (c) 2007-2016 by Thomas Milius Stade, Germany
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in the
*       documentation and/or other materials provided with the distribution.
*     * Neither the name of the &lt;organization&gt; nor the
*       names of its contributors may be used to endorse or promote products
*       derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY Thomas Milius Stade, Germany ``AS IS'' AND ANY
* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL Thomas Milius Stade, Germany BE LIABLE FOR ANY
* DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
/* RISC OS */
/* Note: Used for application and module.
   So take care that module stack limit is not exceeded. */

#ifndef usb_h
#define usb_h

/* !!!!!!!!!! libraries !!!!!!!!!! */
/* ---------- ANSI-C ---------- */
#include <stdbool.h>
#include <stdio.h>
#include <string.h>

/* ------------ RISC OS ------------ */
#include <kernel.h>
#include <swis.h>

/* ------------ own ------------ */
#include "common_mod.h"

/* !!!!!!!!!!! definitions !!!!!!!!!! */

/* !!!!!!!!!! data structures !!!!!!!!!! */

/* !!!!!!!!!! support functions !!!!!!!!!! */

/* !!!!!!!!!! functions !!!!!!!!!! */
/** The function will update the x and y position of the pen on the screen and the button state
    inside a given touch_screen_control_struct structure.

    It will return the information whether an error occurred or the
    position of the pen has been changed.

    USB variant. */
int touch_screen_get_position_usb(touch_screen_control_struct *touch_screen_control,
                                  int panel_type,
                                  bool clean_buffer)
{
int result;
unsigned int position;
int data_size;
int buffer_offset;
bool data_available;
_kernel_swi_regs regs;
_kernel_oserror *error_os;

if (touch_screen_control->input_file_handle == 0) return TOUCHSCREEN_CONNECTION_RESULT_ERROR;
result=TOUCHSCREEN_CONNECTION_RESULT_NO_DATA;
switch(panel_type) {
  case TOUCHSCREEN_TYPE_DWAV_EGALAX: {
    buffer_offset=0;
    data_size=16;
    }
  break;
  case TOUCHSCREEN_TYPE_DWAV_EGALAX_HID:
  case TOUCHSCREEN_TYPE_DWAV_EGALAX_HID2: {
    buffer_offset=1;
    data_size=6;
    }
  break;
  }
/* Do we require more data? */
if (touch_screen_control->buffer_size < data_size) {
  /* Fetch bytes from touch screen */
  regs.r[0]=4;
  regs.r[1]=touch_screen_control->input_file_handle;
  regs.r[2]=(int) touch_screen_control->buffer + touch_screen_control->buffer_size;
  if (clean_buffer) {
    /* Get all, ignore data after the first one. */
    regs.r[3]=256 - touch_screen_control->buffer_size;
    }
  else {
    regs.r[3]=data_size - touch_screen_control->buffer_size;
    }
  if ((error_os=_kernel_swi(OS_GBPB, &regs, &regs)) != NULL) {
    return TOUCHSCREEN_CONNECTION_RESULT_ERROR;
    }
  if (clean_buffer) {
    touch_screen_control->buffer_size+=256 - touch_screen_control->buffer_size - regs.r[3];
    }
  else {
    touch_screen_control->buffer_size+=data_size - touch_screen_control->buffer_size - regs.r[3];
    }
  }
data_available=false;
if (touch_screen_control->buffer_size >= data_size) {
  /* Data is available */
  data_available=true;
  touch_screen_control->buffer_size=0;
  if ((panel_type == TOUCHSCREEN_TYPE_DWAV_EGALAX_HID) ||
      (panel_type == TOUCHSCREEN_TYPE_DWAV_EGALAX_HID2)){
    if (touch_screen_control->buffer[0] != 1) {
      data_available=false;
      }
    }
  /* Note time of last activity */
  _kernel_swi(OS_ReadMonotonicTime, &regs, &regs);
  touch_screen_control->last_pressure_time=regs.r[0];
  if (data_available) {
    /* First byte
      129 indicates Pressure 16 Byte Block
      128 indicates Release  16 Byte Block
      else ignore buffer content in case of transmission errors. */
    if ((touch_screen_control->buffer[0 + buffer_offset] == 128) ||
        (touch_screen_control->buffer[0 + buffer_offset] == 129)) {
      /* Block received. Evaluate */
      /* Assume no change. */
      result=TOUCHSCREEN_CONNECTION_RESULT_NO_CHANGE;
      if (touch_screen_control->buffer[0 + buffer_offset] == 129) {
        if (touch_screen_control->state == TOUCHSCREEN_STATE_RELEASED) {
          result=TOUCHSCREEN_CONNECTION_RESULT_CHANGE;
          }
        touch_screen_control->state=TOUCHSCREEN_STATE_PRESSED;
        }
      else {
        if (touch_screen_control->state == TOUCHSCREEN_STATE_PRESSED) {
          result=TOUCHSCREEN_CONNECTION_RESULT_CHANGE;
          }
        touch_screen_control->state=TOUCHSCREEN_STATE_RELEASED;
        }
      /* Evaluate the positions. */
      /* horizontal X */
      switch(panel_type) {
        case TOUCHSCREEN_TYPE_DWAV_EGALAX: {
          position=touch_screen_control->buffer[1 + buffer_offset]<<8 | ((touch_screen_control->buffer[2 + buffer_offset] << 1) & 0xFE);
          }
        break;
        case TOUCHSCREEN_TYPE_DWAV_EGALAX_HID: {
          position=touch_screen_control->buffer[3 + buffer_offset]<<0 | (touch_screen_control->buffer[4 + buffer_offset] << 8);
          }
        break;
        case TOUCHSCREEN_TYPE_DWAV_EGALAX_HID2: {
          position=touch_screen_control->buffer[1 + buffer_offset]<<0 | (touch_screen_control->buffer[2 + buffer_offset] << 8);
          }
        break;
        }
      if (touch_screen_control->last_x_position != position) {
        result=TOUCHSCREEN_CONNECTION_RESULT_CHANGE;
        }
      touch_screen_control->last_x_position=position;
      /* vertical Y */
      switch(panel_type) {
        case TOUCHSCREEN_TYPE_DWAV_EGALAX: {
          position=touch_screen_control->buffer[3 + buffer_offset]<<8 | ((touch_screen_control->buffer[4 + buffer_offset] << 1) & 0xFE);
          }
        break;
        case TOUCHSCREEN_TYPE_DWAV_EGALAX_HID: {
          position=touch_screen_control->buffer[1 + buffer_offset]<<0 | (touch_screen_control->buffer[2 + buffer_offset] << 8);
          }
        break;
        case TOUCHSCREEN_TYPE_DWAV_EGALAX_HID2: {
          position=touch_screen_control->buffer[3 + buffer_offset]<<0 | (touch_screen_control->buffer[4 + buffer_offset] << 8);
          }
        break;
        }
      if (touch_screen_control->last_y_position != position) {
        result=TOUCHSCREEN_CONNECTION_RESULT_CHANGE;
        }
      touch_screen_control->last_y_position=position;
      }
    }
  }
if (!data_available) {
  /* No data available */
  /* Data is delivered continously in case of pressure.
     If there is no data devilered this indicates that
     the pen has been released. */
  if (touch_screen_control->state == TOUCHSCREEN_STATE_PRESSED) {
    _kernel_swi(OS_ReadMonotonicTime, &regs, &regs);
    if ((regs.r[0] - touch_screen_control->last_pressure_time) > 4) {
      result=TOUCHSCREEN_CONNECTION_RESULT_CHANGE;
      touch_screen_control->state=TOUCHSCREEN_STATE_RELEASED;
      }
    }
  }
return result;
}

#endif
@


1.1
log
@Initial revision
@
text
@d8 3
a10 2
   Changed 20.01.2008 T. Milius */
/* Copyright (c) 2007-2008 by Thomas Milius Stade, Germany
d51 3
a54 22
/** @@name Evaluation results of connection

    This codes will occur as results of touch_screen_get_position() */
/*@@{*/
/** Problem with USB connection ooccurred. */
#define TOUCHSCREEN_CONNECTION_RESULT_ERROR -1
/** No further data from touch screen in the moment. */
#define TOUCHSCREEN_CONNECTION_RESULT_NO_DATA 0
/** Pen is at the same position as before. */
#define TOUCHSCREEN_CONNECTION_RESULT_NO_CHANGE 1
/** Pen position has changed. */
#define TOUCHSCREEN_CONNECTION_RESULT_CHANGE 2
/*@@}*/

/** @@name detected pen states

    This states are indicating whether the pen is on the
    screen or released. */
/*@@{*/
#define TOUCHSCREEN_STATE_RELEASED 0
#define TOUCHSCREEN_STATE_PRESSED 1
/*@@}*/
a56 12
/** Contains all data required
    to handle to USB connection to the touchscreen. */
typedef struct {
int screen_usb_device_number;
unsigned int input_file_handle;
char device_name[10];
unsigned int last_x_position;
unsigned int last_y_position;
unsigned char buffer[16];
int last_pressure_time;
int state;
} touch_screen_control_struct;
a60 63
/** Initializes a given touch_screen_control_struct structure. */
bool touch_screen_initialize(touch_screen_control_struct *touch_screen_control)
{

if (!touch_screen_control) return false;
touch_screen_control->state=TOUCHSCREEN_STATE_RELEASED;
touch_screen_control->input_file_handle=0;
strcpy(touch_screen_control->device_name, "");
return true;
}

/** Claims USB connection to touch screen.
    The USB device number of the touch screen and a pointer to a touch_screen_control_struct structure
    must be given.

    The function will fill the connection structure and return NULL or
    a pointer to an error block if the connection cannot be claimed. */
_kernel_oserror *touch_screen_claim_control(unsigned int screen_usb_device_number,
                                            touch_screen_control_struct *touch_screen_control)

{
char device_name[60];
_kernel_swi_regs regs;
_kernel_oserror *error_os;

if (!touch_screen_control) return NULL;
touch_screen_initialize(touch_screen_control);
touch_screen_control->screen_usb_device_number=screen_usb_device_number;
sprintf(touch_screen_control->device_name, "USB%d", touch_screen_control->screen_usb_device_number);
/* Size makes usage of the buffer manager.
   This can contain size-1 bytes.
   The touch screen transfers 2*8 Bytes however.
   If this can't be transferred the device will reset.
   More bytes are unused. Therefore 17 Bytes as buffer size is the right
   choice. */
sprintf(device_name, "Devices#endpoint1;interrupt5;size17:USB%d", touch_screen_control->screen_usb_device_number);
regs.r[0]=0x47;
regs.r[1]=(int) device_name;
regs.r[2]=NULL;
if ((error_os=_kernel_swi(OS_Find, &regs, &regs)) != NULL) {
  return error_os;
  }
touch_screen_control->input_file_handle=regs.r[0];
return NULL;
}

/** The function will release the control over the touch screen
    if it is still valid. You must pass a pointer to a valid
    touch_screen_control_struct structure. */
bool touch_screen_release_control(touch_screen_control_struct *touch_screen_control)
{
_kernel_swi_regs regs;

if (!touch_screen_control) return false;
if (touch_screen_control->input_file_handle != 0) {
  regs.r[0]=0;
  regs.r[1]=touch_screen_control->input_file_handle;
  _kernel_swi(OS_Find, &regs, &regs);
  touch_screen_initialize(touch_screen_control);
  }
return true;
}

d65 6
a70 2
    position of the pen has been changed. */
int touch_screen_get_position(touch_screen_control_struct *touch_screen_control)
a72 1
int i;
d74 3
a79 1
if (!touch_screen_control) return TOUCHSCREEN_CONNECTION_RESULT_ERROR;
d82 12
a93 7
/* Fetch bytes from touch screen */
/* Is data available? */
regs.r[0]=0x80000002;
regs.r[1]=(int) touch_screen_control->device_name;
regs.r[2]=touch_screen_control->input_file_handle;
if ((error_os=_kernel_swi(DeviceFS_CallDevice, &regs, &regs)) != NULL) {
  return TOUCHSCREEN_CONNECTION_RESULT_ERROR;
d95 25
a119 1
if (regs.r[4] == 0) {
d121 6
a126 4
  regs.r[1]=touch_screen_control->input_file_handle;
  for (i=0; i<16; i++) {
    if ((error_os=_kernel_swi(OS_BGet, &regs, &regs)) != NULL) {
      return TOUCHSCREEN_CONNECTION_RESULT_ERROR;
a127 1
    touch_screen_control->buffer[i]=regs.r[0];
d129 1
a129 1
  /* Note time of last actitivty */
d132 39
a170 11
  /* First byte
    129 indicates Pressure 16 Byte Block
    128 indicates Release  16 Byte Block
    else ignore buffer content in case of transmission errors. */
  if ((touch_screen_control->buffer[0] == 128) ||
      (touch_screen_control->buffer[0] == 129)) {
    /* Block received. Evaluate */
    /* Assume no change. */
    result=TOUCHSCREEN_CONNECTION_RESULT_NO_CHANGE;
    if (touch_screen_control->buffer[0] == 129) {
      if (touch_screen_control->state == TOUCHSCREEN_STATE_RELEASED) {
d173 17
a189 4
      touch_screen_control->state=TOUCHSCREEN_STATE_PRESSED;
      }
    else {
      if (touch_screen_control->state == TOUCHSCREEN_STATE_PRESSED) {
d192 1
a192 13
      touch_screen_control->state=TOUCHSCREEN_STATE_RELEASED;
      }
    /* Evaluate the positions. */
    /* horizontal X */
    position=touch_screen_control->buffer[1]<<8 | ((touch_screen_control->buffer[2] << 1) & 0xFE);
    if (touch_screen_control->last_x_position != position) {
      result=TOUCHSCREEN_CONNECTION_RESULT_CHANGE;
      }
    touch_screen_control->last_x_position=position;
    /* vertical Y */
    position=touch_screen_control->buffer[3]<<8 | ((touch_screen_control->buffer[4] << 1) & 0xFE);
    if (touch_screen_control->last_y_position != position) {
      result=TOUCHSCREEN_CONNECTION_RESULT_CHANGE;
a193 1
    touch_screen_control->last_y_position=position;
d196 1
a196 1
else {
@


1.1.1.1
log
@Initial import of TchScrn from Thomas Milius
@
text
@@
