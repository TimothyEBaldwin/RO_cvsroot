head	1.3;
access;
symbols
	HAL:1.3.0.2
	GPIO-0_64:1.3
	GPIO-0_63:1.3
	GPIO-0_62:1.3
	GPIO-0_61:1.3
	GPIO-0_60:1.3
	GPIO-0_59:1.2
	GPIO-0_58:1.2
	GPIO-0_54:1.1.1.1
	GPIO-0_53:1.1.1.1
	GPIO-0_52:1.1.1.1
	GPIO-0_51:1.1.1.1
	initial:1.1.1.1
	Vendor:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2015.02.25.21.47.14;	author rsprowson;	state Exp;
branches
	1.3.2.1;
next	1.2;
commitid	mVXSMogYUaGt9rby;

1.2
date	2014.10.09.08.54.54;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	tlTUaFQNXeOAlvTx;

1.1
date	2014.04.29.13.25.09;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Ss9wdP7uZ2nQ4Ayx;

1.3.2.1
date	2017.02.11.15.12.45;	author rool;	state dead;
branches;
next	;
commitid	J69vqiljDCvfVxFz;

1.1.1.1
date	2014.04.29.13.25.09;	author bavison;	state Exp;
branches;
next	;
commitid	Ss9wdP7uZ2nQ4Ayx;


desc
@@


1.3
log
@Add two more targets to the GPIO table, and other improvements
Docs/GPIO: StrongHelp updated
Resources/!PiLed/!Run: RMEnsure the GPIO module first
Resources/!PiLed/!RunImage: Clarifications and improvements
hdr/Reals: Make space for the Mk2 model B and model A+
s/I2CSWIs: Improvements to error reporting
s/InitModule: Add an API version check against the HAL
s/PiSWIs; s/SupportCode: Resolve some TODO's
s/Tables: The two extra tables for the two extra boards

Submission from Tank. Built, and module loaded, but no runtime testing.

Version 0.60. Tagged as 'GPIO-0_60'
@
text
@;
; Copyright (c) 2011, Tank Stage Lighting
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met:
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of the copyright holder nor the names of their
;       contributors may be used to endorse or promote products derived from
;       this software without specific prior written permission.
;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
; WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
; DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
; ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;

;ReadData
;r0=GPIO number
i2c_Read_Data
	Push	"r1-r6,lr"
	BL	i2c_checkifinrange		;
	CMP	r0,#-1				;
	Pull	"r1-r6,pc",EQ			; restore registers and exit
	BL	i2c_get_things			;
	MOV	r2,#1				;
	ADD	r1,r4,#mcpgpioa			;
	BL	i2c_read			;
	Pull	"r1-r6,pc",VS			;restore registers and exit if error
	LDRB	r0,[r1]				;
	AND	r0,r0,r5			;mask pin
	CMP	r0,#0				;
	MOVNE	r0,#1				;
	Pull	"r1-r6,pc"			; restore registers and exit
;r0=value (0 or 1) -1 if not there
;---------------------------------------------
;WriteData
;r0=GPIO number
;r1=value
i2c_Write_Data
	Push	"r0-r8,lr"			;
	BL	i2c_checkifinrange		;
	CMP	r0,#-1				;
	Pull	"r0-r8,pc",EQ			; restore registers and exit
	MOV	r6,r0				;
	MOV	r7,r1				;
	BL	i2c_Read_Data			;
	Pull	"r1-r8,pc",VS			;restore registers and exit if error
	MOV	r0,r6				;
	ADD	r4,r12,#i2creturn		;
	LDRB	r6,[r4]				;
	BL	i2c_get_things			;
	ADD	r1,r4,#mcpgpioa			;
	CMP	r7,#0				;
	BICEQ	r2,r6,r5			;
	ORRNE	r2,r6,r5			;
	BL	i2c_write			;
	Pull	"r0-r8,pc"			; restore registers and exit
;---------------------------------------------
;ReadOE
;r0=GPIO number
i2c_Read_OE
	Push	"r1-r6,lr"
	BL	i2c_checkifinrange		;
	CMP	r0,#-1				;
	Pull	"r1-r6,pc",EQ			; restore registers and exit
	BL	i2c_get_things
	MOV	r2,#1				;
	ADD	r1,r4,#mcpiodira		;
	BL	i2c_read			;
	Pull	"r1-r6,pc",VS			;restore registers and exit if error
	LDRB	r0,[r1]				;
	AND	r0,r0,r5			;mask pin
	CMP	r0,#0				;
	MOVNE	r0,#1				;
	Pull	"r1-r6,pc"			; restore registers and exit
;r0=value (0 or 1) or -1 if not there
;---------------------------------------------
;WriteOE
;r0=GPIO number
;r1=value
i2c_Write_OE
	Push	"r1-r7,lr"			;
	BL	i2c_checkifinrange		;
	CMP	r0,#-1				;
	Pull	"r1-r7,pc",EQ			; restore registers and exit
	MOV	r6,r0				;
	MOV	r7,r1				;
	BL	i2c_Read_OE			;
	MOV	r0,r6				;
	ADD	r4,r12,#i2creturn		;
	LDRB	r6,[r4]				;
	BL	i2c_get_things			;
	ADD	r1,r4,#mcpiodira		;
	CMP	r7,#0				;
	BICEQ	r2,r6,r5			;
	ORRNE	r2,r6,r5			;
	BL	i2c_write			;
	Pull	"r1-r7,pc"			; restore registers and exit
;r0=old value or -1 if not there
;---------------------------------------------
;ReadMode
;WriteMode
;r0=GPIO number
;r1=value
i2c_Read_Mode
i2c_Write_Mode
	Push	"r1-r7,lr"			;
	BL	i2c_checkifinrange		;
	CMP	r0,#-1				;
	Pull	"r1-r7,pc",EQ			; restore registers and exit
	MOV	r0,#4				; GPIO
	Pull	"r1-r7,pc"			; restore registers and exit
;r0=old value or -1 if not there
;---------------------------------------------
;r0=chip address (0-7)
i2c_ReadBlock
	Push	"r1-r9,lr"			;
	AND	r0,r0,#&7			;
	MOV	r0,r0,LSL #4			;point to first gpio of chip
	BL	i2c_checkifinrange		;
	CMP	r0,#-1				;
	Pull	"r1-r9,pc",EQ			; restore registers and exit
	ADD	r9,r0,#8			;point to eighth gpio of chip
	BL	i2c_get_things			;
	MOV	r2,#1				;
	ADD	r1,r4,#mcpgpioa			;
	BL	i2c_read			;
	Pull	"r1-r9,pc",VS			;restore registers and exit if error
	LDRB	r8,[r1]				;
	MOV	r0,r9				;get second port readings
	BL	i2c_get_things			;
	MOV	r2,#1				;
	ADD	r1,r4,#mcpgpioa			;
	BL	i2c_read			;
	Pull	"r1-r9,pc",VS			;restore registers and exit if error
	LDRB	r0,[r1]				;
	MOV	r0,r0,LSL#8			;move up
	ORR	r0,r0,r8			;add in 0-7 bits
	Pull	"r1-r9,pc"			; restore registers and exit
;r0=16 bits from chip or -1 if not there
;---------------------------------------------
;r0=chip address (0-7)
;r1=lower 16 bits of gpio i/o
i2c_WriteBlock
	Push	"r0-r8,lr"			;
	AND	r0,r0,#&7			;
	MOV	r0,r0,LSL #4			;point to first gpio of chip
	BL	i2c_checkifinrange		;
	CMP	r0,#-1				;
	Pull	"r0-r8,pc",EQ			; restore registers and exit
	ADD	r8,r0,#8			;point to eighth gpio of chip
	MOV	r7,r1				;save for later
	BL	i2c_get_things			;
	ADD	r1,r4,#mcpgpioa			;
	AND	r2,r7,#&FF			;just bottom 8
	BL	i2c_write			;
	Pull	"r0-r8,pc",VS			;restore registers and exit if error
	MOV	r0,r8				;do next 8
	BL	i2c_get_things			;
	ADD	r1,r4,#mcpgpioa			;
	MOV	r7,r7,LSR #8			;move down
	AND	r2,r7,#&FF			;just bottom 8
	BL	i2c_write			;
	Pull	"r0-r8,pc"			; restore registers and exit
;---------------------------------------------
;r0=chip address (0-7)
i2c_ReadBlockOE
	Push	"r1-r9,lr"			;
	AND	r0,r0,#&7			;
	MOV	r0,r0,LSL #4			;point to first gpio of chip
	BL	i2c_checkifinrange		;
	CMP	r0,#-1				;
	Pull	"r1-r9,pc",EQ			; restore registers and exit
	ADD	r9,r0,#8			;point to eighth gpio of chip
	BL	i2c_get_things			;
	MOV	r2,#1				;
	ADD	r1,r4,#mcpiodira		;
	BL	i2c_read			;
	Pull	"r1-r9,pc",VS			;restore registers and exit if error
	LDRB	r8,[r1]				;
	MOV	r0,r9				;get second port readings
	BL	i2c_get_things			;
	MOV	r2,#1				;
	ADD	r1,r4,#mcpiodira		;
	BL	i2c_read			;
	Pull	"r1-r9,pc",VS			;restore registers and exit if error
	LDRB	r0,[r1]				;
	MOV	r0,r0,LSL#8			;move up
	ORR	r0,r0,r8			;add in 0-7 bits
	Pull	"r1-r9,pc"			; restore registers and exit
;r0=16 bits from chip
;---------------------------------------------
;r0=chip address (0-7)
;r1=lower 16 bits of gpio oe
i2c_WriteBlockOE
	Push	"r0-r8,lr"			;
	AND	r0,r0,#&7			;
	MOV	r0,r0,LSL #4			;point to first gpio of chip
	BL	i2c_checkifinrange		;
	CMP	r0,#-1				;
	Pull	"r0-r8,pc",EQ			; restore registers and exit
	ADD	r8,r0,#8			;point to eighth gpio of chip
	MOV	r7,r1				;save for later
	BL	i2c_get_things			;
	ADD	r1,r4,#mcpiodira		;
	AND	r2,r7,#&FF			;just bottom 8
	BL	i2c_write			;
	Pull	"r0-r8,pc",VS			;restore registers and exit if error
	MOV	r0,r8				;do next 8
	BL	i2c_get_things			;
	ADD	r1,r4,#mcpiodira		;
	MOV	r7,r7,LSR #8			;move down
	AND	r2,r7,#&FF			;just bottom 8
	BL	i2c_write			;
	Pull	"r0-r8,pc"			; restore registers and exit
;---------------------------------------------
;r0=port address (0-15)
i2c_ReadByte
	Push	"r1-r9,lr"			;
	AND	r0,r0,#&15			;
	MOV	r0,r0,LSL #3			;point to first gpio of port
	BL	i2c_checkifinrange		;
	CMP	r0,#-1				;
	Pull	"r1-r9,pc",EQ			; restore registers and exit
	BL	i2c_get_things			;
	MOV	r2,#1				;
	ADD	r1,r4,#mcpgpioa			;
	BL	i2c_read			;
	Pull	"r1-r9,pc",VS			;restore registers and exit if error
	LDRB	r0,[r1]				;
	Pull	"r1-r9,pc"			; restore registers and exit
;r0=8 bits from chip or -1 if not there
;---------------------------------------------
;r0=port address (0-15)
;r1=lower 8 bits of gpio i/o
i2c_WriteByte
	Push	"r0-r8,lr"			;
	AND	r0,r0,#&15			;
	MOV	r0,r0,LSL #3			;point to first gpio of port
	BL	i2c_checkifinrange		;
	CMP	r0,#-1				;
	Pull	"r0-r8,pc",EQ			; restore registers and exit
	MOV	r7,r1				;save for later
	BL	i2c_get_things			;
	ADD	r1,r4,#mcpgpioa			;
	AND	r2,r7,#&FF			;just bottom 8
	BL	i2c_write			;
	Pull	"r0-r8,pc"			; restore registers and exit
;---------------------------------------------
;r0=port address (0-15)
i2c_ReadByteOE
	Push	"r1-r9,lr"			;
	AND	r0,r0,#&15			;
	MOV	r0,r0,LSL #3			;point to first gpio of port
	BL	i2c_checkifinrange		;
	CMP	r0,#-1				;
	Pull	"r1-r9,pc",EQ			; restore registers and exit
	BL	i2c_get_things			;
	MOV	r2,#1				;
	ADD	r1,r4,#mcpiodira		;
	BL	i2c_read			;
	Pull	"r1-r9,pc",VS			;restore registers and exit if error
	LDRB	r0,[r1]				;
	Pull	"r1-r9,pc"			; restore registers and exit
;r0=8 bits from chip
;---------------------------------------------
;r0=port address (0-15)
;r1=lower 16 bits of gpio oe
i2c_WriteByteOE
	Push	"r0-r8,lr"			;
	AND	r0,r0,#&15			;
	MOV	r0,r0,LSL #3			;point to first gpio of port
	BL	i2c_checkifinrange		;
	CMP	r0,#-1				;
	Pull	"r0-r8,pc",EQ			; restore registers and exit
	MOV	r7,r1				;save for later
	BL	i2c_get_things			;
	ADD	r1,r4,#mcpipola			;
	AND	r2,r7,#&FF			;just bottom 8
	BL	i2c_write			;
	Pull	"r0-r8,pc"			; restore registers and exit
;---------------------------------------------
i2c_Read_Polarity
	Push	"r1-r6,lr"
	BL	i2c_checkifinrange		;
	CMP	r0,#-1				;
	Pull	"r1-r6,pc",EQ			; restore registers and exit
	BL	i2c_get_things
	MOV	r2,#1				;
	ADD	r1,r4,#mcpipola			;
	BL	i2c_read			;
	Pull	"r1-r6,pc",VS			;restore registers and exit if error
	LDRB	r0,[r1]				;
	AND	r0,r0,r5			;mask pin
	CMP	r0,#0				;
	MOVNE	r0,#1				;
	Pull	"r1-r6,pc"			; restore registers and exit
;r0=value (0 or 1) or -1 if not there
;---------------------------------------------
i2c_Write_Polarity
	Push	"r1-r7,lr"			;
	BL	i2c_checkifinrange		;
	CMP	r0,#-1				;
	Pull	"r1-r7,pc",EQ			; restore registers and exit
	MOV	r6,r0				;
	MOV	r7,r1				;
	BL	i2c_Read_Polarity		;
	MOV	r0,r6				;
	ADD	r4,r12,#i2creturn		;
	LDRB	r6,[r4]				;
	BL	i2c_get_things			;
	ADD	r1,r4,#mcpipola			;
	CMP	r7,#0				;
	BICEQ	r2,r6,r5			;
	ORRNE	r2,r6,r5			;
	BL	i2c_write			;
	Pull	"r1-r7,pc"			; restore registers and exit
;r0=old value or -1 if not there
;---------------------------------------------
i2c_Read_Pull
	Push	"r1-r6,lr"
	BL	i2c_checkifinrange		;
	CMP	r0,#-1				;
	Pull	"r1-r6,pc",EQ			; restore registers and exit
	BL	i2c_get_things
	MOV	r2,#1				;
	ADD	r1,r4,#mcpgppua			;
	BL	i2c_read			;
	Pull	"r1-r6,pc",VS			;restore registers and exit if error
	LDRB	r0,[r1]				;
	AND	r0,r0,r5			;mask pin
	CMP	r0,#0				;
	MOVNE	r0,#1				;
	Pull	"r1-r6,pc"			; restore registers and exit
;r0=value (0 or 1) or -1 if not there
;---------------------------------------------
i2c_Write_Pull
	Push	"r1-r7,lr"			;
	BL	i2c_checkifinrange		;
	CMP	r0,#-1				;
	Pull	"r1-r7,pc",EQ			; restore registers and exit
	MOV	r6,r0				;
	MOV	r7,r1				;
	BL	i2c_Read_Pull			;
	MOV	r0,r6				;
	ADD	r4,r12,#i2creturn		;
	LDRB	r6,[r4]				;
	BL	i2c_get_things			;
	ADD	r1,r4,#mcpgppua			;
	CMP	r7,#0				;
	BICEQ	r2,r6,r5			;
	ORRNE	r2,r6,r5			;
	BL	i2c_write			;
	Pull	"r1-r7,pc"			; restore registers and exit
;r0=old value or -1 if not there
;---------------------------------------------
i2c_GPIO_Info
	Push	"r3-r8,lr"			;
	LDR	r2,[r12,#i2cprotect]		;
	CMP	r2,#0				;i2c protected ?
	MOVEQ	r0,#-1				;
	MOVEQ	r1,#-1				;return error code
	Pull	"r3-r8,pc",EQ			;
	LDR	r0,[r12,#i2clowgpio]		;
	LDR	r1,[r12,#i2chighgpio]		;
	LDR	r2,[r12,#machine]		;get machine type
	ADRL	r8,i2c_bus_nos			;get i2c bus used
	LDRB	r2,[r10,r2]			;
	Pull	"r3-r8,pc"			; restore registers and exit
;r0=lowest i2c gpio available
;r1=highest gpio available
;r2=bus number used on machine
;OR r0+r1=-1 i2c not protected
;OR r0=-1 and r1=0 no i2c gpio chips fitted
;---------------------------------------------
;r0 pointer to list
i2c_ReadConfig
	Push	"r1-r10,lr"			;
	MOV	r4,r0
	LDR	r0,[r12,#i2clowgpio]		;lowest i2c gpio
	LDR	r1,[r12,#i2chighgpio]		;highest
	CMP	r0,#-1				;non fitted/last
	MOVEQ	r0,r4
	Pull	"r1-r10,pc",EQ			;
	ORR	r0,r0,#i2c_flag			;
	ORR	r1,r1,#i2c_flag			;
10	MOV	r5,r0				;save gpio
	BL	i2c_Read_OE			;
	CMP	r0,#1				;
	MOVEQ	r0,#conf_io			;
	ORR	r6,r5,r0			;
	MOV	r0,#0				;not extended
	ORR	r6,r6,r0,LSR #8			;
	ORR	r6,r6,#i2c_flag			;
	STR	r6,[r4],#4			;
	ADD	r0,r5,#1			;
	CMP	r0,r1				;
	BLE	%BT10				;
	MOV	r0,r4				;pass pointer back
	Pull	"r1-r10,pc"			;
;r0 pointer to list
;---------------------------------------------
;r0=gpio number
i2c_checkifinrange
	Push	"r1-r4,lr"
	MOV	r4,r0				;save for later
	BL	i2c_GPIO_Info			;r0=lowest,r1=highest,r2+r3=corrupt
	CMP	r0,#-1				;
	Pull	"r1-r4,pc",EQ			;get out with error
	AND	r3,r4,#&FF			;just gpio number
	CMP	r3,r0				;check against lowest
	MOVLT	r0,#-1				;
	Pull	"r1-r4,pc",LT			;get out with error
	CMP	r3,r1				;check against highest
	MOVGT	r0,#-1				;
	Pull	"r1-r4,pc",GT			;get out with error
	MOV	r0,r4				;
	Pull	"r1-r4,pc"			;
;r0=-1 if error or preserved if ok
;---------------------------------------------
	END

@


1.3.2.1
log
@Implementation of API 1.00
Detail:
  By delagating the hardware access element to the underlying HAL, the GPIO module becomes much simpler.
  None of the platform specific SWIs (eg. GPIO_AuxAsUSB) are required, or implemented. This information can be obtained by enumerating the pins and switching members of the same group by setting their mode for example.
  A new SWI, GPIO_Features is added, though the returned flags are currently 0 the presence of the SWI demarks the HAL variant.
  A new command, *GPIODevices lists the GPIO controller(s) known and their basic input/output state at a glance.
  See the StrongHelp manual for full details.
Admin:
  Tested on not-a-Pi too, to ensure it doesn't attach to pre API 1.00.

Version 1.00, 1.11.2.1. Tagged as 'GPIO-1_00-1_11_2_1'
@
text
@@


1.2
log
@Use Push/Pull macros
This gets rid of ~200 mixed UAL warnings without having to use the -nowarn switch, which could hide some genuine warnings needing attention.
PUSH and POP are synonyms for their STM and LDM equivalent, according to the ARM ARM.
Version number bumped to +0.01 greater than Tank's latest binary.

Version 0.58. Tagged as 'GPIO-0_58'
@
text
@a37 1
	MOV	r4,#0				;report swi error
d39 1
d58 1
a66 1
	MOV	r4,#0				;report swi error
a79 1
	MOV	r4,#0				;report swi error
d81 1
a107 1
	MOV	r4,#0				;report swi error
a137 1
	MOV	r4,#0				;report swi error
d139 1
a144 1
	MOV	r4,#0				;report swi error
d146 1
a165 1
	MOV	r4,#0				;report swi error
d168 1
a171 1
	MOV	r4,#0				;report swi error
a188 1
	MOV	r4,#0				;report swi error
d190 1
a195 1
	MOV	r4,#0				;report swi error
d197 1
a216 1
	MOV	r4,#0				;report swi error
d219 1
a222 1
	MOV	r4,#0				;report swi error
a238 1
	MOV	r4,#0				;report swi error
d240 1
a256 1
	MOV	r4,#0				;report swi error
a271 1
	MOV	r4,#0				;report swi error
d273 1
a289 1
	MOV	r4,#0				;report swi error
a301 1
	MOV	r4,#0				;report swi error
d303 1
a326 1
	MOV	r4,#0				;report swi error
a338 1
	MOV	r4,#0				;report swi error
d340 1
a363 1
	MOV	r4,#0				;report swi error
@


1.1
log
@Initial revision
@
text
@d31 1
a31 1
	PUSH	{r1-r6,lr}
d34 1
a34 1
	POPEQ	{r1-r6,pc}			; restore registers and exit
d44 1
a44 1
	POP	{r1-r6,pc}			; restore registers and exit
d51 1
a51 1
	PUSH	{r0-r8,lr}			;
d54 1
a54 1
	POPEQ	{r0-r8,pc}			; restore registers and exit
d68 1
a68 1
	POP	{r0-r8,pc}			; restore registers and exit
d73 1
a73 1
	PUSH	{r1-r6,lr}
d76 1
a76 1
	POPEQ	{r1-r6,pc}			; restore registers and exit
d86 1
a86 1
	POP	{r1-r6,pc}			; restore registers and exit
d93 1
a93 1
	PUSH	{r1-r7,lr}			;
d96 1
a96 1
	POPEQ	{r1-r7,pc}			; restore registers and exit
d110 1
a110 1
	POP	{r1-r7,pc}			; restore registers and exit
d119 1
a119 1
	PUSH	{r1-r7,lr}			;
d122 1
a122 1
	POPEQ	{r1-r7,pc}			; restore registers and exit
d124 1
a124 1
	POP	{r1-r7,pc}			; restore registers and exit
d129 1
a129 1
	PUSH	{r1-r9,lr}			;
d134 1
a134 1
	POPEQ	{r1-r9,pc}			; restore registers and exit
d151 1
a151 1
	POP	{r1-r9,pc}			; restore registers and exit
d157 1
a157 1
	PUSH	{r0-r8,lr}			;
d162 1
a162 1
	POPEQ	{r0-r8,pc}			; restore registers and exit
d177 1
a177 1
	POP	{r0-r8,pc}			; restore registers and exit
d181 1
a181 1
	PUSH	{r1-r9,lr}			;
d186 1
a186 1
	POPEQ	{r1-r9,pc}			; restore registers and exit
d203 1
a203 1
	POP	{r1-r9,pc}			; restore registers and exit
d209 1
a209 1
	PUSH	{r0-r8,lr}			;
d214 1
a214 1
	POPEQ	{r0-r8,pc}			; restore registers and exit
d229 1
a229 1
	POP	{r0-r8,pc}			; restore registers and exit
d233 1
a233 1
	PUSH	{r1-r9,lr}			;
d238 1
a238 1
	POPEQ	{r1-r9,pc}			; restore registers and exit
d245 1
a245 1
	POP	{r1-r9,pc}			; restore registers and exit
d251 1
a251 1
	PUSH	{r0-r8,lr}			;
d256 1
a256 1
	POPEQ	{r0-r8,pc}			; restore registers and exit
d263 1
a263 1
	POP	{r0-r8,pc}			; restore registers and exit
d267 1
a267 1
	PUSH	{r1-r9,lr}			;
d272 1
a272 1
	POPEQ	{r1-r9,pc}			; restore registers and exit
d279 1
a279 1
	POP	{r1-r9,pc}			; restore registers and exit
d285 1
a285 1
	PUSH	{r0-r8,lr}			;
d290 1
a290 1
	POPEQ	{r0-r8,pc}			; restore registers and exit
d297 1
a297 1
	POP	{r0-r8,pc}			; restore registers and exit
d300 1
a300 1
	PUSH	{r1-r6,lr}
d303 1
a303 1
	POPEQ	{r1-r6,pc}			; restore registers and exit
d313 1
a313 1
	POP	{r1-r6,pc}			; restore registers and exit
d317 1
a317 1
	PUSH	{r1-r7,lr}			;
d320 1
a320 1
	POPEQ	{r1-r7,pc}			; restore registers and exit
d334 1
a334 1
	POP	{r1-r7,pc}			; restore registers and exit
d338 1
a338 1
	PUSH	{r1-r6,lr}
d341 1
a341 1
	POPEQ	{r1-r6,pc}			; restore registers and exit
d351 1
a351 1
	POP	{r1-r6,pc}			; restore registers and exit
d355 1
a355 1
	PUSH	{r1-r7,lr}			;
d358 1
a358 1
	POPEQ	{r1-r7,pc}			; restore registers and exit
d372 1
a372 1
	POP	{r1-r7,pc}			; restore registers and exit
d376 1
a376 1
	PUSH	{r3-r8,lr}			;
d381 1
a381 1
	POPEQ	{r3-r8,pc}			;
d387 1
a387 1
	POP	{r3-r8,pc}			; restore registers and exit
d396 1
a396 1
	PUSH	{r1-r10,lr}			;
d402 1
a402 1
	POPEQ	{r1-r10,pc}			;
d418 1
a418 1
	POP	{r1-r10,pc}			;
d423 1
a423 1
	PUSH	{r1-r4,lr}
d427 1
a427 1
	POPEQ	{r1-r4,pc}			;get out with error
d431 1
a431 1
	POPLT	{r1-r4,pc}			;get out with error
d434 1
a434 1
	POPGT	{r1-r4,pc}			;get out with error
d436 1
a436 1
	POP	{r1-r4,pc}			;
@


1.1.1.1
log
@  Initial import of GPIO module sources
Admin:
  Relicenced under the BSD licence with the permission of the author
@
text
@@
