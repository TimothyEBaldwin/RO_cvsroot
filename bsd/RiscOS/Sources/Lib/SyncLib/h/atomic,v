head	1.2;
access;
symbols
	SyncLib-0_05:1.2
	SyncLib-0_04:1.2
	SyncLib-0_03:1.2
	SyncLib-0_02:1.2
	SyncLib-0_01:1.1.1.1
	initial:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2016.02.29.10.32.49;	author bavison;	state Exp;
branches;
next	1.1;
commitid	GfO1CPVxSn8KyNWy;

1.1
date	2012.05.29.14.01.55;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;
commitid	8LPhbDgGhYV0HC6w;

1.1.1.1
date	2012.05.29.14.01.55;	author bavison;	state Exp;
branches;
next	;
commitid	8LPhbDgGhYV0HC6w;


desc
@@


1.2
log
@  Extra function to assist with ARMv8 compatibility
Detail:
  atomic_update_byte() is the equivalent of atomic_update() but deals with
  byte-wide rather than word-wide data fields. It operates using either
  SWPB or LDREXB/STREXB instructions, depending upon the architecture, and
  is therefore suitable for updating any modules which currently use SWPB
  explicitly in order to make them compatible with ARMv8 where the SWPB
  instruction has been removed.
Admin:
  Tested on Raspberry Pi 3.

Version 0.02. Tagged as 'SyncLib-0_02'
@
text
@/*
 * Copyright (c) 2012, Ben Avison
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the copyright holder nor the names of their
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef ATOMIC_H
#define ATOMIC_H

#include <stdint.h>

/** \file atomic.h
 *  An implementation of atomic memory accesses that uses ARM's favoured
 *  instructions, dependent upon the current CPU.
 */

/** Atomic read/write of a 32-bit value.
 *  Can be entered in any processor mode.
 *  \arg new_value Value to write.
 *  \arg address   Memory location at which to perform the read/write.
 *  \return        Value that was read.
 */
uint32_t atomic_update(uint32_t new_value, volatile uint32_t *address);

/** Atomic read/write of an 8-bit value.
 *  Can be entered in any processor mode.
 *  \arg new_value Value to write.
 *  \arg address   Memory location at which to perform the read/write.
 *  \return        Value that was read.
 */
uint8_t atomic_update_byte(uint8_t new_value, volatile uint8_t *address);

/** User-defined atomic operation on a 32-bit value.
 *  Can be entered in any processor mode unless you need to support
 *  architecture 5 or earlier, in which case must be entered in privileged mode.
 *  \arg callback Routine to change the value (may be called more than once).
 *  \arg argument Value to pass to callback as its second argument.
 *  \arg address  Memory location at which to operate.
 *  \return       Value that was at location before operation.
 */
uint32_t atomic_process(uint32_t (*callback)(uint32_t, uint32_t), uint32_t argument, volatile uint32_t *address);

#endif
@


1.1
log
@Initial revision
@
text
@d46 8
@


1.1.1.1
log
@  Initial import of SyncLib
Detail:
  SyncLib is a library containing architecture-independent synchronisation
  primitives. It supports uniprocessor and SMP systems, even though RISC OS
  itself does not (yet) support SMP - but it allows individual modules to
  start to be modified in preparation for any such future support. The
  library adjusts itself according to the architecture targeted by your
  chosen build, so in particular when used in ROM builds, only supported for
  the appropriate CPU(s) will be included.
Admin:
  SyncLib is used heavily by SDIODriver and SDFS - they have acted as a test
  bed for the library and also as a proof of concept for SMP-ready modules.
@
text
@@
