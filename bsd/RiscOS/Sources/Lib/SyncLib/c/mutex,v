head	1.1;
branch	1.1.1;
access;
symbols
	SyncLib-0_05:1.1.1.1
	SyncLib-0_04:1.1.1.1
	SyncLib-0_03:1.1.1.1
	SyncLib-0_02:1.1.1.1
	SyncLib-0_01:1.1.1.1
	initial:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2012.05.29.14.01.55;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;
commitid	8LPhbDgGhYV0HC6w;

1.1.1.1
date	2012.05.29.14.01.55;	author bavison;	state Exp;
branches;
next	;
commitid	8LPhbDgGhYV0HC6w;


desc
@@



1.1
log
@Initial revision
@
text
@/*
 * Copyright (c) 2012, Ben Avison
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the copyright holder nor the names of their
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/** \file mutex.c
 *  An implementation of a simple mutex. Does not disable interrupts while the
 *  mutex is held, so is suitable for mutexes that are held for an extended
 *  period, but is not appropriate if you need it to always be possible to lock
 *  the mutex from the background (e.g. in an interrupt handler).
 */

#include "swis.h"

#include "SyncLib/synclib.h"

bool mutex_try_lock(mutex_t *mutex)
{
  if (atomic_update(MUTEX_LOCKED, (uint32_t *) mutex) == MUTEX_LOCKED)
    return false;
  barrier();
  return true;
}

void mutex_lock(mutex_t *mutex)
{
  while (atomic_update(MUTEX_LOCKED, (uint32_t *) mutex) == MUTEX_LOCKED)
    cpuevent_wait();
  barrier();
}

void mutex_sleep_lock(mutex_t *mutex)
{
  while (atomic_update(MUTEX_LOCKED, (uint32_t *) mutex) == MUTEX_LOCKED)
    _swix(OS_UpCall, _INR(0,1), 6, mutex);
  barrier();
}

void mutex_unlock(mutex_t *mutex)
{
  barrier();
  *mutex = MUTEX_UNLOCKED;
  barrier_sync();
  cpuevent_send();
}
@


1.1.1.1
log
@  Initial import of SyncLib
Detail:
  SyncLib is a library containing architecture-independent synchronisation
  primitives. It supports uniprocessor and SMP systems, even though RISC OS
  itself does not (yet) support SMP - but it allows individual modules to
  start to be modified in preparation for any such future support. The
  library adjusts itself according to the architecture targeted by your
  chosen build, so in particular when used in ROM builds, only supported for
  the appropriate CPU(s) will be included.
Admin:
  SyncLib is used heavily by SDIODriver and SDFS - they have acted as a test
  bed for the library and also as a proof of concept for SMP-ready modules.
@
text
@@
