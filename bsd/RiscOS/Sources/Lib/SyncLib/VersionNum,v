head	1.5;
access;
symbols
	SyncLib-0_05:1.5
	SyncLib-0_04:1.4
	SyncLib-0_03:1.3
	SyncLib-0_02:1.2
	SyncLib-0_01:1.1.1.1
	initial:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2018.05.07.14.11.46;	author jlee;	state Exp;
branches;
next	1.4;
commitid	FehIcIZGHfdA7nBA;

1.4
date	2017.06.06.20.55.38;	author jlee;	state Exp;
branches;
next	1.3;
commitid	EHfsYUWBrMyK7mUz;

1.3
date	2016.05.08.16.35.45;	author jlee;	state Exp;
branches;
next	1.2;
commitid	zvjgRdIcLTMNlH5z;

1.2
date	2016.02.29.10.32.41;	author bavison;	state Exp;
branches;
next	1.1;
commitid	GfO1CPVxSn8KyNWy;

1.1
date	2012.05.29.14.01.55;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;
commitid	8LPhbDgGhYV0HC6w;

1.1.1.1
date	2012.05.29.14.01.55;	author bavison;	state Exp;
branches;
next	;
commitid	8LPhbDgGhYV0HC6w;


desc
@@


1.5
log
@Fix wrong spinrw function name exports. Add new spinrw_write_to_read function.
Detail:
  h/spinrw - Fix header file to use the correct names for the write try lock & sleep lock functions.
  s/spinrw - Add new spinrw_write_to_read function, which atomically converts a held write lock to a read lock. This can be useful if you have a long routine which needs to update some state and then perform extra actions based on the new value - if the write occurs at the start of the routine, the write access can then be downgraded to read access, allowing interrupts + concurrent read access, while still making sure the data hasn't changed from what was written.
Admin:
  Tested on OMAP3, OMAP4


Version 0.05. Tagged as 'SyncLib-0_05'
@
text
@/* (0.05)
 *
 * This file is automatically maintained by srccommit, do not edit manually.
 * Last processed by srccommit version: 1.1.
 *
 */
#define Module_MajorVersion_CMHG        0.05
#define Module_MinorVersion_CMHG        
#define Module_Date_CMHG                07 May 2018

#define Module_MajorVersion             "0.05"
#define Module_Version                  5
#define Module_MinorVersion             ""
#define Module_Date                     "07 May 2018"

#define Module_ApplicationDate          "07-May-18"

#define Module_ComponentName            "SyncLib"
#define Module_ComponentPath            "bsd/RiscOS/Sources/Lib/SyncLib"

#define Module_FullVersion              "0.05"
#define Module_HelpVersion              "0.05 (07 May 2018)"
#define Module_LibraryVersionInfo       "0:5"
@


1.4
log
@Fix a couple of spinrw issues
Detail:
  s/spinrw - Add a barrier to the Pause macro to prevent excessive spinning when multiple cores are competing for the same lock.
  Also, fix garbage pointer being passed to OS_UpCall by spinrw_write_sleep_lock
Admin:
  Tested on Raspberry Pi 3


Version 0.04. Tagged as 'SyncLib-0_04'
@
text
@d1 1
a1 1
/* (0.04)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.04
d9 1
a9 1
#define Module_Date_CMHG                06 Jun 2017
d11 2
a12 2
#define Module_MajorVersion             "0.04"
#define Module_Version                  4
d14 1
a14 1
#define Module_Date                     "06 Jun 2017"
d16 1
a16 1
#define Module_ApplicationDate          "06-Jun-17"
d21 3
a23 3
#define Module_FullVersion              "0.04"
#define Module_HelpVersion              "0.04 (06 Jun 2017)"
#define Module_LibraryVersionInfo       "0:4"
@


1.3
log
@Update atomic_process_smp to cope with the possibility of the process function altering the state of the exclusive monitor. Prefer CPS over MSR when performing PSR manipulation.
Detail:
  s/atomic - Since the exclusive monitor can have its state affected by almost anything, atomic_process_smp can't assume that the state remains stable across the call to the user's process function. Instead we must perform our LDREX-STREX sequence after the callback, manually checking that the value being updated hasn't been altered by anyone else while the process function was executing.
  s/spin, s/spinrw - When disabling interrupts prefer CPS over MSR. Apart from making the sequences one instruction shorter, CPS generally delivers better performance than the equivalent MSR.
Admin:
  Tested on Cortex-A15


Version 0.03. Tagged as 'SyncLib-0_03'
@
text
@d1 1
a1 1
/* (0.03)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.03
d9 1
a9 1
#define Module_Date_CMHG                08 May 2016
d11 2
a12 2
#define Module_MajorVersion             "0.03"
#define Module_Version                  3
d14 1
a14 1
#define Module_Date                     "08 May 2016"
d16 1
a16 1
#define Module_ApplicationDate          "08-May-16"
d21 3
a23 3
#define Module_FullVersion              "0.03"
#define Module_HelpVersion              "0.03 (08 May 2016)"
#define Module_LibraryVersionInfo       "0:3"
@


1.2
log
@  Extra function to assist with ARMv8 compatibility
Detail:
  atomic_update_byte() is the equivalent of atomic_update() but deals with
  byte-wide rather than word-wide data fields. It operates using either
  SWPB or LDREXB/STREXB instructions, depending upon the architecture, and
  is therefore suitable for updating any modules which currently use SWPB
  explicitly in order to make them compatible with ARMv8 where the SWPB
  instruction has been removed.
Admin:
  Tested on Raspberry Pi 3.

Version 0.02. Tagged as 'SyncLib-0_02'
@
text
@d1 1
a1 1
/* (0.02)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.02
d9 1
a9 1
#define Module_Date_CMHG                29 Feb 2016
d11 2
a12 2
#define Module_MajorVersion             "0.02"
#define Module_Version                  2
d14 1
a14 1
#define Module_Date                     "29 Feb 2016"
d16 1
a16 1
#define Module_ApplicationDate          "29-Feb-16"
d21 3
a23 3
#define Module_FullVersion              "0.02"
#define Module_HelpVersion              "0.02 (29 Feb 2016)"
#define Module_LibraryVersionInfo       "0:2"
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* (0.01)
d7 1
a7 1
#define Module_MajorVersion_CMHG        0.01
d9 1
a9 1
#define Module_Date_CMHG                29 May 2012
d11 2
a12 2
#define Module_MajorVersion             "0.01"
#define Module_Version                  1
d14 1
a14 1
#define Module_Date                     "29 May 2012"
d16 1
a16 1
#define Module_ApplicationDate          "29-May-12"
d21 3
a23 3
#define Module_FullVersion              "0.01"
#define Module_HelpVersion              "0.01 (29 May 2012)"
#define Module_LibraryVersionInfo       "0:1"
@


1.1.1.1
log
@  Initial import of SyncLib
Detail:
  SyncLib is a library containing architecture-independent synchronisation
  primitives. It supports uniprocessor and SMP systems, even though RISC OS
  itself does not (yet) support SMP - but it allows individual modules to
  start to be modified in preparation for any such future support. The
  library adjusts itself according to the architecture targeted by your
  chosen build, so in particular when used in ROM builds, only supported for
  the appropriate CPU(s) will be included.
Admin:
  SyncLib is used heavily by SDIODriver and SDFS - they have acted as a test
  bed for the library and also as a proof of concept for SMP-ready modules.
@
text
@@
