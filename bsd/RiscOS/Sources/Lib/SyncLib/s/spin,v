head	1.2;
access;
symbols
	SyncLib-0_05:1.2
	SyncLib-0_04:1.2
	SyncLib-0_03:1.2
	SyncLib-0_02:1.1.1.1
	SyncLib-0_01:1.1.1.1
	initial:1.1.1.1
	vendor:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2016.05.08.16.35.48;	author jlee;	state Exp;
branches;
next	1.1;
commitid	zvjgRdIcLTMNlH5z;

1.1
date	2012.05.29.14.01.55;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;
commitid	8LPhbDgGhYV0HC6w;

1.1.1.1
date	2012.05.29.14.01.55;	author bavison;	state Exp;
branches;
next	;
commitid	8LPhbDgGhYV0HC6w;


desc
@@


1.2
log
@Update atomic_process_smp to cope with the possibility of the process function altering the state of the exclusive monitor. Prefer CPS over MSR when performing PSR manipulation.
Detail:
  s/atomic - Since the exclusive monitor can have its state affected by almost anything, atomic_process_smp can't assume that the state remains stable across the call to the user's process function. Instead we must perform our LDREX-STREX sequence after the callback, manually checking that the value being updated hasn't been altered by anyone else while the process function was executing.
  s/spin, s/spinrw - When disabling interrupts prefer CPS over MSR. Apart from making the sequences one instruction shorter, CPS generally delivers better performance than the equivalent MSR.
Admin:
  Tested on Cortex-A15


Version 0.03. Tagged as 'SyncLib-0_03'
@
text
@;
; Copyright (c) 2011, Ben Avison
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met:
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of the copyright holder nor the names of their
;       contributors may be used to endorse or promote products derived from
;       this software without specific prior written permission.
;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
; WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
; DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
; ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;

        GET     ListOpts
        GET     Macros
        GET     System
        GET     CPU/Arch
        GET     APCS/$APCS
        GET     hdr/barrier
        GET     hdr/cpuevent
        GET     hdr/init
        GET     hdr/vars

; Layout of spinlock_t

                ^       0, a1
Mutex           #       4
SavedCPSR       #       4

Mutex_Locked    *       0
Mutex_Unlocked  *       1

Strex_Succeeded *       0
Strex_Failed    *       1

        AREA    |Asm$$Code|, CODE, READONLY

        IF SupportARMv6 :LAND: NoARMv6 ; i.e. run-time detection is required
        EXPORT  spin_init
spin_init ROUT
      [ zM
        StaticBaseFromSL a4
      ]
        ADR     a2, spin_lock_uniproc
        ADR     a3, spin_unlock_uniproc
        TST     a1, #CPU_Exclusive
        ADRNE   a2, spin_lock_smp
        ADRNE   a3, spin_unlock_smp
        Store   a2, a4, lock_fn, ip
        Store   a3, a4, unlock_fn, ip
        Return  , LinkNotStacked
        ENDIF


        IF :LNOT: SupportARMv6
spin_lock * spin_lock_uniproc
spin_unlock * spin_unlock_uniproc
        ELIF :LNOT: NoARMv6
spin_lock * spin_lock_smp
spin_unlock * spin_unlock_smp
        ELSE
spin_lock ROUT
      [ zM
        StaticBaseFromSL a4
      ]
        Load    pc, a4, lock_fn, ip
spin_unlock ROUT
      [ zM
        StaticBaseFromSL a4
      ]
        Load    pc, a4, unlock_fn, ip
        ENDIF


        IF NoARMv6

spin_lock_uniproc ROUT
        MRS     a2, CPSR
        ORR     a3, a2, #I32_bit
        MSR     CPSR_c, a3 ; IRQs now disabled
        STR     a2, SavedCPSR
        Return  , LinkNotStacked

spin_unlock_uniproc ROUT
        LDR     a2, SavedCPSR
        MSR     CPSR_c, a2
        Return  , LinkNotStacked

        ENDIF


        IF SupportARMv6

spin_lock_smp ROUT
        MRS     a2, CPSR
        CPSID   i ; IRQs now disabled
        MOV     a3, #Mutex_Locked
        ASSERT  :INDEX: Mutex = 0 :LAND: :BASE: Mutex = a1
01      LDREX   a4, [a1]
        TEQ     a4, a3
        CPUEventWaitEQ ; already locked: sleep this CPU, the unlocking CPU will wake us
        STREXNE a4, a3, [a1]
        TEQNE   a4, #Strex_Failed
        BEQ     %B01 ; was already locked, or someone pipped us to the post, so try again
        Barrier ; ensure locking is seen by all CPUs before we start using the SavedCPSR field
        STR     a2, SavedCPSR
        Return  , LinkNotStacked

spin_unlock_smp ROUT
        LDR     a2, SavedCPSR
        MOV     a3, #Mutex_Unlocked
        Barrier ; ensure no other cores see the lock released before we can read SavedCPSR
        STR     a3, Mutex
        BarrierSync ; ensure mutex unlock is visible to other CPUs before we wake them
        CPUEventSend ; wake any CPUs that are sleeping on this lock
        MSR     CPSR_c, a2
        Return  , LinkNotStacked

        ENDIF


        IF SupportARMv6 :LAND: NoARMv6

        AREA    |Asm$$Data|, DATA

lock_fn
        DCD     0
unlock_fn
        DCD     0

        ENDIF


        EXPORT  spin_lock
        EXPORT  spin_unlock


        END
@


1.1
log
@Initial revision
@
text
@d110 1
a110 2
        ORR     a3, a2, #I32_bit
        MSR     CPSR_c, a3 ; IRQs now disabled
@


1.1.1.1
log
@  Initial import of SyncLib
Detail:
  SyncLib is a library containing architecture-independent synchronisation
  primitives. It supports uniprocessor and SMP systems, even though RISC OS
  itself does not (yet) support SMP - but it allows individual modules to
  start to be modified in preparation for any such future support. The
  library adjusts itself according to the architecture targeted by your
  chosen build, so in particular when used in ROM builds, only supported for
  the appropriate CPU(s) will be included.
Admin:
  SyncLib is used heavily by SDIODriver and SDFS - they have acted as a test
  bed for the library and also as a proof of concept for SMP-ready modules.
@
text
@@
