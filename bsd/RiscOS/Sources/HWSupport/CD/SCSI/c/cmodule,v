head	1.3;
access;
symbols
	SCSI-0_06:1.3
	SCSI-0_05:1.3
	SCSI-0_04:1.3
	SCSI-0_03:1.2
	SCSI-0_02:1.2
	SCSI-0_01:1.1;
locks; strict;
comment	@# @;


1.3
date	2013.08.22.20.51.23;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	7NDpO3QOp23rAu2x;

1.2
date	2011.11.26.20.33.55;	author jlee;	state Exp;
branches;
next	1.1;
commitid	o1Wkv5iIoH4XTSIv;

1.1
date	2011.11.20.22.59.20;	author jlee;	state Exp;
branches;
next	;
commitid	DtNjG4WA7bDLT7Iv;


desc
@@


1.3
log
@Let through mode sense page 1 sizes other than 10
From SCSI standard MMC-2 onwards the read/write error recovery parameters page has been defined with a page length of 10, however earlier editions (and drafts) used a page length of 6.
Rather than rejecting drives built on these standards, since we only want the read retry count at offset 3, permit page 1 responses of either 10 or 6 bytes, reject < 6.

driver.c
 - change length check to 6
 - adjust comments/debug to remind the reader why
cmodule.c
 - fix bug which led to a data abort in MessageTrans, when RAM loaded and the number of CD drives is configured as 0 (or CDDriver is unplugged) and so registration fails, the messages file would be deregistered without first closing the file, leaving MessageTrans' descriptor linked list pointing at non existant messages

Tested with a Ricoh MP7040S on the Acorn SCSI podule.

Version 0.04. Tagged as 'SCSI-0_04'
@
text
@/*
 * Copyright (c) 2011, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include "modhead.h"
#include "swis.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stddef.h>

#include "Global/RISCOS.h"
#include "Global/Services.h"

#include "DebugLib/DebugLib.h"

#include "globals.h"

void *private_word;

cdfs_driver_info_t driver_info;

MessagesFD messages;

#ifdef STANDALONE
extern void* Resources(void);
#endif

_kernel_oserror* module_init(const char *cmd_tail, int podule_base, void *pw)
{
	(void) cmd_tail;
	(void) podule_base;
	(void) pw;
	_kernel_oserror* e = 0;
    
	/* set up debugging */
	debug_initialise(Module_Title, "", "");
	debug_set_device(DADEBUG_OUTPUT);
	debug_set_unbuffered_files(TRUE);
    
	private_word = pw;

	/* Set up messages */
#ifdef STANDALONE
	e = _swix(ResourceFS_RegisterFiles,_IN(0),Resources());
	if(e)
		goto error1;
#endif

	e = _swix(MessageTrans_OpenFile,_INR(0,2),&messages,"Resources:$.Resources.CDFSDriver.SCSI.Messages",0);
	if(e)
		goto error2;

	/* Register with CDFS */
	memset(&driver_info,0,sizeof(driver_info));
	driver_info.infoword = CDOp_MAX
			     | INFOWORD_USE_SCSI_SEEK
			     | INFOWORD_USE_SCSI_INQUIRY
			     | INFOWORD_USE_SCSI_CAPACITY
			     | INFOWORD_USE_SCSI_READY
			     | INFOWORD_USE_SCSI_STOPOPEN
			     | INFOWORD_USE_SCSI_CHECK
			     | INFOWORD_USE_SCSI_STATUS
			     | INFOWORD_USE_SCSI_CONTROL
			     | INFOWORD_USE_SCSI_OP
			     ;
	driver_info.numdrivetypes = DriveType_MAX;
	e = _swix(CD_Register,_INR(0,2),&driver_info,driver_handler,private_word);
	if(e)
		goto error3;
    
	return NULL;

error3:
	_swix(MessageTrans_CloseFile,_IN(0),&messages);
error2:
#ifdef STANDALONE
	_swix(ResourceFS_DeregisterFiles,_IN(0),Resources());
error1:
#endif
	dprintf(("","Failed initialisation: %s\n", e->errmess));
	return e;
}

_kernel_oserror *module_final(int fatal, int podule, void *pw)
{
	(void) fatal;
	(void) podule;
	(void) pw;
	_kernel_oserror *e = 0;

	/* Deregister */
	e = _swix(CD_Unregister,_INR(0,1),&driver_info,driver_handler);
	/* Ignore any errors (CDFSDriver can be killed without our knowledge, which will result in any unregister attempts failing) */
#ifdef DEBUGLIB
	if(e)
		dprintf(("","Warning - Failed to unregister with CDFSDriver. Error %x %s\n",e->errnum,e->errmess));
#endif

	/* Close messages */
	_swix(MessageTrans_CloseFile,_IN(0),&messages);

#ifdef STANDALONE
	_swix(ResourceFS_DeregisterFiles,_IN(0),Resources());
#endif

	return NULL;
}
@


1.2
log
@Assorted bugfixes
Detail:
  c/cmodule - Don't allow module finalisation to fail due to errors returned by CD_Unregister. This ensures the module can still be killed if CDFSDriver has been killed.
  c/driver, h/cdfsbits - Rename SUPPORTED_AUDIOCONTROL_* #defined to be just SUPPORTED_*
  c/driver - Assorted tweaks and fixes:
    - Add DumpBlock function for printing SCSI command blocks, repsonses, etc.
    - Correct response size checks to only complain if the response is under the expected size instead of not equal to it. This should ensure the driver works OK if the response data structures grow in size in the future.
    - Correct READ TRACK INFORMATION size checks to use the MMC 1 size instead of the MMC 2 size
    - Correct read-write error recovery mode page size check in driver_SetParameters
    - Correct driver_SetParameters to not return an error for parameters which are read-only
    - Correct volume level checks in driver_SetAudioParms_VolumeLevels
Admin:
  Softload version tested on Iyonix & BB-xM.
  Driver now seems to work OK with most drives.


Version 0.02. Tagged as 'SCSI-0_02'
@
text
@d52 1
a52 1
_kernel_oserror* module_init (const char *cmd_tail, int podule_base, void *pw)
d93 1
a93 1
		goto error2;
d97 2
@


1.1
log
@Add initial version of CDFSSoftSCSI
Detail:
  New CDFS driver module that aims to support all SCSI CD/DVD drives that conform to the MMC SCSI specification. This includes USB attached ones, assuming SCSISoftUSB is loaded.
  Known issues:
  - Only supports MODE SENSE/SELECT 10, so drives which only work with MODE SENSE/SELECT 6 won't work
  - CD speed get/set currently unsupported
  - Inactivity timer multiplier get/set not supported on some drive types
Admin:
  Tested with softload on Iyonix, ROM build on OMAP3
  Only confirmed to work with one drive model so far - expect a few tweaks to be needed to cope with non-conformant drives


Version 0.01. Tagged as 'SCSI-0_01'
@
text
@d115 2
d118 2
a119 1
		goto error;
a128 4
    
error:
	dprintf(("","Failed finalisation: %s\n", e->errmess));
	return e;
@

