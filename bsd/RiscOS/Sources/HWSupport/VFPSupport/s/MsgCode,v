head	1.1;
access;
symbols
	VFPSupport-0_05:1.1
	VFPSupport-0_04:1.1
	VFPSupport-0_03:1.1
	VFPSupport-0_02:1.1;
locks; strict;
comment	@# @;


1.1
date	2010.11.25.22.03.33;	author jlee;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Add initial version of VFPSupport module
Detail:
  Initial VFP/NEON support code for RISC OS. Features:
  * Basic detection code for determining VFP version. Should work OK on all architecture versions.
  * Provides code to perform VFP/NEON context switches
  * Context switches can be lazy or immediate
  * Context register dumps can be stored in user-allocated memory or memory allocated by VFPSupport
  * Basic APIs for examining contexts and reporting available hardware features
  * "FastAPI" that privileged code can use for context switching in order to avoid SWI call overheads
  Missing/unfinished features:
  * No VFP exception handler is present, so the module will refuse to run on anything but a VFPv3 system
  * Lazy context switching is simplistic, opting to activate the new context upon the first undefined instruction abort instead of checking to see if it was a VFP instruction that triggered the abort
  * No interface to allow debuggers to easily get their hands on a register dump following a crash
  * No code to automatically clean up contexts left behind by dying programs
  * Can't be used by FIQ handlers, or from code called by an FIQ handler
  * Currently uses an error base of 0!
  Other notes:
  * Doc/vfpversions contains some random notes about the different VFP/NEON versions
  * Test/test1,ffb is a BASIC program that tests most of the module's functionality
Admin:
  Tested on Iyonix & Beagleboard. Iyonix version exits correctly, while Beagleboard version passes all tests in the test1 script.
  Need to sort out proper error numbers, and translate the error messages.


Version 0.01. Not tagged
@
text
@; 
; Copyright (c) 2010, RISC OS Open Ltd
; All rights reserved.
; 
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met: 
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of RISC OS Open Ltd nor the names of its contributors
;       may be used to endorse or promote products derived from this software
;       without specific prior written permission.
; 
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; POSSIBILITY OF SUCH DAMAGE.
; 

MessageFilename
        DCB     "Resources:$.Resources.VFPSupport.Messages", 0
        ALIGN

ReturnError_LR ; Translate R0 and exit using LR
        Push    "lr"
ReturnError_Stacked ; Translate R0 and exit using stacked address
        Push    "r1-r2,r4-r7"
        ; Check if we need to open the messages file
        LDR     r1, MessageFile_Open
        CMP     r1, #0
        BNE     %FT10
        MOV     r7, r0
        ADR     r0, MessageFile_Block
        ADR     r1, MessageFilename
        MOV     r2, #0
        SWI     XMessageTrans_OpenFile
        Pull    "r1-r2,r4-r7,pc",VS
        STR     r0, MessageFile_Open ; Any non-zero value will do
        MOV     r0, r7
10
        ADR     r1, MessageFile_Block
        MOV     r2, #0
        MOV     r4, #0
        MOV     r5, #0
        MOV     r6, #0
        MOV     r7, #0
        SWI     XMessageTrans_ErrorLookup
        Pull    "r1-r2,r4-r7,pc"

CloseMessages
        Entry
        LDR     r0, MessageFile_Open
        CMP     r0, #0
        EXIT    EQ
        MOV     r0, #0
        STR     r0, MessageFile_Open
        ADR     r0, MessageFile_Block
        SWI     XMessageTrans_CloseFile
        EXIT

        END
@
