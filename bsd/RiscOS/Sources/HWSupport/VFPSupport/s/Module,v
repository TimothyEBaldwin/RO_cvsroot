head	1.6;
access;
symbols
	VFPSupport-0_05:1.6
	VFPSupport-0_04:1.5
	VFPSupport-0_03:1.4
	VFPSupport-0_02:1.2;
locks; strict;
comment	@# @;


1.6
date	2012.10.18.23.48.19;	author jlee;	state Exp;
branches;
next	1.5;
commitid	BqLZHUZxFFaXsVow;

1.5
date	2012.07.21.13.24.07;	author jlee;	state Exp;
branches;
next	1.4;
commitid	6mlQ2UpqqdicSqdw;

1.4
date	2012.03.20.23.10.42;	author jlee;	state Exp;
branches;
next	1.3;
commitid	xwwPQIsu8Tow4GXv;

1.3
date	2011.02.01.22.55.56;	author jlee;	state Exp;
branches;
next	1.2;

1.2
date	2011.02.01.22.53.09;	author jlee;	state Exp;
branches;
next	1.1;

1.1
date	2010.11.25.22.03.33;	author jlee;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Fix save/restore of contexts which have pending exceptions
Detail:
  s/Module - Fixed context save & restore code to ensure FPEXC EX & FP2V bits are clear when accessing FPSCR and the main VFP registers. Without doing this, attempting to save or restore a context which has a pending exception will trigger an exception itself.
  Test/test2,ffb - Simple test to make sure save/restore of contexts with pending exceptions works properly
  Test/test1,ffb - Added brief description, changed file from plain text to tokenised BASIC to prevent it accidentally happening later on
Admin:
  Tested on Raspberry Pi
  Programs which need support code to run or trigger math exceptions no longer trigger an undefined instruction abort from within VFPSupport


Version 0.05. Tagged as 'VFPSupport-0_05'
@
text
@; 
; Copyright (c) 2010, RISC OS Open Ltd
; All rights reserved.
; 
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met: 
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of RISC OS Open Ltd nor the names of its contributors
;       may be used to endorse or promote products derived from this software
;       without specific prior written permission.
; 
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; POSSIBILITY OF SUCH DAMAGE.
; 

        AREA    |!!!ModuleHeader|, CODE, READONLY, PIC

Module_BaseAddr
        &       0
        &       InitModule - Module_BaseAddr
        &       KillModule - Module_BaseAddr
        &       0
        &       ModuleTitle - Module_BaseAddr
        &       HelpString - Module_BaseAddr
        &       0
        &       VFPSupportSWI_Base
        &       SWIEntry - Module_BaseAddr
        &       SWINameTable - Module_BaseAddr
        &       0
 [ International_Help <> 0
        DCD     MessageFilename - Module_BaseAddr
 |
        DCD     0
 ]
        &       ModuleFlags - Module_BaseAddr

HelpString
        =       "VFPSupport", 9, "$Module_MajorVersion ($Module_Date)"
        [       Module_MinorVersion <> ""
        =       " $Module_MinorVersion"
        ]
        =       0
ModuleTitle
SWINameTable
        =       "VFPSupport", 0
        =       "CheckContext", 0
        =       "CreateContext", 0
        =       "DestroyContext", 0
        =       "ChangeContext", 0
        =       "ExamineContext", 0
        =       "FastAPI", 0
        =       "ActiveContext", 0
        =       "Version", 0
        =       "Features", 0
        =       0
        ALIGN
        
ModuleFlags
        &       ModuleFlag_32bit

; Workspace

                      ^ 0, wp
MessageFile_Block     # 16
MessageFile_Open      # 4
ActiveContext         # 4 ; Context that's actually active
LazyContext           # 4 ; Context awaiting lazy activation (==ActiveContext if none)
NumVFPRegs            # 1 ; Number of doubleword regs available on this hardware
ARMVersion            # 1 ; ARM architecture version from MIDR. <7=ARMv5, 7=ARMv6, &F=ARMv7
VFPVersion            # 1 ; VFP subarchitecture field from FPSID
CPEnabledFlag         # 1 ; Nonzero if CP access is enabled
OldHandler            # 4 ; Original undefined instruction handler
UndefinedHandler      # 4 ; Undefined instruction handler code
LazyHandler           # 8*4 ; Code to call the lazy handler
ChangeContext         # 4 ; Address of SWI_ChangeContext
CurrentRoutine        # 4 ; OldHandler or LazyHandler
SoftFPSID             # 4 ; FPSID
SoftMVFR0             # 4 ; MVFR0
SoftMVFR1             # 4 ; MVFR1
                      
WSSize                * :INDEX: @@

; Undefined instruction handler code - gets copied into workspace
UndefinedHandlerTemplate
        LDR     pc, UndefinedHandlerTemplateEnd+4 ; Branch to address in CurrentRoutine
        SUB     lr, lr, #4 ; LazyHandler starts here
        STMDB   r13!,{r0-r1,wp,lr}
        ADR     wp, UndefinedHandlerTemplate-:INDEX:UndefinedHandler ; Get wp
        MOV     r1, #0
        LDR     r0, LazyContext
        MOV     lr, pc
        LDR     pc, ChangeContext ; Reuse main code for simplicity
        LDMIA   r13!,{r0-r1,wp,pc}^ ; Restart aborting instruction
UndefinedHandlerTemplateEnd

        ASSERT  LazyHandler-UndefinedHandler+?LazyHandler = UndefinedHandlerTemplateEnd-UndefinedHandlerTemplate
        ASSERT  CurrentRoutine-UndefinedHandler=UndefinedHandlerTemplateEnd-UndefinedHandlerTemplate+4

; Module code

InitModule
        Entry   "r7-r11"
 [ standalone
        ADRL    R0,ResourceFSFiles
        SWI     XResourceFS_RegisterFiles
        EXIT    VS
 ]
        MOV     r0, #ModHandReason_Claim
        LDR     r3, =WSSize
        SWI     XOS_Module
        EXIT    VS
        STR     r2, [r12]
        MOV     r12, r2

        MOV     r0, #0
10      SUBS    r3, r3, #4
        STR     r0, [r12, r3]
        BNE     %BT10

        ; Check for multiple instantiation; must be done after workspace setup
        CMP     r11, #0
        ADRNEL  r0, ErrorBlock_VFPSupport_Instanced
        BLNE    ReturnError_LR
        BVS     %FT20

        BL      CheckHardware

        BLVC    InstallHandler

20
        EXIT    VC
        Push    "r0"
        BL      CloseMessages
 [ standalone
        ADRL    R0,ResourceFSFiles
        SWI     XResourceFS_DeregisterFiles
 ] 
        Pull    "r0"
        SETV
        EXIT

CheckHardware
        Push    "lr"
        ; Check for any VFP hardware
        ; First step is to check what ARM architecture we're on
        MRC     p15,0,r0,c0,c0,0 ; read main id register
        ANDS    r1, r0, #&F000
        TEQNE   r1, #&7000
        BEQ     NoVFP ; ARM7 or below
        AND     r0, r0, #&F0000
        CMP     r0, #&30000
        BLT     NoVFP ; pre ARMv5
        MOV     r0, r0, LSR #16
        STRB    r0, ARMVersion

        ; Interrupts off for the remainder of the tests
        MRS     r1, CPSR
        ORR     r2, r1, #I32_bit
        MSR     CPSR_c, r2

        CMP     r0, #&7
        BLT     IsARMv5
        ; ARMv6 and above have the coprocessor access control register, which allows us to poll for CP presence
        MRC     p15,0,r2,c1,c0,2 ; read CPACR
        ORR     r3, r2, #&F<<20
        MCR     p15,0,r3,c1,c0,2
        MRC     p15,0,r3,c1,c0,2 ; read it back to get status
        AND     r4, r3, #&F<<20
        CMP     r4, #&F<<20
        MCRNE   p15,0,r2,c1,c0,2 ; restore original CPACR
        BNE     NoVFP_v6v7
        CMP     r0, #&F
        BNE     %FT10
        ; Both ARMv6 and ARMv7 identify themselves with &F in the main ID register
        ; To work out which is which, it looks like the only (or easiest) way is to check the cache type register
        MRC     p15, 0, r4, c0, c0, 1
        TST     r4, #&80000000
        MOVEQ   r0, #&7
10
        ; VFP coprocessors exist and are now enabled, read FPSID
        myISB   ,r4 ; ISB to ensure that the coprocessors really are enabled
        myVMRS  ,r4, FPSID
        B       GotFPSID

IsARMv5
        ; No CPACR on ARMv5, so only way we can test for VFP is to try reading FPSID and seeing if we trigger an abort
        ; TODO - There are some extra things, e.g. ARMv5 CPACR as found on XScale
        Push    "r1-r2"
        LDR     r0, =&101
        ADR     r1, ARMv5Und
        SWI     XOS_ClaimProcessorVector
        Pull    "r1-r2",VS
        MSRVS   CPSR_c, r1
        Pull    "pc",VS

        MOV     r5, #0
        myVMRS  ,r4, FPSID

        MOV     r0, #1
        ADR     r2, ARMv5Und
        SWI     XOS_ClaimProcessorVector
        Pull    "r1-r2"
        MSRVS   CPSR_c, r1
        Pull    "pc",VS
        ; r5 will be nonzero if we aborted
        CMP     r5, #0
        LDREQB  r0, ARMVersion
        BEQ     GotFPSID
NoVFP_v6v7
        MSR     CPSR_c, r1 ; restore interrupts
NoVFP
        ADRL    r0, ErrorBlock_VFPSupport_NoHW
        B       ReturnError_Stacked

ARMv5Und
        MOV     r5, #1
        MOVS    pc, lr

GotFPSID
        ; r0 = ARM version
        ; r1 = old PSR
        ; r2 = old CPACR if >ARMv5
        ; r4 = FPSID
        TST     r4, #1:SHL:23 ; Is the software bit set?
        BNE     BadVFP
        ; The FPSID format has changed a bit between ARMv5, v6 and v7
        CMP     r0, #&7
        BLT     CheckFPSIDv5
        BEQ     CheckFPSIDv6
        ; v7 version. Must be VFPv3 or above to be valid, but we currently don't allow anything other than vanilla VFPv3 with null subarchitecture due to lack of support code
        AND     r3, r4, #&7F0000
        CMP     r3, #&30000
        BNE     BadVFP
        B       GoodVFP

CheckFPSIDv5
CheckFPSIDv6
        ; v5/v6 version. Should be VFPv1 or VFPv2.
        AND     r3, r4, #&F0000
        CMP     r3, #&20000
        CMPNE   r3, #&10000
        BNE     BadVFP
        ; Currently only support implementations that use FSTMX/FLDMX standard format 1 (i.e. we can just use VLDM/VSTM)
        TST     r4, #3:SHL:21
        BNE     BadVFP
        B       GoodVFP

BadVFP
NoMVFR ; Currently we don't cope with situations where the MVFR registers are absent
        ; Restore CPACR if ARMv6+
        CMP     r0, #&7
        MCRGE   p15,0,r2,c1,c0,2
        myISB   GE,r0 ; Deal with pipelined CP15 ops on ARMv6+. TODO - ARMv5
        ; Restore interrupts
        MSR     CPSR_c, R1
        ADRL    r0, ErrorBlock_VFPSupport_BadHW
        B       ReturnError_Stacked

HasMVFRTable
        DCW     &FFF0 ; FPSID mask (part & variant fields)
        DCW     &20B0 ; VFP11
        DCW     0
        ALIGN

GoodVFP
        ; r0 = ARM version
        ; r1 = old PSR
        ; r2 = old CPACR if >ARMv5
        ; r3 = FPSID subarchitecture field
        ; r4 = FPSID
        ; Read MVFR0/1 if they're available
        CMP     r3, #&2<<16
        BGE     HasMVFR ; Subarchitecture 2+ is required to have them
        ; In subarchitecture 1 and below, the registers are optional.
        ; E.g. VFP9-S doesn't have them but VFP11 does, even though they're both subarchitecture 1/VFPv2.
        ; Search through a list of VFP variants which are known to contain the registers
        ADR     r7, HasMVFRTable
        LDRH    r8, [r7], #2
        AND     r8, r8, r4
10
        LDRH    r9, [r7], #2
        CMP     r9, #0
        BEQ     NoMVFR
        CMP     r9, r8
        BEQ     HasMVFR
        B       %BT10

HasMVFR
        myVMRS  ,r5,MVFR0
        myVMRS  ,r6,MVFR1
        ; Done for now, make sure VFP access is disabled
        ; For the moment we just disable access via the FPEXC.EN bit. This will disable everything except VMSR & VMRS from privileged modes
        MOV     r7, #0
        myVMSR  ,FPEXC, r7
        ; Restore interrupts
        MSR     CPSR_c, R1
        ; Store our results
        ; TODO - Calculate fake MVFR0/MVFR1 values where necessary
        MOV     r3, r3, LSR #16
        STRB    r3, VFPVersion
        STR     r4, SoftFPSID
        STR     r5, SoftMVFR0
        STR     r6, SoftMVFR1
        ; Work out how many registers there are
        ; Assumes we've faked up MVFR0!
        AND     r5, r5, #&F
        CMP     r5, #2
        MOVEQ   r3, #32
        MOVNE   r3, #16
        STRB    r3, NumVFPRegs
        Pull    "pc"

InstallHandler
        Entry
        ; Copy the handler code over
        ADR     r0, UndefinedHandlerTemplate
        ADR     r1, UndefinedHandler
        ASSERT  UndefinedHandlerTemplateEnd-UndefinedHandlerTemplate = 9*4
        LDMIA   r0, {r2-r10}
        ASSERT  ChangeContext = UndefinedHandler+(UndefinedHandlerTemplateEnd-UndefinedHandlerTemplate)
        ADR     r11, SWI_ChangeContext
        STMIA   r1, {r2-r11}
        ORR     r0, r0, #1
        ADD     r2, r1, #UndefinedHandlerTemplateEnd-UndefinedHandlerTemplate
        SWI     XOS_SynchroniseCodeAreas
        ; Install the handler. Interrupts disabled to ensure we don't get caught before we set up CurrentRoutine.
        MRS     r4, CPSR
        ORR     r3, r4, #I32_bit
        MSR     CPSR_c, r3
        LDR     r0, =&101        
        SWI     XOS_ClaimProcessorVector
        STRVC   r1, OldHandler
        STRVC   r1, CurrentRoutine
        MSR     CPSR_c, r4
        EXIT

           GBLA    BCDVersion
BCDVersion SETBCD  Module_Version*100

KillModule
        LDR     wp, [r12]
        MOV     r6, lr

        ; Warn our clients that we're about to die
        ; TODO - If ClaimProcessorVector fails, our clients will still think we're dead
        ADR     r0, Module_BaseAddr
        MOV     r1, #Service_ModulePostFinal
        ADRL    r2, ModuleTitle
        MOV     r3, #0 ; We only allow one instance
        LDR     r4, =BCDVersion
        SWI     XOS_ServiceCall

        ; Remove undefined instruction handler
        MOV     r0, #1
        LDR     r1, OldHandler
        ADR     r2, UndefinedHandler
        SWI     XOS_ClaimProcessorVector
        MOVVS   pc, r6 ; Improperly nested handlers

        ; Disable VFP
        BL      DisableCPAccess

        ; TODO - Disable in CPACR as well?

        ; TODO - Free any contexts?

        BL      CloseMessages

 [ standalone
        ADRL    R0,ResourceFSFiles
        SWI     XResourceFS_DeregisterFiles   ; ignore errors
 ]

        CLRV
        MOV     pc, r6

SWIEntry
        LDR     wp, [r12]
        CMP     r11, #(EndOfJumpTable-JumpTable)/4
        ADDLO   pc, pc, r11, LSL #2
        B       UnknownSWI
JumpTable
        B       SWI_CheckContext
        B       SWI_CreateContext
        B       SWI_DestroyContext
        B       SWI_ChangeContext
        B       SWI_ExamineContext
        B       SWI_FastAPI
        B       SWI_ActiveContext
        B       SWI_Version
        B       SWI_Features
EndOfJumpTable

UnknownSWI
        ADRL    r0, ErrorBlock_ModuleBadSWI
        B       ReturnError_LR

SWI_CheckContext
;  in: R0 = flags
;           b0 = user mode flag (0=user mode access not required, 1=user mode access required)
;           b1 = application space flag (0=not in application space, 1=in application space)
;           b30 = ignored (for CreateContext compatability)
;           b31 = ignored (for CreateContext compatability)
;           other bits reserved, sbz
;      R1 = number of doubleword registers required (1-32)
; out: R0 = required size of context save area
        ; Validate flags & reg count
        CMP     r1,#0
        BLE     %FT10
        ; Note that this next bit relies on C being set by the above CMP
        ASSERT  VFPSupport_Context_UserMode+VFPSupport_Context_AppSpace+VFPSupport_CreateContext_LazyActivate+VFPSupport_CreateContext_Activate >= &80000000 ; Must clear sign bit
        BICS    r0,r0,#VFPSupport_Context_UserMode+VFPSupport_Context_AppSpace+VFPSupport_CreateContext_LazyActivate+VFPSupport_CreateContext_Activate
        LDRLSB  r0,NumVFPRegs
        CMPLS   r1,r0
        MOVLS   r0,#Context_RegDump
        ADDLS   r0,r0,r1,LSL #3
        MSRLS   CPSR_f,#Z_bit ; Clear V while retaining LS state
        MOVLS   pc,lr
10
        ADRL    r0, ErrorBlock_VFPSupport_FeatureUnavailable
        B       ReturnError_LR

SWI_CreateContext
;  in: R0 = flags
;           b0 = user mode flag (0=user mode access not required, 1=user mode access required)
;           b1 = application space flag (0=not in application space, 1=in application space)
;           b30 = lazy activation flag (0=leave context inactive, 1=activate lazily. Supercedes b31.)
;           b31 = activate flag (0=leave context inactive, 1=activate now)
;           other bits reserved, sbz
;      R1 = number of doubleword registers required (1-32)
;      R2 = pointer to word-aligned context save area of the size indicated by VFPSupport_CheckContext, or 0 if VFPSupport is to allocate memory itself
;      R3 = FPSCR value to initialise context with
; out: R0 = context pointer
;      R1 = previously active context ID/preserved
        Push    "r0-r3,lr"
        CMP     r2,#0
        BIC     r0,r0,#VFPSupport_CreateContext_LazyActivate+VFPSupport_CreateContext_Activate ; Clear unwanted flags
        BNE     %FT10
        BL      SWI_CheckContext
        MOVVC   r3,r0
        MOVVC   r0,#ModHandReason_Claim
        SWIVC   XOS_Module
        ADDVS   sp,sp,#4
        Pull    "r1-r3,pc",VS
        LDR     r0,[sp]
        ORR     r0,r0,#VFPSupport_Context_VFPMemory
        LDR     r3,[sp,#12]
10
        ; Initialise context contents
        ASSERT  Context_Flags = 0
        ASSERT  Context_NumRegs = 4
        ASSERT  Context_FPSCR = 8
        ASSERT  Context_FPEXC = 12
        MOV     lr, #0 ; null FPEXC == no registers to restore
        STMIA   r2,{r0,r1,r3,lr}
        ; Did they want the context activating?
        Pull    "r1" ; Actually R0 on input
        MOV     r0,r2
        CLRV
        TST     r1,#VFPSupport_CreateContext_LazyActivate+VFPSupport_CreateContext_Activate ; Check activation flags
        Pull    "r1-r3,pc",EQ ; Exit if context doesn't need activating
        STR     r0,[sp]
        ASSERT  VFPSupport_CreateContext_Activate = &80000000
        MOVMI   r1,#0 ; Nonlazy activation
        MOVPL   r1,#VFPSupport_ChangeContext_Lazy ; Lazy activation
        BL      SWI_ChangeContext
        ; Assumes that ChangeContext won't return an error
        MOV     r1,r0
        Pull    "r0,r2-r3,pc"

SWI_DestroyContext
;  in: R0 = context to destroy
;      R1 = context to activate if R0 was the active context
; out: R0 = context that's now active
        Entry   "r1-r4"
        MRS     r4, CPSR
        ORR     r3, r4, #I32_bit
        MSR     CPSR_c, r3
        ; Dereference R0
        ; TODO - Improve this so it doesn't save the context we're about to delete
        ; Would need to make sure ActiveContext, LazyContext, coprocessor access & CurrentRoutine all stay in sync
        MOV     r2, r0
        CMP     r0, r1
        MOVEQ   r1, #0 ; Don't activate R1 if we're destroying it!
        LDR     r0, LazyContext
        CMP     r0, r2
        MOVEQ   r0, r1 ; if dying context is active/lazily active, activate user's R1
        LDRNE   r1, ActiveContext
        CMPNE   r1, r2 ; if dying context is really active, activate LazyContext
        MOVEQ   r1, #0 ; Activate desired context non-lazily
        STREQ   r1, [r2, #Context_NumRegs] ; ChangeContext will attempt to save the context we're deleting. But we can make things a little bit faster by skipping the main FP registers.
        BLEQ    SWI_ChangeContext
        ; Ignore error?
        MSR     CPSR_cf, r4 ; Restore interrupts
        LDR     r1, [r2, #Context_Flags]
        TST     r1, #VFPSupport_Context_VFPMemory
        MOV     r0, #ModHandReason_Free
        SWINE   XOS_Module
        CLRV    ; Ignore error?
        LDR     r0, LazyContext
        EXIT

SWI_ChangeContext
;  in: R0 = context to activate
;      R1 = flags
;           b0 = lazy activation (0=activate now, 1=use lazy activation)
;           b1 = application space changing (0=no change, 1=changing)
;           other bits reserved, sbz
; out: R0 = previously active context
; TODO - rewrite to use state machine based around array of function pointers?
; TODO - make use of user mode flag
        Entry   "r1-r4"
        MRS     r4, CPSR
        ORR     r3, r4, #I32_bit
        MSR     CPSR_c, r3
        ; If application space is being moved, and ActiveContext is in app
        ; space, clear the lazy activation flag to ensure that the context
        ; gets flushed out of the system 
        LDR     r3, ActiveContext
        TST     r1, #VFPSupport_ChangeContext_AppSpace
        BEQ     %FT10
        CMP     r3, #0
        LDRNE   r2, [r3, #Context_Flags]
        ASSERT  VFPSupport_Context_AppSpace = VFPSupport_ChangeContext_Lazy*2
        BICNE   r1, r1, r2, LSR #1
10
        LDR     r2, LazyContext
        TST     r1, #VFPSupport_ChangeContext_Lazy
        STR     r0, LazyContext
        MOV     r1, r3
        BEQ     ChangeContext_Now
        ; Lazy activation
        CMP     r2, r0
        BEQ     ChangeContext_Exit_IRQ_R0 ; Already (lazily) active
        CMP     r0, #0
        LDREQ   r0, OldHandler
        BEQ     ChangeContext_Exit_IRQ_R2_SetHandler ; Lazy deactivation - clear CurrentRoutine and disable CP access
        ; Else some form of lazy activation. If r0 is actually active, enable CP access, else disable
        CMP     r0, r1
        ADRNE   r0, LazyHandler
        BNE     ChangeContext_Exit_IRQ_R2_SetHandler ; Enable lazy handler
        BL      EnableCPAccess
        LDR     r1, OldHandler ; Disable lazy handler, it's no longer needed
        STR     r1, CurrentRoutine
        B       ChangeContext_Exit_IRQ_R0
ChangeContext_Now
        ; Nonlazy activation
        ; Start by disabling the lazy handler
        LDR     lr, OldHandler
        CMP     r0, r1
        STR     r0, ActiveContext
        CMPEQ   r0, #0
        STR     lr, CurrentRoutine
        BEQ     ChangeContext_Exit_IRQ_R2_Disable ; We're turning it off and it's already off, so do nothing
        BL      EnableCPAccess
        CMP     r0, r1
        BEQ     ChangeContext_Exit_IRQ_R2_MaybeDisable ; Context is already loaded
        ; Save r1 if necessary
        CMP     r1, #0
        BLNE    SaveContext_R1
        ; Load r0 if necessary
        CMP     r0, #0
        BLNE    LoadContext_R0
ChangeContext_Exit_IRQ_R2_MaybeDisable
        CMP     r0, #0
        BLEQ    DisableCPAccess
ChangeContext_Exit_IRQ_R2
        MOV     r0, r2
ChangeContext_Exit_IRQ_R0
        MSR     CPSR_c, r4
        CLRV
        EXIT

ChangeContext_Exit_IRQ_R2_SetHandler
        STR     r0, CurrentRoutine
ChangeContext_Exit_IRQ_R2_Disable
        BL      DisableCPAccess
        MOV     r0, r2
        MSR     CPSR_c, r4
        CLRV
        EXIT

SWI_ExamineContext
;  in: R0 = context
;      R1 = flags
;           b0 = Serialise context
; out: R0 = flags:
;           b0 = User mode flag (0=user mode access not required, 1=user mode access required)
;           b1 = application space flag (0=not in application space, 1=in application space)
;           b29 = context is awaiting lazy activation (1=yes, 0=no)
;           b30 = context status registers are active (1=active, 0=saved)
;           b31 = memory allocation method (0=user allocated, 1=VFPSupport allocated)
;      R1 = number of doubleword registers (may be greater than number requested upon context creation)
;      R2 = register status. bit n is 1 if doubleword register is active, 0 if saved.
;      R3 = pointer to dump format descriptor block
;      R4 = context size
        MOVS    r4, r0
        BEQ     %FT20
        TST     r1, #VFPSupport_ExamineContext_Serialise
        BEQ     %FT10
        ; Serialise it if it's active
        ; TODO - Do something a bit more sophisticated!
        LDR     r2, ActiveContext
        CMP     r2, r0
        BNE     %FT10
        MOV     r3, lr
        MOV     r0, #0
        MOV     r1, #0
        BL      SWI_ChangeContext ; Deactivate it
        BLVC    SWI_ChangeContext ; Reactivate it
        MOVVS   pc, r3
        MOV     r0, r2
        MOV     lr, r3
10
        ; Check the FPEXC value in the dump as a method of determining which format of descriptor block we should use
        ; This won't work too well if programs use this as a method of inserting fake exceptions!
        LDR     r2, [r0, #Context_FPEXC]
        ASSERT  FPEXC_EX = N_bit
        ASSERT  FPEXC_FP2V = V_bit
        MSR     CPSR_f, r2
        ADRGE   r3, FormatDescriptorBlock_FPINST2 ; EX=1 FP2V=1 (EX=1 enforced by PL check below)
        ADRLT   r3, FormatDescriptorBlock_FPINST ; EX=1 FP2V=0 (EX=1 enforced by PL check below)
        ADRPL   r3, FormatDescriptorBlock_NullSubarch ; EX=0
        ; Compute LazyActivation flag
        LDR     r2, LazyContext
        CMP     r4, r2
        LDR     r0, [r4, #Context_Flags]
        ORREQ   r0, r0, #VFPSupport_Context_LazyActivation
        ; Compute StatusRegsActive flag and R2
        LDR     r2, ActiveContext
        CMP     r4, r2
        BICEQ   r0, r0, #VFPSupport_Context_LazyActivation ; If this context is active, then it shouldn't be waiting for lazy activation
        MOVEQ   r2, #1
        LDR     r1, [r4, #Context_NumRegs]
        MOVNE   r2, #0
        ORREQ   r0, r0, #VFPSupport_Context_StatusRegsActive
        RSBEQ   r2, r2, r2, LSL r1
        ; Compute R4
        MOV     r4, #Context_RegDump
        ADD     r4, r4,r1,LSL #3
        CLRV
        MOV     pc, lr
20
        ADRL    r0, ErrorBlock_VFPSupport_BadContext
        B       ReturnError_LR
        
FormatDescriptorBlock_FPINST2
        DCD     VFPSupport_Field_FPINST2 + Context_FPINST2<<16
FormatDescriptorBlock_FPINST
        DCD     VFPSupport_Field_FPINST + Context_FPINST<<16
FormatDescriptorBlock_NullSubarch
        DCD     VFPSupport_Field_FPSCR + Context_FPSCR<<16
        DCD     VFPSupport_Field_FPEXC + Context_FPEXC<<16
        DCD     VFPSupport_Field_RegDump + Context_RegDump<<16
        DCD     -1 

SWI_FastAPI
; out: R0 = Workspace pointer to pass in R12
;      R1 = CheckContext function pointer
;      R2 = CreateContext function pointer
;      R3 = DestroyContext function pointer
;      R4 = ChangeContext function pointer
        MOV     r0, wp
        ADR     r1, SWI_CheckContext
        ADR     r2, SWI_CreateContext
        ADR     r3, SWI_DestroyContext
        ADR     r4, SWI_ChangeContext
        CLRV
        MOV     pc, lr

SWI_ActiveContext
; out: R0 = currently active context ID (or ID of context pending lazy activation)
        LDR     r0, LazyContext
        CLRV
        MOV     pc, lr

SWI_Version
; out: R0 = Module version number * 100
        MOV     r0, #Module_Version
        CLRV
        MOV     pc, lr

SWI_Features
; in: R0 = Reason code
        CMP     r0, #(EndOfFeaturesJumpTable-FeaturesJumpTable)/4
        ADDLO   pc, pc, r0, LSL #2
        B       UnknownFeature
FeaturesJumpTable
        B       Feature_SystemRegs
EndOfFeaturesJumpTable

UnknownFeature
        ADRL    r0, ErrorBlock_VFPSupport_BadFeature
        B       ReturnError_LR

Feature_SystemRegs
;  in: R0 = 0
; out: R0 = FPSID
;      R1 = MVFR0
;      R2 = MVFR1
        ASSERT SoftMVFR0=SoftFPSID+4
        ASSERT SoftMVFR1=SoftMVFR0+4
        ADR    r0, SoftFPSID
        LDMIA  r0, {r0-r2}
        CLRV
        MOV    pc, lr

EnableCPAccess
        ; Enable VFP CP access
        Entry
        LDRB    lr,CPEnabledFlag
        EORS    lr,lr,#255
        EXIT    EQ
        STRB    lr,CPEnabledFlag
        myVMRS  ,lr,FPEXC
        ORR     lr,lr,#FPEXC_EN
        myVMSR  ,FPEXC,lr
        EXIT

DisableCPAccess
        ; Disable VFP CP access
        Entry
        LDRB    lr,CPEnabledFlag
        EORS    lr,lr,#255
        EXIT    NE
        STRB    lr,CPEnabledFlag
        myVMRS  ,lr,FPEXC
        BIC     lr,lr,#FPEXC_EN
        myVMSR  ,FPEXC,lr
        EXIT

SaveContext_R1
        ; Save active context to R1
        ; This should work with VFPv2/3, not sure about VFPv1
        Entry   "r2-r3"
        myVMRS  ,r2, FPEXC
        ASSERT  FPEXC_EX = N_bit
        ASSERT  FPEXC_FP2V = V_bit
        MSR     CPSR_f, r2
        STR     r2, [r1,#Context_FPEXC]
        BPL     %FT10
        ; Must store FPINST
        myVMRS  ,lr, FPINST
        STR     lr, [r1,#Context_FPINST]
        ; Might need to store FPINST2
        myVMRS  VS,lr, FPINST2
        STRVS   lr, [r1,#Context_FPINST2]
        ; Must clear exception bits before we're able to store the rest
        BIC     r2, r2, #FPEXC_EX+FPEXC_FP2V
        myVMSR  ,FPEXC,r2
10
        LDR     lr, [r1,#Context_NumRegs]
        myVMRS  ,r2, FPSCR
        ADD     r3, r1, #Context_RegDump
        STR     r2, [r1,#Context_FPSCR]
        ADD     pc, pc, lr, LSL #4
        NOP
        EXIT ; Don't malfunction if the context we're saving has 0 regs. Used by DeleteContext to make things a bit faster.
        NOP
        NOP
        NOP

        ; Generate VSTM jump table
        GBLA    count
count   SETA    1
        WHILE   count < 33
       [ count <= 16
        DCI     &EC830B00 + count*2 ; VSTMIA r3,{D0-Dn}
        EXIT
        NOP
        NOP
       |
        DCI     &ECA30B20 ; VSTMIA r3!,{D0-D15} (we can only STM 16 at once)
        DCI     &ECC30B00 + (count-16)*2 ; VSTMIA r3,{D16-Dn}
        EXIT
        NOP
       ]
count   SETA    count+1
        WEND

LoadContext_R0
        ; Load context from R0
        ; This should work with VFPv2/3, not sure about VFPv1
        Entry   "r2-r3"
        LDR     r2, [r0,#Context_FPEXC]
        ASSERT  FPEXC_EX = N_bit
        ASSERT  FPEXC_FP2V = V_bit
        ASSERT  FPEXC_EN = Z_bit ; EN bit will be clear if there are no data registers to restore (actually, entire FPEXC will be clear)
        MSR     CPSR_f, r2
        BIC     r3, r2, #FPEXC_EX+FPEXC_FP2V ; Don't set the exception bits yet
        myVMSR  EQ,FPEXC, r3 ; Don't write FPEXC if EN isn't set
        BPL     %FT10
        ; Must restore FPINST
        LDR     lr, [r0,#Context_FPINST]
        myVMSR  ,FPINST, lr
        ; Might need to restore FPINST2
        LDRVS   lr, [r0,#Context_FPINST2]
        myVMSR  VS,FPINST2, lr
10
        LDR     r3, [r0,#Context_FPSCR]
        LDREQ   lr, [r0,#Context_NumRegs]
        myVMSR  ,FPSCR, r3 ; Will only work on first use of new context if we already have CP access (which we currently will)
        ADDEQ   r3, r0, #Context_RegDump
        ADDEQ   pc, pc, lr, LSL #4
        ; If we're still here, we need to reset FPEXC to default and load 0 regs
        MOV     r2, #FPEXC_EN
        myVMSR  ,FPEXC, r2
        EXIT
        NOP
        NOP
        
        ; Generate VLDM jump table
        GBLA    count
count   SETA    1
        WHILE   count < 33
       [ count <= 16
        DCI     &EC930B00 + count*2 ; VLDMIA r3,{D0-Dn}
        myVMSR  MI,FPEXC, r2 ; Set exception bits now that all registers are restored
        EXIT
        NOP
       |
        DCI     &ECB30B20 ; VLDMIA r3!,{D0-D15} (we can only LDM 16 at once)
        DCI     &ECD30B00 + (count-16)*2 ; VLDMIA r3,{D16-Dn}
        myVMSR  MI,FPEXC, r2
        EXIT
       ]
count   SETA    count+1
        WEND

        LTORG

        [ standalone
ResourceFSFiles
        ResourceFile    $MergedMsgs, Resources.VFPSupport.Messages
        DCD     0
        ]

        END
@


1.5
log
@Add initial VFPv1/VFPv2 support
Detail:
  s/Module:
  - CheckHardware can now correctly determine that the ARM1176JZF-S is ARMv6, not ARMv7
  - Added initial support for VFPv1/v2; currently only supports implementations that use FSTMX/FLDMX standard format 1, and for which we know we can read the MVFR0/MVFR1 registers. I.e. only VFP11 supported at present.
  - Fixed null pointer dereference in ExamineContext when examining the active context
Admin:
  Tested on Raspberry Pi with high processor vectors
  Note there is no support code present, so using the coprocessor outside of RunFast mode will result in aborts.


Version 0.04. Tagged as 'VFPSupport-0_04'
@
text
@d756 2
a757 2
        myVMRS  ,r2, FPINST
        STR     r2, [r1,#Context_FPINST]
d759 5
a763 2
        myVMRS  VS,r2, FPINST2
        STRVS   r2, [r1,#Context_FPINST2]
d803 2
a804 1
        myVMSR  EQ,FPEXC, r2 ; Don't write FPEXC if EN isn't set
d807 2
a808 2
        LDR     r2, [r0,#Context_FPINST]
        myVMSR  ,FPINST, r2
d810 2
a811 2
        LDRVS   r2, [r0,#Context_FPINST2]
        myVMSR  VS,FPINST2, r2
d813 1
d815 1
a815 1
        LDR     r2, [r0,#Context_FPSCR]
a816 1
        myVMSR  ,FPSCR, r2 ; Will only work on first use of new context if we already have CP access (which we currently will)
d831 1
a833 1
        NOP
d837 1
a838 1
        NOP
@


1.4
log
@Use official error block. Disallow instantiation. Warn clients before finalising.
Detail:
  Resources/UK/Messages, s/Errors, hdr/VFPSupport - Errors now declared in public header. New/updated error messages and symbols.
  s/GetAll - Changed GET order to work with errors in header file
  s/Module - Disallow instantiation. Manually issue Service_ModulePostFinal during finalisation, to give clients slightly more warning than the kernel does.
Admin:
  Tested in OMAP3 ROM


Version 0.03. Tagged as 'VFPSupport-0_03'
@
text
@d185 8
d248 13
a260 2
CheckFPSIDv5 ; TODO
CheckFPSIDv6 ; TODO
d262 1
d271 7
d286 16
a301 1
        BLT     %FT10
a303 1
10
d311 1
a311 1
        ; TODO - Calculate fake MVFR0/MVFR1 values for pre-VFPv3
d625 1
@


1.3
log
@Rename those constants like I said I would
Detail:
  s/Module, hdr/VFPSupport - VFPSupport_Create_LazyActivate & VFPSupport_Create_Activate now renamed to ..._CreateContext_... like they were meant to have been in my last checkin
Admin:
  Tested on rev A2 BB-xM


Version 0.02. Not tagged
@
text
@d119 1
d124 1
a124 1
        BVS     %FT20
d133 6
d144 9
d217 1
a217 1
        ADRL    r0, ErrorBlock_NoVFP
d249 1
a249 1
        ADRL    r0, ErrorBlock_BadVFP
d309 3
d316 9
d392 1
a392 1
        ADRL    r0, ErrorBlock_FeatureUnavailable
d615 1
a615 1
        ADRL    r0, ErrorBlock_BadContext
d664 1
a664 1
        ADRL    r0, ErrorBlock_BadFeature
@


1.2
log
@Tweak VFPSupport API and add support for contexts stored in application space
Detail:
  s/Module, hdr/VFPSupport - New/changed features:
  - Contexts can now be flagged as being in application space if they're created with the VFPSupport_Context_AppSpace flag
  - VFPSupport_ChangeContext accepts a VFPSupport_ChangeContext_AppSpace flag, which will force the context change to occur in a nonlazy manner if the currently active context is in application space
  - VFPSupport_CreateContext accepts a VFPSupport_CreateContext_LazyActivate flag, to indicate that after creation the context should be activated lazily (unlike VFSupport_CreateContext_Activate)
  - VFPSupport_Context_Activate renamed to VFPSupport_CreateContext_Activate for clarity
  - VFPSupport_CheckContext now ignores the Activate/LazyActivate flags, so the same flag word can be passed to Check & Create
  - "Context ID" simplified to just "Context pointer", as an indiciation of the fact that I now have no plans to make VFPSupport keep a master list of extant contexts
    - This makes it legal for programs to move/copy/delete contexts as long as they've made sure that the ExamineContext doesn't indicate that any part of the context is active
  - VFPSupport_ExamineContext now returns the context size in R4 instead of the context ID
  Test/test1,ffb - Updated to work with new API
Admin:
  Tested on rev A2 BB-xM.
  VFPSupport_ExamineContext change is backwards-incompatible!


Version 0.02. Tagged as 'VFPSupport-0_02'
@
text
@d355 2
a356 2
        ASSERT  VFPSupport_Context_UserMode+VFPSupport_Context_AppSpace+VFPSupport_Context_LazyActivate+VFPSupport_Context_Activate >= &80000000 ; Must clear sign bit
        BICS    r0,r0,#VFPSupport_Context_UserMode+VFPSupport_Context_AppSpace+VFPSupport_Context_LazyActivate+VFPSupport_Context_Activate
d381 1
a381 1
        BIC     r0,r0,#VFPSupport_Context_LazyActivate+VFPSupport_Context_Activate ; Clear unwanted flags
d404 1
a404 1
        TST     r1,#VFPSupport_Context_LazyActivate+VFPSupport_Context_Activate ; Check activation flags
d407 1
a407 1
        ASSERT  VFPSupport_Context_Activate = &80000000
@


1.1
log
@Add initial version of VFPSupport module
Detail:
  Initial VFP/NEON support code for RISC OS. Features:
  * Basic detection code for determining VFP version. Should work OK on all architecture versions.
  * Provides code to perform VFP/NEON context switches
  * Context switches can be lazy or immediate
  * Context register dumps can be stored in user-allocated memory or memory allocated by VFPSupport
  * Basic APIs for examining contexts and reporting available hardware features
  * "FastAPI" that privileged code can use for context switching in order to avoid SWI call overheads
  Missing/unfinished features:
  * No VFP exception handler is present, so the module will refuse to run on anything but a VFPv3 system
  * Lazy context switching is simplistic, opting to activate the new context upon the first undefined instruction abort instead of checking to see if it was a VFP instruction that triggered the abort
  * No interface to allow debuggers to easily get their hands on a register dump following a crash
  * No code to automatically clean up contexts left behind by dying programs
  * Can't be used by FIQ handlers, or from code called by an FIQ handler
  * Currently uses an error base of 0!
  Other notes:
  * Doc/vfpversions contains some random notes about the different VFP/NEON versions
  * Test/test1,ffb is a BASIC program that tests most of the module's functionality
Admin:
  Tested on Iyonix & Beagleboard. Iyonix version exits correctly, while Beagleboard version passes all tests in the test1 script.
  Need to sort out proper error numbers, and translate the error messages.


Version 0.01. Not tagged
@
text
@d345 3
d353 4
a356 2
        BEQ     %FT10
        CMP     r0,#1
d370 2
d377 1
a377 1
; out: R0 = context ID
d381 1
a381 1
        BIC     r0,r0,#VFPSupport_Context_Activate
d404 2
a405 2
        TST     r1,#VFPSupport_Context_Activate
        Pull    "r1-r3,pc",EQ
d407 3
a409 1
        MOV     r1,#0 ; activate non-lazily
d416 3
a418 3
;  in: R0 = context ID
;      R1 = context ID to activate if R0 was the active context
; out: R0 = context ID that's now active
d448 1
a448 1
;  in: R0 = context ID to activate
d451 1
d453 1
a453 1
; out: R0 = previously active context ID
d460 11
a472 1
        LDR     r1, ActiveContext
d474 1
d528 1
a528 1
;  in: R0 = context ID
d533 1
d540 9
a548 2
;      R4 = pointer to context register dump
        CMP     r0, #0
d550 7
a556 2
        ADRL    r0, ErrorBlock_BadContext
        B       ReturnError_LR
a557 16
        TST     r1, #VFPSupport_ExamineContext_Serialise
        BEQ     %FT20
        ; Serialise it the easy way
        ; TODO - Do something a bit more sophisticated!
        Push    "r0-r1,lr"
        LDR     r1, [r0, #Context_NumRegs]
        MOV     r0, #VFPSupport_Context_Activate
        MOV     r2, #0
        MOV     r3, #0
        BL      SWI_CreateContext
        BLVC    SWI_DestroyContext
        ADDVS   sp, sp, #4
        Pull    "pc",VS
        Pull    "r0-r1,lr"
20
        MOV     r4, r0
d581 3
d586 3
@

