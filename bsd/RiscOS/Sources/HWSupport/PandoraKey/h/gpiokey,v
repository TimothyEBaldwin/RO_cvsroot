head	1.2;
access;
symbols
	PandoraKey-0_40:1.2
	PandoraKey-0_39:1.2
	PandoraKey-0_38:1.2
	PandoraKey-0_37:1.1
	PandoraKey-0_36:1.1
	PandoraKey-0_35:1.1;
locks; strict;
comment	@# @;


1.2
date	2012.12.05.01.51.44;	author jlee;	state Exp;
branches;
next	1.1;
commitid	tr2TJbLoDrcDDYuw;

1.1
date	2012.09.27.01.14.17;	author jlee;	state Exp;
branches;
next	;
commitid	2xstkR6TMK9hE6mw;


desc
@@


1.2
log
@Rewrite keyboard handling to use the new Pandora keyboard type
Detail:
  c/pandorakey, h/pandorakey:
  - Keyboard handling rewritten and simplified in the process. Instead of pretending to be a PC keyboard we now identify ourselves as a Pandora keyboard, and leave InternationalKeyboard to deal with all the keyboard layout issues. The new code means that multiple keys can now be pressed at once, and modifiers like shift & ctrl generate key press/release events properly.
  - Added support for the KeyV KeyboardRemoved reason code, to allow us to reinstate our keyboard type after all USB keyboards have been disconnected.
  - Fixed mouse handling dropping the bottom bit of the internal X/Y coords instead of preserving it
  c/gpiokey, h/gpiokey:
  - Add support for the lid sensor 'key', which registers as pressed when the lid is closed.
  - Changed the Pandora key to use the keycode of the left Windows key instead of Alt-Gr
Admin:
  Tested on Pandora
  Requires IntKey-0_95 to be useful at runtime


Version 0.38. Tagged as 'PandoraKey-0_38'
@
text
@/*
 * Copyright (c) 2012, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef GPIOKEY_H
#define GPIOKEY_H

#define GPIOKEY_BANK      3 /* Conveniently, all GPIO keys are in the same GPIO bank */
#define GPIOKEY_LEFT      GPIO_BIT(96)
#define GPIOKEY_L2        GPIO_BIT(97)
#define GPIOKEY_RIGHT     GPIO_BIT(98)
#define GPIOKEY_PANDORA   GPIO_BIT(99)
#define GPIOKEY_ALT       GPIO_BIT(100) /* Start/Alt */
#define GPIOKEY_A         GPIO_BIT(101)
#define GPIOKEY_L1        GPIO_BIT(102)
#define GPIOKEY_DOWN      GPIO_BIT(103)
#define GPIOKEY_CTRL      GPIO_BIT(104) /* Select/Ctrl */
#define GPIOKEY_R1        GPIO_BIT(105)
#define GPIOKEY_X         GPIO_BIT(106)
#define GPIOKEY_R2        GPIO_BIT(107)
#define GPIOKEY_LID       GPIO_BIT(108) /* Lid sensor */
#define GPIOKEY_Y         GPIO_BIT(109)
#define GPIOKEY_UP        GPIO_BIT(110)
#define GPIOKEY_B         GPIO_BIT(111)
#define GPIOKEY_MASK      0xFFFF /* All GPIOs are sequential */
#define GPIOKEY_ACTIVEHIGH (GPIOKEY_ALT)
#define GPIOKEY_SPECIAL_L1R1 (1<<16)

extern void gpiokey_init(void);
extern void gpiokey_shutdown(void);
extern void gpiokey_reset(void);
extern void gpiokey_update(void);

#endif
@


1.1
log
@Add support for nubs + GPIO keys. Tidy up a few bits.
Detail:
  c/gpio, h/gpio - General GPIO handling code
  c/gpiokey, h/gpiokey - Code for handling the GPIO-attached keys (gamepad buttons), to emulate some extra keyboard keys
  c/nubs, h/nubs - Code for handling the analogue nubs, to emulate mouse input
  c/pandorakey, h/pandorakey - Moved data arrays to C file to avoid multiply defined symbols when header is #included elsewhere. Changed to use exported definitions for key & vector numbers instead of local definitons. Removed from the keyboard matrix handling the bits which are now handled by the nubs & GPIO keys. Use OS_IICOp for IIC transfers to ensure register reads don't get interrupted by other transfers.
  Makefile - Added new files
Admin:
  Tested on Pandora


Version 0.35. Tagged as 'PandoraKey-0_35'
@
text
@d49 1
a49 1
#define GPIOKEY_ACTIVEHIGH (GPIOKEY_ALT | GPIOKEY_LID)
@

