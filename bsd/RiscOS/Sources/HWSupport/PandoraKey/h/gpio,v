head	1.1;
access;
symbols
	PandoraKey-0_40:1.1
	PandoraKey-0_39:1.1
	PandoraKey-0_38:1.1
	PandoraKey-0_37:1.1
	PandoraKey-0_36:1.1
	PandoraKey-0_35:1.1;
locks; strict;
comment	@# @;


1.1
date	2012.09.27.01.14.16;	author jlee;	state Exp;
branches;
next	;
commitid	2xstkR6TMK9hE6mw;


desc
@@


1.1
log
@Add support for nubs + GPIO keys. Tidy up a few bits.
Detail:
  c/gpio, h/gpio - General GPIO handling code
  c/gpiokey, h/gpiokey - Code for handling the GPIO-attached keys (gamepad buttons), to emulate some extra keyboard keys
  c/nubs, h/nubs - Code for handling the analogue nubs, to emulate mouse input
  c/pandorakey, h/pandorakey - Moved data arrays to C file to avoid multiply defined symbols when header is #included elsewhere. Changed to use exported definitions for key & vector numbers instead of local definitons. Removed from the keyboard matrix handling the bits which are now handled by the nubs & GPIO keys. Use OS_IICOp for IIC transfers to ensure register reads don't get interrupted by other transfers.
  Makefile - Added new files
Admin:
  Tested on Pandora


Version 0.35. Tagged as 'PandoraKey-0_35'
@
text
@/*
 * Copyright (c) 2012, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef GPIO_H
#define GPIO_H

/* Register offsets */
#define GPIO_CTRL 0x30
#define GPIO_OE 0x34
#define GPIO_DATAIN 0x38
#define GPIO_DATAOUT 0x3C
#define GPIO_CLEARDATAOUT 0x90
#define GPIO_SETDATAOUT 0x94

#define GPIO_BANK(x) (x>>5)
#define GPIO_BIT(x) (1<<(x&31))

extern uint32_t gpio_banks[6];

extern _kernel_oserror *gpio_init(void);

static inline void gpio_write(uint32_t bank,uint32_t reg,uint32_t val)
{
  volatile uint32_t *p = (volatile uint32_t *) (gpio_banks[bank]+reg);
  *p = val;
}

static inline uint32_t gpio_read(uint32_t bank,uint32_t reg)
{
  volatile uint32_t *p = (volatile uint32_t *) (gpio_banks[bank]+reg);
  return *p;
}

void gpio_atomic_update(uint32_t bank,uint32_t reg,uint32_t eor,uint32_t and);

#endif
@
