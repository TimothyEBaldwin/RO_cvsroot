head	1.1;
branch	1.1.1;
access;
symbols
	ZeroPain-0_08:1.1.1.1
	ZeroPain-0_07:1.1.1.1
	ZeroPain-0_06:1.1.1.1
	ZeroPain-0_05:1.1.1.1
	ZeroPain-0_04:1.1.1.1
	ZeroPain-0_03:1.1.1.1
	ZeroPain-0_02:1.1.1.1
	ZeroPain-0_01:1.1.1.1
	Vendor:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2015.07.01.21.44.02;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	a7idPnOv6AQc3Dry;

1.1.1.1
date	2015.07.01.21.44.02;	author jlee;	state Exp;
branches;
next	;
commitid	a7idPnOv6AQc3Dry;


desc
@@



1.1
log
@Initial revision
@
text
@/*
 * Copyright (c) 2015, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "Interface/HighFSI.h"

#include "config.h"
#include "log.h"
#include "modhead.h"


_kernel_oserror *config_read(const char *cmd_tail)
{
	/* TODO: Implement config file?
	   For now we just allow the config location to be specified */
	if (cmd_tail && cmd_tail[0])
	{
		int len = 0;
		while ((*cmd_tail > ' ') && (len < sizeof(log_file)-1))
		{
			log_file[len++] = *cmd_tail++;
		}
		log_file[len++] = 0;
	}
	else
	{
		/* No path specified, try root of boot drive */
		char path[256 - sizeof(Module_Title)];
		if (!_swix(OS_FSControl,_INR(0,5),FSControl_CanonicalisePath,"<Boot$Dir>",path,NULL,NULL,sizeof(path)))
		{
			char *root = strstr(path,"$.");
			if (root)
			{
				memcpy(log_file,path,(root+2)-path);
				strcpy(log_file+((root+2)-path),Module_Title);
			}
		}
	}
	return NULL;
}

void config_free(void)
{
}
@


1.1.1.1
log
@Initial import of ZeroPain module
Detail:
  This is a compatibility/logging module designed to work with zero page
  relocation. It will trap any emulate LDR/LDRB/LDM which reads from the first
  16K of the logical address space. Attempts to access some known kernel
  workspace locations will cause the correct value to be returned, while all
  other locations will return zero. Whenever an instruction is trapped and
  emulated an entry will be added to a log file so that the user is aware of
  the issue.
Admin:
  Tested on Iyonix with zero page relocation

@
text
@@
