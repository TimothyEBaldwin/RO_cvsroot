head	1.5;
access;
symbols
	ZeroPain-0_08:1.5
	ZeroPain-0_07:1.4
	ZeroPain-0_06:1.3
	ZeroPain-0_05:1.2
	ZeroPain-0_04:1.2
	ZeroPain-0_03:1.1.1.1
	ZeroPain-0_02:1.1.1.1
	ZeroPain-0_01:1.1.1.1
	Vendor:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2018.04.18.20.34.32;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	vk4lmWXjxJtKQXyA;

1.4
date	2017.08.19.17.10.56;	author jlee;	state Exp;
branches;
next	1.3;
commitid	KsmZ8i6eVVXavQ3A;

1.3
date	2016.04.05.20.58.04;	author jlee;	state Exp;
branches;
next	1.2;
commitid	fP6GuTPKZj3wRt1z;

1.2
date	2015.07.21.20.07.36;	author jlee;	state Exp;
branches;
next	1.1;
commitid	0qzzvda1ORVmUbuy;

1.1
date	2015.07.01.21.44.02;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	a7idPnOv6AQc3Dry;

1.1.1.1
date	2015.07.01.21.44.02;	author jlee;	state Exp;
branches;
next	;
commitid	a7idPnOv6AQc3Dry;


desc
@@


1.5
log
@Enter logging only role
With the advent of the kernel's compatibility page in Kernel-5_87 and later, much of the utility of ZeroPain allowing buggy apps to plod on is redundant.
However, developers still find its logging useful, since it's easier to read than letting an abort happen (with the compatibility page turned off).
Move the kill switch to 5.26 and remove the emulation of kernel workspace values, leaving two states
a) you have the compatibility page for now, and silence for reads
b) you have ZeroPain loaded, and get logs for reads
and all writes in any mode aborts.

Version 0.08. Tagged as 'ZeroPain-0_08'
@
text
@/*
 * Copyright (c) 2015, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include "handler.h"
#include "log.h"

uint32_t *rsi6vals[RSI6Count];

#ifdef DEBUG
#include <stdarg.h>
#include <stdio.h>

void (*dadwritec)(char);

static void dprintf(const char *fmt,...)
{
	if (!dadwritec)
		return;

	char buf[128];
	va_list args;
	va_start(args,fmt);
	vsprintf(buf,fmt,args);
	va_end(args);
	char *c = buf;
	while(*c)
		(dadwritec)(*c++);
}

#define DPRINTF dprintf
#else
#define DPRINTF(...) (void) 0
#endif

/* Replicate the message the kernel includes in the compatibility page */
#define PATTERN "\xfd\xfd\xfd\xfd"
static const char *special_message = PATTERN PATTERN PATTERN PATTERN "!!!!NULL.POINTER.DEREFERENCE!!!!";

static uint32_t mem(uint32_t addr)
{
	DPRINTF("mem %08x\n",addr);
	/* TODO: Deal with addresses outside zero page? */
	if (addr < 0x30)
	{
		return *((const uint32_t *) (special_message+addr));
	}
	return 0;
}

bool handler_do(context_t *context, uint32_t sctlr)
{
	/* Examine the instruction to work out if it's one we handle:
	   LDR[B], immediate	cccc 010P UBW1 --Rn --Rt ---- ---- -imm
	   LDR[B], register	cccc 011P UBW1 --Rn --Rt --im m-t0 --Rm
	   LDM			cccc 100P U0W1 --Rn ---- ---- ---- regs
	*/

#define W (1<<21)
#define B (1<<22)
#define U (1<<23)
#define P (1<<24)

#define SCTLR_A (1<<1)
#define SCTLR_U (1<<22)

	const uint32_t pc = context->r[15]-8;
	const uint32_t instr = *((uint32_t *) pc);

	DPRINTF("pc %08x instr %08x dfar %08x\n",pc,instr,context->dfar);

	if (instr >= 0xf0000000)
	{
		return false; /* Unconditional instruction */
	}

	const uint32_t Rn = (instr >> 16) & 0xf;

	DPRINTF("Rn %d\n",Rn);

	if (Rn == 15)
	{
		return false; /* There's not really any way this can end well */
	}

	uint32_t addr = context->r[Rn];

	DPRINTF("addr %08x\n",addr);

	if ((instr & 0x0e500000) == 0x08100000)
	{
		/* LDM */
		if (addr & 3)
		{
			/* Unaligned. Disallow if ARMv7 unaligned load behaviour or alignment exceptions enabled. */
			if (sctlr & (SCTLR_U | SCTLR_A))
			{
				return false;
			}
			else
			{
				/* Rotated load mode, ignore bottom two bits */
				addr &= ~3;
			}
		}
		if (instr & (1<<15))
		{
			/* We don't simulate things well enough that a load of PC will do any good */
			return false;
		}
		/* Instruction looks good, emulate it */
		log_add(context);
		if (instr & U)
		{
			/* LDMIA/LDMIB */
			if (instr & P)
			{
				addr += 4;
			}
			for (int i=0;i<14;i++)
			{
				if (instr & (1<<i))
				{
					context->r[i] = mem(addr);
					addr += 4;
				}
			}
			if (instr & W)
			{
				context->r[Rn] = ((instr & P) ? addr-4 : addr);
				DPRINTF("wback %08x\n",context->r[Rn]);
			}
		}
		else
		{
			/* LDMDA/DB */
			if (instr & P)
			{
				addr -= 4;
			}
			for (int i=14;i>=0;i--)
			{
				if (instr & (1<<i))
				{
					context->r[i] = mem(addr);
					addr -= 4;
				}
			}
			if (instr & W)
			{
				context->r[Rn] = ((instr & P) ? addr+4 : addr);
				DPRINTF("wback %08x\n",context->r[Rn]);
			}
		}
		/* Update PC */
		context->r[15] = pc+4;
		return true;
	}
	else if ((instr & 0x0c100000) == 0x04100000)
	{
		/* LDR[B] */
		const uint32_t Rt = (instr >> 12) & 0xf;
		DPRINTF("Rt %d\n",Rt);
		if (Rt == 15)
		{
			return false;
		}
		int32_t offset;
		if (instr & (1<<25))
		{
			/* Register offset */
			if (instr & 0x10)
			{
				return false;
			}
			const uint32_t Rm = instr & 0xf;
			if (Rm == 15)
			{
				return false;
			}
			const uint32_t Rmval = context->r[Rm];
			const uint32_t shift = (instr >> 7) & 31;
			const uint32_t type = (instr >> 5) & 3;
			switch (type)
			{
			default:
			case 0: /* LSL */
				offset = Rmval << shift;
				break;
			case 1: /* LSR, with special encoding of LSR #32 */
				offset = (shift ? (Rmval >> shift) : 0);
				break;
			case 2: /* ASR, with special encoding of ASR #32 */
				offset = (shift ? (((int32_t) Rmval) >> shift) : ((int32_t) Rmval) >> 31);
				break;
			case 3: /* ROR, with special encoding of RRX */
				if (shift)
				{
					offset = (Rmval >> shift) | (Rmval << (32-shift));
				}
				else
				{
					offset = (Rmval>>1) | ((context->psr & (1<<29)) << 2);
				}
				break;
			}
		}
		else
		{
			/* Immediate offset */
			offset = (instr & 0xfff);
		}
		if (!(instr & U))
		{
			offset = -offset;
		}
		DPRINTF("offset %08x\n",offset);
		if (instr & P)
		{
			addr += offset;
		}
		const bool unaligned = !(instr & B) && (addr & 3);
		if (unaligned && (sctlr & SCTLR_A))
		{
			/* Unaligned with alignment exceptions enabled */
			return false;
		}
		/* Instruction looks good, emulate it */
		log_add(context);
		uint32_t val = mem(addr & ~3);
		const uint32_t rotate = (addr & 3)<<3;
		uint32_t val2 = val;
		if (unaligned && (sctlr & SCTLR_U))
		{
			/* ARMv7 unaligned load, grab the next word */
			val2 = mem((addr+4) & ~3);
		}
		val = (val >> rotate) | (val2 << (32-rotate));
		if (instr & B)
		{
			val &= 255;
		}
		context->r[Rt] = val;
		if (!(instr & P))
		{
			addr += offset;
		}
		if ((instr & W) || !(instr & P))
		{
			context->r[Rn] = addr;
			DPRINTF("wback %08x\n",context->r[Rn]);
		}
		/* Update PC */
		context->r[15] = pc+4;
		return true;
	}
	else
	{
		return false;
	}
}
@


1.4
log
@Automatically disable the kernel's compatibility page
Detail:
  In order for ZeroPain to be useful for logging page zero accesses or emulating old zero page locations, it needs to be able to trap page zero reads. The new compatibility page introduced in Kernel-5_87 prevents this, so make sure the page is disabled whenever we're active.
  c/cmodule - Detect & disable the compatibility page on startup and on Service_PostInit (for when ZeroPain is in ROM). Re-enable the page on exit if necessary.
  c/handler_c - Emulate the same pattern that the kernel includes in the compatibility page for locations &0-&2f
  c/log, h/log - Root service call handler moved to c/module
  cmhg/modhead - Listen out for Service_PostInit
Admin:
  Tested on BB-xM


Version 0.07. Tagged as 'ZeroPain-0_07'
@
text
@a31 11
static const uint32_t zeropageaddrs[RSI6Count] =
{
	/* PublicWS not exported as a C header. Just hardcode. */
	[DomainId] = 0xff8,
	[IRQsema] = 0x108,
	[MetroGnome] = 0x10c,
	[CLibCounter] = 0xfe8,
	[RISCOSLibWord] = 0xfec,
	[CLibWord] = 0xff0,
	[ESC_Status] = 0x104,
};
a70 10
	else
	{
		for(int i=0;i<RSI6Count;i++)
		{
			if(addr == zeropageaddrs[i])
			{
				return *rsi6vals[i];
			}
		}
	}
@


1.3
log
@Leverage SeriousErrorV for producing more detailed log entries. Extend kill switch deadline to the release of RISC OS 5.24.
Detail:
  c/cmodule - Extend kill switch deadline to the release of RISC OS 5.24. Look up VecPtrTab so we can make a manual call to SeriousErrorV from ABT mode. Make sure the Debugger module is listening to SeriousErrorV.
  c/handler_c - Don't perform address translation for null pointers (zeroapgeaddrs currently has a null legacy address for VecPtrTab)
  c/log, h/log - Update log buffer handling to add support for detailed logs produced by SeriousErrorV/Debugger. Since the logs can be large we currently only allow one to be stored in memory at a time.
  s/handler_asm - Implement log_detailed function to decide (a) whether it's safe to call SeriousErrorV, and (b) deal with the fact that SeriousErrorV_Collect must be called in ABT mode in order to avoid overwriting any important SVC stack content
  h/handler - Adding VecPtrTab to rsi6val enum & log_detailed prototype
Admin:
  Tested on Raspberry Pi


Version 0.06. Tagged as 'ZeroPain-0_06'
@
text
@d70 4
d78 5
a82 1
	if (addr)
@


1.2
log
@Add unaligned load support
Detail:
  s/handler_asm - Read system control register and pass it through to the C code
  h/handler - Updated function prototype for C abort handler code
  c/handler_c - Use the supplied system control register value to determine whether rotated or unaligned load behaviour is in effect, and whether all unaligned loads should fail (i.e. don't trap the zero page access) due to alignment exceptions being enabled
Admin:
  Tested on Raspberry Pi 1 with LDM/LDR/LDRB with all three unaligned access settings


Version 0.04. Tagged as 'ZeroPain-0_04'
@
text
@d74 1
a74 1
	for(int i=0;i<RSI6Count;i++)
d76 1
a76 1
		if(addr == zeropageaddrs[i])
d78 4
a81 1
			return *rsi6vals[i];
@


1.1
log
@Initial revision
@
text
@d84 1
a84 1
bool handler_do(context_t *context)
d97 3
d128 10
a137 2
			/* Unaligned */
			return false;
d255 2
a256 1
		if (!(instr & B) && (addr & 3))
d258 1
a258 1
			/* Unaligned */
d264 8
a273 1
			val >>= (addr & 3)<<3;
@


1.1.1.1
log
@Initial import of ZeroPain module
Detail:
  This is a compatibility/logging module designed to work with zero page
  relocation. It will trap any emulate LDR/LDRB/LDM which reads from the first
  16K of the logical address space. Attempts to access some known kernel
  workspace locations will cause the correct value to be returned, while all
  other locations will return zero. Whenever an instruction is trapped and
  emulated an entry will be added to a log file so that the user is aware of
  the issue.
Admin:
  Tested on Iyonix with zero page relocation

@
text
@@
