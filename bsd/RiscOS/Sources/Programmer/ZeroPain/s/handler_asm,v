head	1.4;
access;
symbols
	ZeroPain-0_08:1.4
	ZeroPain-0_07:1.4
	ZeroPain-0_06:1.4
	ZeroPain-0_05:1.3
	ZeroPain-0_04:1.3
	ZeroPain-0_03:1.2
	ZeroPain-0_02:1.1.1.1
	ZeroPain-0_01:1.1.1.1
	Vendor:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2016.04.05.20.58.09;	author jlee;	state Exp;
branches;
next	1.3;
commitid	fP6GuTPKZj3wRt1z;

1.3
date	2015.07.21.20.07.41;	author jlee;	state Exp;
branches;
next	1.2;
commitid	0qzzvda1ORVmUbuy;

1.2
date	2015.07.05.09.56.40;	author jlee;	state Exp;
branches;
next	1.1;
commitid	qRhlXCNGfe8E25sy;

1.1
date	2015.07.01.21.44.02;	author jlee;	state Exp;
branches
	1.1.1.1;
next	;
commitid	a7idPnOv6AQc3Dry;

1.1.1.1
date	2015.07.01.21.44.02;	author jlee;	state Exp;
branches;
next	;
commitid	a7idPnOv6AQc3Dry;


desc
@@


1.4
log
@Leverage SeriousErrorV for producing more detailed log entries. Extend kill switch deadline to the release of RISC OS 5.24.
Detail:
  c/cmodule - Extend kill switch deadline to the release of RISC OS 5.24. Look up VecPtrTab so we can make a manual call to SeriousErrorV from ABT mode. Make sure the Debugger module is listening to SeriousErrorV.
  c/handler_c - Don't perform address translation for null pointers (zeroapgeaddrs currently has a null legacy address for VecPtrTab)
  c/log, h/log - Update log buffer handling to add support for detailed logs produced by SeriousErrorV/Debugger. Since the logs can be large we currently only allow one to be stored in memory at a time.
  s/handler_asm - Implement log_detailed function to decide (a) whether it's safe to call SeriousErrorV, and (b) deal with the fact that SeriousErrorV_Collect must be called in ABT mode in order to avoid overwriting any important SVC stack content
  h/handler - Adding VecPtrTab to rsi6val enum & log_detailed prototype
Admin:
  Tested on Raspberry Pi


Version 0.06. Tagged as 'ZeroPain-0_06'
@
text
@; 
; Copyright (c) 2015, RISC OS Open Ltd
; All rights reserved.
; 
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met: 
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of RISC OS Open Ltd nor the names of its contributors
;       may be used to endorse or promote products derived from this software
;       without specific prior written permission.
; 
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; POSSIBILITY OF SUCH DAMAGE.
; 
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Proc
        GET     Hdr:OSMisc

        AREA    |RW$$Code|, CODE, PIC

        EXPORT  handler_install
        EXPORT  handler_remove
        IMPORT  handler_do

handler_install
        Entry
        ; Store C handler pointer
        STR     r0, handler_ptr
        ; Get relocation offsets
        SUB     r0, sl, #540
        LDMIA   r0, {r1-r2}
        ADR     r0, reloc_offsets
        STMIA   r0, {r1-r2}

        ; Install handler
        ; IRQs off for safety!
        MRS     r2, CPSR
        ORR     r3, r2, #I32_bit
        MSR     CPSR_c, r3

        MOV     r0, #256+4
        ADR     r1, handler_stub
        SWI     XOS_ClaimProcessorVector
        STRVC   r1, old_handler
        MSR     CPSR_c, r2
        MOVVC   r0, #0
        EXIT

handler_remove
        Entry
        MOV     r0, #4
        LDR     r1, old_handler
        ADR     r2, handler_stub
        SWI     XOS_ClaimProcessorVector
        MOVVC   r0, #0
        EXIT

; Note that we assume that we're running from RAM and so don't need to copy this
; stub to workspace (Lack of READONLY flag will ensure that we get copied to RAM
; by the cmhg module init code on startup)

old_handler
        DCD     0
reloc_offsets
        DCD     0
        DCD     0
handler_ptr
        DCD     0

handler_stub    ROUT
        ; Get a work register
        STR     lr, [sp, #-12]!
        ; Check DFAR lies within zero page
        MRC     p15, 0, lr, c6, c0, 0
        CMP     lr, #&4000
        LDRHS   lr, [sp], #12
        LDRHS   pc, old_handler
        ; Looks like we might have some work to do. Save the abort context and
        ; call the full handler.
        STR     lr, [sp, #8]
        MRS     lr, SPSR
        STR     lr, [sp, #4]
        ; Keep things simple and only deal with USR32 & SVC32 modes, ARM mode, FIQs enabled
        AND     lr, lr, #M32_bits+T32_bit+F32_bit
        TEQ     lr, #USR32_mode
        TEQNE   lr, #SVC32_mode
        LDRNE   lr, [sp], #12
        LDRNE   pc, old_handler
        SUB     sp, sp, #15*4
        STMIA   sp, {r0-r14}^
        MOV     r0, sp
        ; Grab SVC r13/r14 if necessary
        TEQ     lr, #SVC32_mode
        BNE     %FT10
        MSR     CPSR_c, #SVC32_mode+I32_bit
        STR     r13, [r0, #13*4]
        STR     r14, [r0, #14*4]
        MSR     CPSR_c, #ABT32_mode+I32_bit
10
        ; Set up C environment. CMHG veneer could perhaps be used here, except
        ; that it will try to switch to SVC mode and I don't want to assume that
        ; the SVC stack is in a sane state.
        ADR     r1, reloc_offsets
        MOV     sl, sp, LSR #20
        LDMIA   r1, {r1-r2}
        MOV     sl, sl, LSL #20
        LDMIA   sl, {r4-r5}
        MOV     fp, #0
        STMIA   sl, {r1-r2}
        ADD     sl, sl, #540
        ; Grab system control register
        MRC     p15, 0, r1, c1, c0, 0
        ; Call main handler
        MOV     lr, pc
        LDR     pc, handler_ptr
        ; Restore poked stack
        SUB     sl, sl, #540
        STMIA   sl, {r4-r5}
        ; Restore context. Only the main integer registers should have changed,
        ; and if we're expecting to pass on the abort the live DFAR/DFSR
        ; shouldn't have been clobbered
        LDR     r1, [sp, #16*4] ; Get original SPSR
        MOV     r14, r0
        MSR     SPSR_cxsf, r1
        TST     r1, #3 ; SVC mode?
        BNE     %FT50
        ; USR mode
        LDMIA   sp, {r0-r14}^
        NOP     ; Required for pre-ARMv6
        ADD     sp, sp, #15*4
        ; Return code was 1 if handled, 0 if we should pass on
        TEQ     r14, #0
        LDR     r14, [sp], #12
        MOVNES  pc, r14
        LDR     pc, old_handler
50
        ; SVC mode
        MOV     r0, sp
        MSR     CPSR_c, #SVC32_mode+I32_bit
        LDMIA   r0, {r0-r14}
        MSR     CPSR_c, #ABT32_mode+I32_bit
        ADD     sp, sp, #15*4
        ; Return code was 1 if handled, 0 if we should pass on
        TEQ     r14, #0
        LDR     r14, [sp], #12
        MOVNES  pc, r14
        LDR     pc, old_handler

        AREA    |RO$$Code|, CODE, READONLY, PIC

        EXPORT  log_detailed

; In: r0 -> context
;     r1 = dest buffer
;     r2 = buffer length
;     r3 -> VecPtrTab
;     ABT mode, IRQs disabled
log_detailed
        Entry   "r1-r10"
        ; Examine the context to see if it's safe to call SWIs
        ; The abort needs to be from a state where IRQs are enabled, and with reasonable space free on the SVC stack (>4K)
        LDR     r4, [r0, #16*4]
        TST     r4, #I32_bit
        BNE     %FT90
        ; Switch to SVC mode to check stack space
        MSR     CPSR_c, #SVC32_mode+I32_bit
        MOV     r4, sp, LSR #20
        SUB     r4, sp, r4, LSL #20
        MSR     CPSR_c, #ABT32_mode+I32_bit
        CMP     r4, #4096
        BLT     %FT90
        MOV     r4, #1
        STRB    r4, [r1] ; Write marker to buffer so we can tell if it is modified
        ; Detailed dump possible. Call SeriousErrorV_Collect by directly peeking at the vector claimant table (can't call SWI yet!)
        ADR     r1, errorblock
        MOV     r2, #SeriousErrorV_Collect
        ADR     lr, %FT20
        Push    "lr"
        LDR     r10, [r3, #SeriousErrorV*4]
10
        MOV     lr, pc
        LDMIA   r10, {r10, r12, pc}
        TEQ     r10, #0
        BNE     %BT10
        Pull    "lr"
20
        ; Now that collection phase is done we can enable IRQs and switch to SVC mode for the reporting phase
        MOV     r4, sp
        MSR     CPSR_c, #SVC32_mode
        Push    "lr"
        ADR     r0, errorblock
        MOV     r1, #SeriousErrorV_CustomReport_Annotated
        MOV     r2, #SeriousErrorV_CustomReport
        ADR     r3, report_callback
        MOV     r9, #SeriousErrorV
        SWI     XOS_CallAVector
        Pull    "lr"
        MSR     CPSR_c, #ABT32_mode+I32_bit
        ; Check if anything was written to the buffer
        FRAMLDR r1
        LDRB    r0, [r1] ; Will be the null terminator if the buffer was modified, or 1 if left untouched
        EOR     r0, r0, #1 ; Invert to give response code
        EXIT

90
        ; Can't produce a detailed dump
        MOV     r0, #0
        EXIT

; In: r0 = pointer to dest buffer ptr + length
;     r1 = null-terminated string
; Out: r0-r3, r12 corruptible
report_callback ROUT
        LDMIA   r0, {r2-r3}
        SUB     r3, r3, #1
10
        MOVS    ip, r3
        LDRNEB  ip, [r1], #1
        STRB    ip, [r2]
        TEQNE   ip, #0
        ADDNE   r2, r2, #1
        SUBNE   r3, r3, #1
        BNE     %BT10
        ADD     r3, r3, #1
        STMIA   r0, {r2-r3}
        MOV     pc, lr

errorblock
        DCD     0
        DCB     "Dummy ZeroPain error block", 0
        ALIGN

        END
@


1.3
log
@Add unaligned load support
Detail:
  s/handler_asm - Read system control register and pass it through to the C code
  h/handler - Updated function prototype for C abort handler code
  c/handler_c - Use the supplied system control register value to determine whether rotated or unaligned load behaviour is in effect, and whether all unaligned loads should fail (i.e. don't trap the zero page access) due to alignment exceptions being enabled
Admin:
  Tested on Raspberry Pi 1 with LDM/LDR/LDRB with all three unaligned access settings


Version 0.04. Tagged as 'ZeroPain-0_04'
@
text
@d32 1
d34 1
a34 1
        AREA    |Asm$$Code|, CODE, PIC
d135 3
a137 2
        ; and the live SPSR & DFAR/DFSR shouldn't have been clobbered.
        MRS     r1, SPSR
d139 1
d164 84
@


1.2
log
@Modify to allow inclusion in ROM builds
Detail:
  Makefile - Define ROM_MODULE when being built for ROM
  h/handler, s/handler_asm - Ensure abort handler stub is running from RAM (so it can use PC-relative LDR to get workspace values)
  c/cmodule - Disable ROM date check when running from ROM. Allow log configuration to fail when running from ROM.
  c/log - When running from ROM, wait until log configuration succeeds before outputing any logs
Admin:
  Tested on Iyonix


Version 0.03. Tagged as 'ZeroPain-0_03'
@
text
@d125 2
@


1.1
log
@Initial revision
@
text
@d33 1
a33 1
        AREA    |Asm$$Code|, CODE, READONLY, PIC
d41 2
d73 2
a74 1
; stub to workspace
d81 2
d126 2
a127 1
        BL      handler_do
@


1.1.1.1
log
@Initial import of ZeroPain module
Detail:
  This is a compatibility/logging module designed to work with zero page
  relocation. It will trap any emulate LDR/LDRB/LDM which reads from the first
  16K of the logical address space. Attempts to access some known kernel
  workspace locations will cause the correct value to be returned, while all
  other locations will return zero. Whenever an instruction is trapped and
  emulated an entry will be added to a log file so that the user is aware of
  the issue.
Admin:
  Tested on Iyonix with zero page relocation

@
text
@@
