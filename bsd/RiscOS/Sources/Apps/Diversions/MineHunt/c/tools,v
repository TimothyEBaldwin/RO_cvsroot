head	1.3;
access;
symbols
	MineHunt-1_18:1.3
	MineHunt-1_17:1.3
	MineHunt-1_16:1.3
	MineHunt-1_15:1.3
	MineHunt-1_14:1.3
	MineHunt-1_13:1.3
	MineHunt-0_05:1.2
	MineHunt-0_04:1.1
	MineHunt-0_03:1.1;
locks; strict;
comment	@# @;


1.3
date	2011.11.18.22.46.05;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	poW5LJSWEjXcTRHv;

1.2
date	2011.11.18.22.40.00;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	lu47Mmtoy059RRHv;

1.1
date	2011.11.18.22.29.56;	author rsprowson;	state Exp;
branches;
next	;
commitid	ODpffeRcM4JGNRHv;


desc
@@


1.3
log
@Retire 26 bit sound modules.
Implement remaining missing functions.
Resolve remaining compiler warnings.
Bump version number to match last release.

Version 1.13. Tagged as 'MineHunt-1_13'
@
text
@/*
Copyright (c) 2002-2011 Paul LeBeau
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are
permitted provided that the following conditions are met:

   1. Redistributions of source code must retain the above copyright notice, this list of
      conditions and the following disclaimer.

   2. Redistributions in binary form must reproduce the above copyright notice, this list
      of conditions and the following disclaimer in the documentation and/or other materials
      provided with the distribution.

THIS SOFTWARE IS PROVIDED BY PAUL LEBEAU ''AS IS'' AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL PAUL LEBEAU OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are those of the
authors and should not be interpreted as representing official policies, either expressed
or implied, of Paul LeBeau.
*/

/* Title:    c.tools
 *
 * Purpose:  Helper tools
 *
 */



#include <ctype.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>



#include "os.h"
#include "wimp.h"
#include "bbc.h"

#include "tools.h"



/*--------------------------------------------------------------------------*/



int akbd_pollalt(void)
/* Poll for ALT being pressed, returns 1 if it is, 0 otherwise */
{
   int x = -3;
   int y = 255;
   (void) os_byte(129, &x, &y);
   
   return (x==255 && y==255);
}



/*--------------------------------------------------------------------------*/



int strcmpi(const char *s1, const char *s2)
/* Caseless strcmp */
{
   char t, b;
   
   t = b = 0;
   while (t == b)
   {
      t = *s1;
      s1++;
      b = *s2;
      s2++;
      
      /* Both ending at the same time matches */
      t = toupper(t);
      b = toupper(b);
      if ((t <= ' ') && (b <= ' ')) return 0;
   }

   return 1;
}



/*--------------------------------------------------------------------------*/



os_error *read_screen_limits(wimp_box *box)
/* Find screen dimensions */
{
   box->x0 = 0;
   box->y0 = 0;
   box->x1 = bbc_modevar(-1, bbc_XWindLimit) << bbc_modevar(-1, bbc_XEigFactor);
   box->y1 = bbc_modevar(-1, bbc_YWindLimit) << bbc_modevar(-1, bbc_YEigFactor);
   
   return NULL;
}



/*--------------------------------------------------------------------------*/



void wutils_setfield(wimp_w w, int i, char *string)
/* Populate an icon with a string */
{
   wimp_icreate ic;
   wimp_i       newicon;

   /* Get the present icon info and check it's a text field */
   if (wimp_get_icon_info(w, i, &ic.i) != NULL)
      return;

   if ((ic.i.flags & wimp_ITEXT) == 0)
      return;

   /* Mark as deleted */
   if (wimp_delete_icon(w, i) != NULL)
      return;

   /* Update the text */
   if (ic.i.flags & wimp_INDIRECT)
      strncpy(ic.i.data.indirecttext.buffer, string, ic.i.data.indirecttext.bufflen - 1);
   else
      strncpy(ic.i.data.text, string, 11);

   /* Try to recreate the icon, but if a different icon handle comes back give up */
   ic.w = w;
   if (wimp_create_icon(&ic, &newicon))
      return;
   if (newicon != i)
      return;

   wimp_set_icon_state(w, i, (wimp_iconflags)0, (wimp_iconflags)0);
}



/*--------------------------------------------------------------------------*/



void wutils_setnumeric(wimp_w w, int i, int number)
/* Populate an icon with a number */
{
   char temp[12];

   sprintf(temp, "%d", number);
   wutils_setfield(w, i, temp);
}



/*--------------------------------------------------------------------------*/
@


1.2
log
@High scores and choices saved in Choices$Write read from Choices$Path.
Filled in 2 more functions in tools.c.
Fixed some compiler warnings.
Compiles and runs (26 bit).

Version 0.05. Tagged as 'MineHunt-0_05'
@
text
@d40 2
d121 28
d160 4
@


1.1
log
@Makefile recreated.
Some missing utility functions added (tools.c and tools.h).
Compiles now, but wont run.

Version 0.03. Tagged as 'MineHunt-0_03'
@
text
@d38 1
d40 1
a40 1
#include <string.h>
d45 1
a45 1

d71 1
a71 1
int strcmpi(const char *a, const char *b)
d74 17
a90 1
   return strcmp(a, b);
d102 5
@

