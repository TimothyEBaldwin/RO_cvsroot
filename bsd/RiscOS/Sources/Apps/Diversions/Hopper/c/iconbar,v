head	1.5;
access;
symbols
	Hopper-1_05:1.5
	Hopper-1_04:1.4
	Hopper-1_03:1.3
	Hopper-1_02:1.2
	Hopper-1_01:1.2
	Hopper-1_00:1.1.1.1
	sfoster-1_00:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2014.12.23.09.16.51;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	UQyu6os9NVbD393y;

1.4
date	2014.06.19.20.11.59;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	qakzpfvqgu72HaFx;

1.3
date	2014.06.19.20.05.41;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	v0oLLymJjKmIEaFx;

1.2
date	2014.06.19.19.52.23;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	CERygL0JxxNjAaFx;

1.1
date	2014.06.19.19.45.40;	author rsprowson;	state Exp;
branches
	1.1.1.1;
next	;
commitid	qRGkb7TTWYNkxaFx;

1.1.1.1
date	2014.06.19.19.45.40;	author rsprowson;	state Exp;
branches;
next	;
commitid	qRGkb7TTWYNkxaFx;


desc
@@


1.5
log
@Minor compatibility fixes
Use the X form of OS_ScreenMode so it doesn't error on those OS versions not supporting the screen cache clean.
Calculate the width of the iconbar menu correctly rather than just using 256.
Tested on an A5000 with Wimp 3.16.

Version 1.05. Tagged as 'Hopper-1_05'
@
text
@/*
 * Copyright (c) 1994, Simon Foster
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
  Handle the iconbar
  iconbar.c
*/

#include <string.h>
#include "wimp.h"
#include "macros.h"

#include "iconbar.h"
#include "memory.h"
#include "menu.h"
#include "exit.h"
#include "templates.h"
#include "keys.h"
#include "hopper.h"
#include "messages.h"


/* Globals */
wimp_MENU(iconbar_NUM_ENTRIES)  iconbar_menu ;
wimp_i	  	 		iconbar_icon_hnd ;
char				ind_info[20], ind_prefs[20], ind_quit[20];


/* Initialise the iconbar, i.e. the sprite on the iconbar */
void iconbar_initialise ( void )
{
  wimp_icon_create  *my_icon ;

  my_icon = (wimp_icon_create *) memory_alloc ( sizeof (wimp_icon_create), "iconbar icon" ) ;
  my_icon -> w = wimp_ICON_BAR_RIGHT ;
  my_icon -> icon.extent.x0 = 0 ;
  my_icon -> icon.extent.y0 = 0 ;
  my_icon -> icon.extent.x1 = 68 ;
  my_icon -> icon.extent.y1 = 68 ;
  my_icon -> icon.flags = wimp_ICON_SPRITE | wimp_ICON_HCENTRED |
                                                        wimp_ICON_VCENTRED |
                          wimp_BUTTON_CLICK << wimp_ICON_BUTTON_TYPE_SHIFT ;
  strcpy ( my_icon -> icon.data.sprite, "!" info_APPNAME ) ;

  iconbar_icon_hnd = wimp_create_icon ( my_icon ) ;
}



/* Create the menu structure */
void iconbar_create_menu ( void )
{
  static const char *ind_validation = "A0-9;KR" ;
  int width;

  strcpy ( iconbar_menu.title_data.text, info_APPNAME ) ;
  width = strlen ( info_APPNAME );

  iconbar_menu.entries[iconbar_MENU_INFO].menu_flags = 0x00u ;
  iconbar_menu.entries[iconbar_MENU_INFO].sub_menu =
                                             (wimp_menu *) proginfo_hnd ;
  iconbar_menu.entries[iconbar_MENU_INFO].icon_flags = wimp_ICON_TEXT |
                                   wimp_ICON_FILLED | wimp_ICON_INDIRECTED |
                          wimp_BUTTON_CLICK << wimp_ICON_BUTTON_TYPE_SHIFT |
                            wimp_COLOUR_BLACK << wimp_ICON_FG_COLOUR_SHIFT |
                            wimp_COLOUR_WHITE << wimp_ICON_BG_COLOUR_SHIFT ;
  strcpy ( ind_info, messages_xlate_text ( "M00", NULL, NULL ) ) ;
  iconbar_menu.entries[iconbar_MENU_INFO].data.indirected_text.text =
                                                                  ind_info ;
  iconbar_menu.entries[iconbar_MENU_INFO].data.indirected_text.validation =
  	                                           (char *) ind_validation ;
  iconbar_menu.entries[iconbar_MENU_KEYS].data.indirected_text.size =
                                                       strlen ( ind_info ) ;
  width = MAX ( width, strlen (ind_info) );

  iconbar_menu.entries[iconbar_MENU_KEYS].menu_flags = 0x00u ;
  iconbar_menu.entries[iconbar_MENU_KEYS].sub_menu = wimp_NO_SUB_MENU ;
  iconbar_menu.entries[iconbar_MENU_KEYS].icon_flags = wimp_ICON_TEXT |
                                   wimp_ICON_FILLED | wimp_ICON_INDIRECTED |
                          wimp_BUTTON_CLICK << wimp_ICON_BUTTON_TYPE_SHIFT |
                            wimp_COLOUR_BLACK << wimp_ICON_FG_COLOUR_SHIFT |
                            wimp_COLOUR_WHITE << wimp_ICON_BG_COLOUR_SHIFT ;
  strcpy ( ind_prefs, messages_xlate_text ( "M01", NULL, NULL ) ) ;
  iconbar_menu.entries[iconbar_MENU_KEYS].data.indirected_text.text =
  	                                                         ind_prefs ;
  iconbar_menu.entries[iconbar_MENU_KEYS].data.indirected_text.validation =
  	                                           (char *) ind_validation ;
  iconbar_menu.entries[iconbar_MENU_KEYS].data.indirected_text.size =
                                                      strlen ( ind_prefs ) ;
  width = MAX ( width, strlen (ind_prefs) );

  iconbar_menu.entries[iconbar_MENU_QUIT].menu_flags = wimp_MENU_LAST ;
  iconbar_menu.entries[iconbar_MENU_QUIT].sub_menu = wimp_NO_SUB_MENU ;
  iconbar_menu.entries[iconbar_MENU_QUIT].icon_flags = wimp_ICON_TEXT |
                                   wimp_ICON_FILLED | wimp_ICON_INDIRECTED |
                          wimp_BUTTON_CLICK << wimp_ICON_BUTTON_TYPE_SHIFT |
                            wimp_COLOUR_BLACK << wimp_ICON_FG_COLOUR_SHIFT |
                            wimp_COLOUR_WHITE << wimp_ICON_BG_COLOUR_SHIFT ;
  strcpy ( ind_quit, messages_xlate_text ( "M02", NULL, NULL ) ) ;
  iconbar_menu.entries[iconbar_MENU_QUIT].data.indirected_text.text =
  	                                                          ind_quit ;
  iconbar_menu.entries[iconbar_MENU_QUIT].data.indirected_text.validation =
  	                                           (char *) ind_validation ;
  iconbar_menu.entries[iconbar_MENU_QUIT].data.indirected_text.size =
                                                       strlen ( ind_quit ) ;
  width = MAX ( width, strlen (ind_quit) );

  iconbar_menu.title_fg = wimp_COLOUR_BLACK ;
  iconbar_menu.title_bg = wimp_COLOUR_LIGHT_GREY ;
  iconbar_menu.work_fg  = wimp_COLOUR_BLACK ;
  iconbar_menu.work_bg  = wimp_COLOUR_WHITE ;
  iconbar_menu.width    = (1 + width) * 16 ;
  iconbar_menu.height   = 44 ;
  iconbar_menu.gap      = 0 ;
}



/* Display the menu on the screen */
void iconbar_display_menu ( wimp_block *my_block )
{
  menu_create_menu ( my_block, (wimp_menu *) &iconbar_menu,
                                       iconbar_NUM_ENTRIES, iconbar_MENU ) ;
}



/* Mouse click detected on iconbar, now process according to the button */
void iconbar_clicked ( wimp_block *my_block )
{
  switch ( my_block -> pointer.buttons ) {
    case wimp_CLICK_SELECT :
    case wimp_CLICK_ADJUST :
      hopper_go () ;
      break ;
    case wimp_CLICK_MENU :
      iconbar_create_menu () ;
      iconbar_display_menu ( my_block ) ;
      break ;
  }
}



/* Decode the menu entry selected on the iconbar menu */
void iconbar_menu_selected ( wimp_block *my_block )
{
  wimp_pointer pinfo ;

  switch ( my_block -> selection.items[0] ) {
    case iconbar_MENU_KEYS :
      keys_show_keys () ;
      break ;
    case iconbar_MENU_QUIT :
      exit_selected () ;
      break ;
  }

  wimp_get_pointer_info ( &pinfo ) ;
  if (pinfo.buttons == wimp_CLICK_ADJUST) {
    iconbar_display_menu ( my_block ) ;
  }
}



@


1.4
log
@Internationalised
Adjusted the bevelled borders plotter around the high scores so the bevels join up.
Fix bug in data_load which would report missing files as allocation failures.
Changed to use newly allocated PsychoEffects SWI base (previous one was an allocation clash).
New application sprites from Chris Wraight.

Version 1.04. Tagged as 'Hopper-1_04'
@
text
@d35 1
d78 1
d81 1
a81 7
  iconbar_menu.title_fg = wimp_COLOUR_BLACK ;
  iconbar_menu.title_bg = wimp_COLOUR_LIGHT_GREY ;
  iconbar_menu.work_fg  = wimp_COLOUR_BLACK ;
  iconbar_menu.work_bg  = wimp_COLOUR_WHITE ;
  iconbar_menu.width    = 256 ;
  iconbar_menu.height   = 44 ;
  iconbar_menu.gap      = 0 ;
d98 1
d114 1
d130 9
@


1.3
log
@Improvements and car/water level generator sources
Moved choices and hiscores out to Choices dir so the app can be run from read only media.
Iconbar menu changed to say "Choices...".
Info box updated from build system rather than __DATE__
Moved iconbar sprite to 0 baseline.
Changed frames in choices dialogues from R3 to R4.
Added an up front check that the 320 x 256 mode is available when run.
Import the sprite graphics and conversion programs (Numbers graphic regenerated).
Import the level generators.
Researched the authors of the original tracker mods, and updated the attribution text in game and in !Help with their credits.

Version 1.03. Tagged as 'Hopper-1_03'
@
text
@a40 1
#include "error.h"
d43 1
d49 1
a49 1
char				ind_prefs[20], ind_validation[10] ;
a68 1
  strcpy ( ind_validation, "A0-9;KR" ) ;
d76 2
d91 1
a91 1
                                                          wimp_ICON_FILLED |
d95 7
a101 1
  strcpy ( iconbar_menu.entries[iconbar_MENU_INFO].data.text, "Info" ) ;
d110 1
d114 3
a116 3
  	                                                    ind_validation ;
  iconbar_menu.entries[iconbar_MENU_KEYS].data.indirected_text.size = 15 ;
  strcpy ( ind_prefs, "Choices..." ) ;
d121 1
a121 1
                                                          wimp_ICON_FILLED |
d125 7
a131 1
  strcpy ( iconbar_menu.entries[iconbar_MENU_QUIT].data.text, "Quit" ) ;
@


1.2
log
@Changes to make it build
OSLib: and CLib: header file references changed to suite ROOL environment.
Makefile added.
Now builds, but missing some resource install steps.

Version 1.01. Tagged as 'Hopper-1_01'
@
text
@a37 1
#include "proginfo.h"
d60 1
a60 1
  my_icon -> icon.extent.y0 = 6 ;
d62 1
a62 1
  my_icon -> icon.extent.y1 = 74 ;
d66 1
a66 2
  strcpy ( my_icon -> icon.data.sprite, "!" ) ;
  strcat ( my_icon -> icon.data.sprite, info_name ) ;
d77 1
a77 1
  strcpy ( iconbar_menu.title_data.text, info_name ) ;
d108 1
a108 1
  strcpy ( ind_prefs, "Preferences..." ) ;
a147 14
/* Mouse click detected on iconbar, now process according to the button */
void iconbar_proginfo_clicked ( wimp_block *my_block )
{
  wimp_window_state  my_state ;

  if ( my_block -> pointer.i == proginfo_AUTHOR ) {
    my_state.w = credits_hnd ;
    wimp_get_window_state ( &my_state ) ;
    my_state.next = wimp_TOP ;
    wimp_open_window ( (wimp_open *) &my_state ) ;
  }
}


@


1.1
log
@Initial revision
@
text
@d33 3
a35 3
/* Include the relevant files */
#include "OSLib:wimp.h"
#include "CLib:string.h"
@


1.1.1.1
log
@Import of Hopper diversion
These are the sources to !Hopper 1.00 from 03-Dec-1996.
Special thanks to the original author, Simon Foster, for permissionto publish the sources to this diversion.
@
text
@@
