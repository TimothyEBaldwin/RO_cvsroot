head	1.4;
access;
symbols
	Hopper-1_05:1.4
	Hopper-1_04:1.4
	Hopper-1_03:1.4
	Hopper-1_02:1.3
	Hopper-1_01:1.2
	Hopper-1_00:1.1.1.1
	sfoster-1_00:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2014.06.19.20.05.41;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	v0oLLymJjKmIEaFx;

1.3
date	2014.06.19.19.57.05;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	w6coKcmQQN4WBaFx;

1.2
date	2014.06.19.19.52.22;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	CERygL0JxxNjAaFx;

1.1
date	2014.06.19.19.45.40;	author rsprowson;	state Exp;
branches
	1.1.1.1;
next	;
commitid	qRGkb7TTWYNkxaFx;

1.1.1.1
date	2014.06.19.19.45.40;	author rsprowson;	state Exp;
branches;
next	;
commitid	qRGkb7TTWYNkxaFx;


desc
@@


1.4
log
@Improvements and car/water level generator sources
Moved choices and hiscores out to Choices dir so the app can be run from read only media.
Iconbar menu changed to say "Choices...".
Info box updated from build system rather than __DATE__
Moved iconbar sprite to 0 baseline.
Changed frames in choices dialogues from R3 to R4.
Added an up front check that the 320 x 256 mode is available when run.
Import the sprite graphics and conversion programs (Numbers graphic regenerated).
Import the level generators.
Researched the authors of the original tracker mods, and updated the attribution text in game and in !Help with their credits.

Version 1.03. Tagged as 'Hopper-1_03'
@
text
@/*
 * Copyright (c) 1994, Simon Foster
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
  cars.c
*/

#include <stdlib.h>

#include "graphics.h"
#include "sync.h"
#include "data.h"
#include "cars.h"

#define  MINIMUM_SPEED   4

int  cars_l ;
row  road[4] ;
int  *cars_data ;

/* Load the data for the levels */
void cars_load_data ( void )
{
  cars_data = data_load ( "Levels.Cars" ) ;
  cars_l    = cars_data[0] ;
}


/* Finish with the car data, free the memory */
void cars_finished ( void )
{
  free ( cars_data ) ;
}


/* Initialise the cars */
void cars_initialise ( int level )
{
  int  pos, num, loop, loop2, minus ;


  if ( level > cars_l ) {
    minus = level - cars_l ;
    num   = cars_l ;
  }
  else {
    num   = level ;
    minus = 0 ;
  }

  pos = cars_data[num] ;

  for ( loop = 0; loop < 4; loop++ ) {
    road[loop].speed = cars_data[pos++] - minus ;
    if (road[loop].speed < MINIMUM_SPEED) {
      road[loop].speed = MINIMUM_SPEED ;
    }

    sync_set_timer ( &road[loop].timer ) ;
    road[loop].width = cars_data[pos++] ;
    road[loop].num   = cars_data[pos++] ;
    for ( loop2 = 0; loop2 < road[loop].num; loop2++ ) {
      road[loop].sprites[loop2].x   = cars_data[pos++] ;
      road[loop].sprites[loop2].y   = 144 + (loop * 20) ;
      road[loop].sprites[loop2].spr = (loop == 1) ? 3 :
                                        sync_random(0, 2) + (3*(loop % 2)) ;
    }
  }
}


/* Reset the timers */
void cars_reset_timers ( void )
{
  sync_set_timer ( &road[0].timer ) ;
  sync_set_timer ( &road[1].timer ) ;
  sync_set_timer ( &road[2].timer ) ;
  sync_set_timer ( &road[3].timer ) ;
}


/* Print the cars */
void cars_print ( void )
{
  int  loop, loop2 ;

  for (loop = 0; loop < 4; loop++) {
    for (loop2 = 0; loop2 < road[loop].num; loop2++) {
      gfx_show_vehicle ( &road[loop].sprites[loop2] ) ;
    }
  }
}


/* Update the cars */
void cars_update ( void )
{
  int  loop, loop2, plus, top ;

  for (loop = 0; loop < 4; loop++) {
    plus = sync_elapsed ( &road[loop].timer, road[loop].speed ) ;
    top = road[loop].width - 40 ;
    for (loop2 = 0; loop2 < road[loop].num; loop2++) {
      if ( loop == 0 || loop == 2 ) {
        road[loop].sprites[loop2].x = road[loop].sprites[loop2].x - plus ;
        if (road[loop].sprites[loop2].x <= -40) {
          road[loop].sprites[loop2].x = road[loop].sprites[loop2].x +
                                                          road[loop].width ;
          road[loop].sprites[loop2].spr = (loop == 1) ? 3 :
                                        sync_random(0, 2) + (3*(loop % 2)) ;
        }
      }
      else {
        road[loop].sprites[loop2].x = road[loop].sprites[loop2].x + plus ;
        if (road[loop].sprites[loop2].x >= top ) {
          road[loop].sprites[loop2].x = road[loop].sprites[loop2].x -
                                                          road[loop].width ;
          road[loop].sprites[loop2].spr = (loop == 1) ? 3 :
                                        sync_random(0, 2) + (3*(loop % 2)) ;
        }
      }
    }
  }
}

/* Check collision with cars */
int  cars_collided ( gfx_sprite *box, int row )
{
  int  num = ((row + 1) / 2) - 6, loop ;

  for (loop = 0; loop < road[num].num; loop++) {
    if ( ((box -> x) + 16 >= road[num].sprites[loop].x) &&
                        ((box -> x) <= (road[num].sprites[loop].x + 29)) ) {

      return ( 1 ) ;
    }
  }

  return ( 0 ) ;
}
@


1.3
log
@Fixes to install something actually complete
Added force screen cache clean for RISC OS 4 (so the frog is visible!) at the end of the plotting loop.
Flattened the app directory structure a bit, to eliminate 'Resources' subdirectory.
Fixed a couple of trivial compiler warnings.
Ensures updated in !Run file.
Copyright attributions in !Help file updated.

Version 1.02. Tagged as 'Hopper-1_02'
@
text
@a32 1
#include "osfile.h"
@


1.2
log
@Changes to make it build
OSLib: and CLib: header file references changed to suite ROOL environment.
Makefile added.
Now builds, but missing some resource install steps.

Version 1.01. Tagged as 'Hopper-1_01'
@
text
@d49 1
a49 1
  cars_data = data_load ( "Resources.Cars" ) ;
@


1.1
log
@Initial revision
@
text
@d32 3
a34 2
#include "OSLib:osfile.h"
#include "CLib:stdlib.h"
@


1.1.1.1
log
@Import of Hopper diversion
These are the sources to !Hopper 1.00 from 03-Dec-1996.
Special thanks to the original author, Simon Foster, for permissionto publish the sources to this diversion.
@
text
@@
