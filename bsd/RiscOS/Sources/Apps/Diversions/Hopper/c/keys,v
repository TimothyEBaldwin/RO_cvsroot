head	1.5;
access;
symbols
	Hopper-1_05:1.5
	Hopper-1_04:1.5
	Hopper-1_03:1.4
	Hopper-1_02:1.3
	Hopper-1_01:1.2
	Hopper-1_00:1.1.1.1
	sfoster-1_00:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2014.06.19.20.11.59;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	qakzpfvqgu72HaFx;

1.4
date	2014.06.19.20.05.41;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	v0oLLymJjKmIEaFx;

1.3
date	2014.06.19.19.57.06;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	w6coKcmQQN4WBaFx;

1.2
date	2014.06.19.19.52.23;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	CERygL0JxxNjAaFx;

1.1
date	2014.06.19.19.45.40;	author rsprowson;	state Exp;
branches
	1.1.1.1;
next	;
commitid	qRGkb7TTWYNkxaFx;

1.1.1.1
date	2014.06.19.19.45.40;	author rsprowson;	state Exp;
branches;
next	;
commitid	qRGkb7TTWYNkxaFx;


desc
@@


1.5
log
@Internationalised
Adjusted the bevelled borders plotter around the high scores so the bevels join up.
Fix bug in data_load which would report missing files as allocation failures.
Changed to use newly allocated PsychoEffects SWI base (previous one was an allocation clash).
New application sprites from Chris Wraight.

Version 1.04. Tagged as 'Hopper-1_04'
@
text
@/*
 * Copyright (c) 1994, Simon Foster
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
  keys.c
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "wimp.h"
#include "osfile.h"
#include "osbyte.h"

#include "main.h"
#include "keys.h"
#include "icon.h"
#include "memory.h"
#include "templates.h"
#include "hopper.h"
#include "qtm.h"
#include "messages.h"

/* Global variables */
char    *lookup[129] ;
int     keys_up_key      = 207 ;
int     keys_down_key    = 232 ;
int     keys_left_key    = 225 ;
int     keys_right_key   = 194 ;
int     keys_sound_fx    = 1 ;
int     keys_ingame      = 1 ;
int     keys_intro       = 1 ;
int     keys_save_hi     = 1 ;
int	keys_fx_vol      = 64 ;
int	keys_music_vol   = 64 ;
int     keys_music_speed = 1 ;
int     keys_update      = 0 ;
int     keys_auto_repeat = 0 ;
int     keys_x0, keys_x1, keys_y0, keys_y1 ;
int     keys_temp_up, keys_temp_down, keys_temp_left, keys_temp_right ;
int     keys_temp_sound, keys_temp_ingame,  keys_temp_intro, keys_temp_save ;
int	keys_temp_fx_vol, keys_temp_mc_vol, keys_temp_speed, keys_temp_update ;
int     keys_temp_repeat ;
wimp_i  keys_selected = prefs_KEYS ;
int	slider_off, slider_x, slider_y ;
int	sound_fx_vol = sound_FX_VOLUME ;
int	sound_music_vol = sound_MUSIC_VOLUME ;



/* Read in the preferences from a file */
void keys_read_in_prefs ( FILE *in )
{
  /* Default keys */
  fread ( &keys_up_key,      sizeof(int), 1, in ) ;
  fread ( &keys_down_key,    sizeof(int), 1, in ) ;
  fread ( &keys_left_key,    sizeof(int), 1, in ) ;
  fread ( &keys_right_key,   sizeof(int), 1, in ) ;
  /* Other options */
  fread ( &keys_sound_fx,    sizeof(int), 1, in ) ;
  fread ( &keys_ingame,      sizeof(int), 1, in ) ;
  fread ( &keys_intro,       sizeof(int), 1, in ) ;
  fread ( &keys_save_hi,     sizeof(int), 1, in ) ;
  fread ( &keys_fx_vol,      sizeof(int), 1, in ) ;
  fread ( &keys_music_vol,   sizeof(int), 1, in ) ;
  /* Advanced options */
  fread ( &keys_music_speed, sizeof(int), 1, in ) ;
  fread ( &keys_update,      sizeof(int), 1, in ) ;
  /* More Miscellaneous */
  fread ( &keys_auto_repeat, sizeof(int), 1, in ) ;
}


/* Set the default prefs */
void keys_default_prefs ( void )
{
  /* Default keys */
  keys_up_key      = 207 ;
  keys_down_key    = 232 ;
  keys_left_key    = 225 ;
  keys_right_key   = 194 ;
  /* Other options */
  keys_sound_fx    = 1 ;
  keys_ingame      = 1 ;
  keys_intro       = 1 ;
  keys_save_hi     = 1 ;
  keys_fx_vol      = 64 ;
  keys_music_vol   = 48 ;
  /* Advanced options */
  keys_music_speed = 1 ;
  keys_update      = 0 ;
  /* More misc */
  keys_auto_repeat = 0 ;
}


/* Write out the preferences to a file */
void keys_write_out_prefs ( void )
{
  FILE  *out ;

  osfile_create_dir( info_CHOICES_RW, 0 ) ;
  out = fopen ( info_CHOICES_RW ".Choices", "wb" ) ;

  if ( out != NULL ) {
    /* Default keys */
    fwrite ( &keys_up_key,      sizeof(int), 1, out ) ;
    fwrite ( &keys_down_key,    sizeof(int), 1, out ) ;
    fwrite ( &keys_left_key,    sizeof(int), 1, out ) ;
    fwrite ( &keys_right_key,   sizeof(int), 1, out ) ;
    /* Other options */
    fwrite ( &keys_sound_fx,    sizeof(int), 1, out ) ;
    fwrite ( &keys_ingame,      sizeof(int), 1, out ) ;
    fwrite ( &keys_intro,       sizeof(int), 1, out ) ;
    fwrite ( &keys_save_hi,     sizeof(int), 1, out ) ;
    fwrite ( &keys_fx_vol,      sizeof(int), 1, out ) ;
    fwrite ( &keys_music_vol,   sizeof(int), 1, out ) ;
    /* Advanced options */
    fwrite ( &keys_music_speed, sizeof(int), 1, out ) ;
    fwrite ( &keys_update,      sizeof(int), 1, out ) ;
    /* More miscellaneous */
    fwrite ( &keys_auto_repeat, sizeof(int), 1, out ) ;

    fclose ( out ) ;
  }
}


/* Read in the file and initialise it */
void keys_initialise ( void )
{
  FILE  *in ;
  int   loop = 0 ;
  char  line[100] ;
  const char *uk;

  sprintf(line, "%s.Keys", info_APPDIR);
  in = fopen ( line, "r" ) ;

  if ( in == NULL ) {
    main_exit_error ( messages_xlate_error ( "NoKeys", NULL, NULL ) ) ;
  }

  fgets ( line, 99, in ) ;
  while ( loop < 128  &&  feof(in) == 0 ) {
    if (strlen(line) != 0) {
      lookup[loop] = (char *) memory_alloc ( strlen(line), "lookup" ) ;
      line[strlen(line)-1] = '\0' ;
      strcpy ( lookup[loop], line ) ;
    }
    else {
      lookup[loop] = (char *) -1 ;
    }
    loop++ ;
    fgets ( line, 99, in ) ;
  }

  fclose ( in ) ;

  uk = messages_xlate_text ( "Unknown", NULL, NULL ) ;
  lookup[128] = (char *) memory_alloc ( strlen( uk ) + 1 , "lookup" ) ;
  strcpy ( lookup[128], uk ) ;

  in = fopen ( info_CHOICES_RO ".Choices", "rb" ) ;
  if (in != (FILE *) 0) {
    keys_default_prefs () ;
    keys_read_in_prefs ( in ) ;
    fclose ( in ) ;
  }
  else {
    keys_default_prefs () ;
  }

  hopper_load_hi () ;

  icon_get_extent ( sound_hnd, sound_FX_BACK, &slider_off, &loop, &slider_x,
                                                                        &slider_y ) ;
}


/* Provide a string for an internal key number */
char *keys_string ( int key )
{
  if ( lookup[key-128] != (char *) -1 ) {
    return ( lookup[key-128] ) ;
  }
  else {
    return ( lookup[128] ) ;
  }
}


/* Free the memory used by the keys table */
void keys_finished ( void )
{
  int  loop ;

  for ( loop = 0; loop < 129; loop++ ) {
    if ( lookup[loop] != (char *) -1 ) {
      free ( lookup[loop] ) ;
    }
  }

  if ( keys_save_hi == 1 ) {
    hopper_save_hi () ;
  }
}


/* Show the change keys dialogue box */
void keys_show_keys ( void )
{
  wimp_window_state   p_state, i_state;
  int		      volume;

  /* Which window ? */
  icon_set_selected ( prefs_hnd, prefs_KEYS, (keys_selected == prefs_KEYS) ) ;
  icon_set_selected ( prefs_hnd, prefs_SOUND, (keys_selected == prefs_SOUND) ) ;
  icon_set_selected ( prefs_hnd, prefs_MISC, (keys_selected == prefs_MISC) ) ;
  icon_set_selected ( prefs_hnd, prefs_ADV, (keys_selected == prefs_ADV) ) ;

  /* Keys window */
  icon_set_text ( keys_hnd, keys_UP, keys_string ( keys_up_key ) ) ;
  icon_set_text ( keys_hnd, keys_DOWN, keys_string ( keys_down_key ) ) ;
  icon_set_text ( keys_hnd, keys_LEFT, keys_string ( keys_left_key ) ) ;
  icon_set_text ( keys_hnd, keys_RIGHT, keys_string ( keys_right_key ) ) ;

  /* Sound window */
  icon_set_selected ( sound_hnd, sound_SOUND, keys_sound_fx ) ;
  icon_set_selected ( sound_hnd, sound_INGAME, keys_ingame ) ;
  icon_set_selected ( sound_hnd, sound_INTRO, keys_intro ) ;
  volume=(int) ((float) keys_fx_vol * ((float) slider_x / (float) 64));
  icon_new_size ( sound_hnd, sound_fx_vol, volume, slider_y);
  volume=(int) ((float) keys_music_vol * ((float) slider_x / (float) 64));
  icon_new_size ( sound_hnd, sound_music_vol, volume, slider_y);

  /* Misc window */
  icon_set_selected ( misc_hnd, misc_SAVE, keys_save_hi ) ;
  icon_set_selected ( misc_hnd, misc_AUTO, keys_auto_repeat ) ;

  /* Advanced window */
  icon_set_selected ( advanced_hnd, advanced_VHIGH, (keys_music_speed == 0) ) ;
  icon_set_selected ( advanced_hnd, advanced_HIGH, (keys_music_speed == 1) ) ;
  icon_set_selected ( advanced_hnd, advanced_MEDIUM, (keys_music_speed == 2) ) ;
  icon_set_selected ( advanced_hnd, advanced_LOW, (keys_music_speed == 3) ) ;
  icon_set_selected ( advanced_hnd, advanced_NORMAL, (keys_update == 0) ) ;
  icon_set_selected ( advanced_hnd, advanced_SLOWER, (keys_update == 1) ) ;

  keys_temp_up     = keys_up_key ;
  keys_temp_down   = keys_down_key ;
  keys_temp_left   = keys_left_key ;
  keys_temp_right  = keys_right_key ;
  keys_temp_sound  = keys_sound_fx ;
  keys_temp_fx_vol = keys_fx_vol ;
  keys_temp_ingame = keys_ingame ;
  keys_temp_intro  = keys_intro ;
  keys_temp_mc_vol = keys_music_vol ;
  keys_temp_save   = keys_save_hi ;
  keys_temp_speed  = keys_music_speed ;
  keys_temp_update = keys_update ;
  keys_temp_repeat = keys_auto_repeat ;

  p_state.w = prefs_hnd ;
  wimp_get_window_state ( &p_state ) ;
  switch ( keys_selected ) {
    case prefs_KEYS :
      i_state.w = keys_hnd ;
      break ;
    case prefs_SOUND :
      i_state.w = sound_hnd ;
      break ;
    case prefs_MISC :
      i_state.w = misc_hnd ;
      break ;
    case prefs_ADV :
      i_state.w = advanced_hnd ;
      break ;
  }
  wimp_get_window_state ( &i_state ) ;
  keys_x0 = i_state.visible.x0 - p_state.visible.x0 ;
  keys_y0 = i_state.visible.y0 - p_state.visible.y0 ;
  keys_x1 = i_state.visible.x1 - p_state.visible.x1 ;
  keys_y1 = i_state.visible.y1 - p_state.visible.y1 ;
  i_state.next = wimp_TOP ;
  wimp_open_window ( (wimp_open *) &i_state ) ;
  p_state.next = i_state.w ;
  wimp_open_window ( (wimp_open *) &p_state ) ;
  prefs_opn = 1 ;
}


/* Keep the two windows joined */
void keys_keep_joined ( wimp_open *m_open )
{
  wimp_window_state  i_state ;

  switch ( keys_selected ) {
    case prefs_KEYS :
      i_state.w = keys_hnd ;
      break ;
    case prefs_SOUND :
      i_state.w = sound_hnd ;
      break ;
    case prefs_MISC :
      i_state.w = misc_hnd ;
      break ;
    case prefs_ADV :
      i_state.w = advanced_hnd ;
      break ;
  }
  wimp_get_window_state ( &i_state ) ;
  i_state.visible.x0 = m_open -> visible.x0 + keys_x0 ;
  i_state.visible.y0 = m_open -> visible.y0 + keys_y0 ;
  i_state.visible.x1 = m_open -> visible.x1 + keys_x1 ;
  i_state.visible.y1 = m_open -> visible.y1 + keys_y1 ;
  i_state.next       = m_open -> next ;
  wimp_open_window ( (wimp_open *) &i_state ) ;
  m_open -> next = i_state.w ;
  wimp_open_window ( m_open ) ;
}


/* A new inside prefs window has been selected */
void keys_new_inside ( wimp_i wdw )
{
  wimp_window_state  n_state, o_state ;

  if ( wdw != keys_selected ) {
    switch ( keys_selected ) {
      case prefs_KEYS :
        o_state.w = keys_hnd ;
        break ;
      case prefs_SOUND :
        o_state.w = sound_hnd ;
        break ;
      case prefs_MISC :
        o_state.w = misc_hnd ;
        break ;
      case prefs_ADV :
        o_state.w = advanced_hnd ;
        break ;
    }
    switch ( wdw ) {
      case prefs_KEYS :
        n_state.w = keys_hnd ;
        break ;
      case prefs_SOUND :
        n_state.w = sound_hnd ;
        break ;
      case prefs_MISC :
        n_state.w = misc_hnd ;
        break ;
      case prefs_ADV :
        n_state.w = advanced_hnd ;
        break ;
    }
    wimp_get_window_state ( &o_state ) ;
    wimp_get_window_state ( &n_state ) ;
    n_state.visible.x0 = o_state.visible.x0 ;
    n_state.visible.y0 = o_state.visible.y0 ;
    n_state.visible.x1 = o_state.visible.x1 ;
    n_state.visible.y1 = o_state.visible.y1 ;
    n_state.next       = o_state.next ;
    wimp_close_window ( o_state.w ) ;
    wimp_open_window ( (wimp_open *) &n_state ) ;
    keys_selected = wdw ;
  }
}


/* Select/adjust clicked */
void keys_prefs_selected ( wimp_block *my_block )
{
  int  close;

  close=0;

  switch ( my_block -> pointer.i ) {
    case prefs_OK :
      keys_up_key      = keys_temp_up ;
      keys_down_key    = keys_temp_down ;
      keys_left_key    = keys_temp_left ;
      keys_right_key   = keys_temp_right ;
      keys_sound_fx    = keys_temp_sound ;
      keys_fx_vol      = keys_temp_fx_vol ;
      keys_ingame      = keys_temp_ingame ;
      keys_intro       = keys_temp_intro ;
      keys_music_vol   = keys_temp_mc_vol ;
      keys_save_hi     = keys_temp_save ;
      keys_music_speed = keys_temp_speed ;
      keys_update      = keys_temp_update ;
      keys_auto_repeat = keys_temp_repeat ;
      qtm_set_speed () ;
      close=1;
      break ;

    case prefs_SAVE :
      keys_up_key      = keys_temp_up ;
      keys_down_key    = keys_temp_down ;
      keys_left_key    = keys_temp_left ;
      keys_right_key   = keys_temp_right ;
      keys_sound_fx    = keys_temp_sound ;
      keys_fx_vol      = keys_temp_fx_vol ;
      keys_ingame      = keys_temp_ingame ;
      keys_intro       = keys_temp_intro ;
      keys_music_vol   = keys_temp_mc_vol ;
      keys_save_hi     = keys_temp_save ;
      keys_music_speed = keys_temp_speed ;
      keys_update      = keys_temp_update ;
      keys_auto_repeat = keys_temp_repeat ;
      keys_write_out_prefs () ;
      qtm_set_speed () ;
      close=1;
      break ;

    case prefs_CANCEL :
      close=1;
      break ;
    case prefs_KEYS :
    case prefs_SOUND :
    case prefs_MISC :
    case prefs_ADV :
      keys_new_inside ( my_block -> pointer.i ) ;
      break ;
  }

  if (close==1) {
    if (my_block->pointer.buttons == wimp_CLICK_SELECT) {
      wimp_close_window ( prefs_hnd ) ;
      switch ( keys_selected ) {
        case prefs_KEYS :
          wimp_close_window ( keys_hnd ) ;
          break ;
        case prefs_SOUND :
          wimp_close_window ( sound_hnd ) ;
          break ;
        case prefs_MISC :
          wimp_close_window ( misc_hnd ) ;
          break ;
        case prefs_ADV :
          wimp_close_window ( advanced_hnd );
          break ;
      }
      prefs_opn = 0 ;
    }
    else {
      keys_show_keys();
    }
  }
}


/* Mouse click detected in the change keys window */
void keys_prefs_clicked ( wimp_block *my_block )
{
  switch ( my_block -> pointer.buttons ) {
    case wimp_CLICK_SELECT :
    case wimp_CLICK_ADJUST :
      keys_prefs_selected ( my_block ) ;
      break ;
  }
}


/* Display the dialogue on the screen */
static void keys_display_change ( const char *str, int xadd, int yadd )
{
  int   	     loop ;
  wimp_icon_state    my_state ;

  icon_set_text ( change_hnd, change_STRING,
                  (char *) messages_xlate_text ( "PrKey", str, NULL ) ) ;

  for ( loop = 0; loop < 5; loop++ ) {
    my_state.w = change_hnd ;
    my_state.i = loop ;
    wimp_get_icon_state ( &my_state ) ;
    my_state.icon.extent.x0 = my_state.icon.extent.x0 + xadd ;
    my_state.icon.extent.y0 = my_state.icon.extent.y0 + yadd ;
    my_state.icon.extent.x1 = my_state.icon.extent.x1 + xadd ;
    my_state.icon.extent.y1 = my_state.icon.extent.y1 + yadd ;
    wimp_plot_icon ( &my_state.icon ) ;
  }
}


/* Read the value of the key that is pressed */
int  keys_read_key ( void )
{
  int  ret, key = 0xff, d ;

  while ( key == 0xff ) {
    os_byte ( 121, 3, 0, &key, &d ) ;
    if ( (key >= 9  &&  key <= 11)  ||  (key >= 113  &&  key <= 119)  ||
                (key >= 28  &&  key <= 30)  ||  key == 20  ||  key == 22 ) {
      key = 0xff ;
    }
  }

  ret = key ;
  key = 0xff ;

  while ( key == 0xff ) {
    os_byte ( 121, ret + 128, 0, &key, &d ) ;
  }

  return ( ret + 128 ) ;
}


/* Read in a key and continue until it is a unique one */
int  keys_read_without ( int a, int b, int c )
{
  int  key = 0xff ;

  while ( key == 0xff  ||  key == a  ||  key == b  ||  key == c ) {
    key = keys_read_key () ;
  }

  return ( key ) ;
}


/* Change the current keys to some new ones */
void keys_change_keys ( void )
{
  int                r1, r2 ;
  wimp_window_state  w_state ;
  int		     xsize, ysize, width, height ;
  char               temp[64];

  /* Wait for no keys to be pressed */
  os_byte ( 121, 3, 0, &r1, &r2 ) ;
  while ( r1 != 0xff ) {
    os_byte ( 121, 3, 0, &r1, &r2 ) ;
  }
  /* Centre the window */
  w_state.w = change_hnd ;
  wimp_get_window_state ( &w_state ) ;
  os_read_mode_variable ( (os_mode) -1, 11, &xsize ) ;
  os_read_mode_variable ( (os_mode) -1,  4, &width ) ;
  os_read_mode_variable ( (os_mode) -1, 12, &ysize ) ;
  os_read_mode_variable ( (os_mode) -1,  5, &height ) ;
  xsize  = (xsize * (1 << width)) / 2 ;
  ysize  = (ysize * (1 << height)) / 2 ;
  width  = w_state.visible.x1 - w_state.visible.x0 ;
  height = w_state.visible.y1 - w_state.visible.y0 ;
  xsize  = xsize - (width / 2) ;
  ysize  = ysize - (height / 2) ;

  keys_temp_up    = 0 ;
  keys_temp_down  = 0 ;
  keys_temp_left  = 0 ;
  keys_temp_right = 0 ;

  /* Get new keys */
  strcpy ( temp, messages_xlate_text ( "Up", NULL, NULL ) ) ;
  keys_display_change ( temp, xsize, ysize ) ;
  keys_temp_up = keys_read_without ( 0, 0, 0 ) ;
  strcpy ( temp, messages_xlate_text ( "Down", NULL, NULL ) ) ;
  keys_display_change ( temp, xsize, ysize ) ;
  keys_temp_down = keys_read_without ( keys_temp_up, 0, 0 ) ;
  strcpy ( temp, messages_xlate_text ( "Left", NULL, NULL ) ) ;
  keys_display_change ( temp, xsize, ysize ) ;
  keys_temp_left = keys_read_without ( keys_temp_up, keys_temp_down, 0 ) ;
  strcpy ( temp, messages_xlate_text ( "Right", NULL, NULL ) ) ;
  keys_display_change ( temp, xsize, ysize ) ;
  keys_temp_right = keys_read_without ( keys_temp_up, keys_temp_down,
                                                          keys_temp_left ) ;
  /* Redraw the screen */
  wimp_force_redraw ( wimp_BACKGROUND, xsize, ysize, xsize+width,
                                                            ysize+height ) ;
  /* Set the text icons to the new keys */
  icon_set_text ( keys_hnd, keys_UP, keys_string ( keys_temp_up ) ) ;
  icon_set_text ( keys_hnd, keys_DOWN, keys_string ( keys_temp_down ) ) ;
  icon_set_text ( keys_hnd, keys_LEFT, keys_string ( keys_temp_left ) ) ;
  icon_set_text ( keys_hnd, keys_RIGHT, keys_string ( keys_temp_right ) ) ;
}


/* Select/adjust clicked */
void keys_keys_selected ( wimp_block *my_block )
{
  switch ( my_block -> pointer.i ) {
    case keys_CHANGE :
      keys_change_keys () ;
      break ;
  }
}


/* Mouse click detected in the change keys window */
void keys_keys_clicked ( wimp_block *my_block )
{
  switch ( my_block -> pointer.buttons ) {
    case wimp_CLICK_SELECT :
    case wimp_CLICK_ADJUST :
      keys_keys_selected ( my_block ) ;
      break ;
  }
}


/* Select/adjust clicked */
void keys_sound_selected ( wimp_block *my_block )
{
  wimp_i             icon=my_block->pointer.i;
  wimp_window_state  state ;
  int		     click;
  int		     x, y, w, h, d;

  state.w=sound_hnd;
  wimp_get_window_state(&state);
  click=(my_block->pointer.pos.x - state.visible.x0) - slider_off;

  switch ( icon ) {
    case sound_SOUND :
      keys_temp_sound = keys_temp_sound ^ 1 ;
      break ;
    case sound_INGAME :
      keys_temp_ingame = keys_temp_ingame ^ 1 ;
      break ;
    case sound_INTRO :
      keys_temp_intro = keys_temp_intro ^ 1 ;
      break ;
    case sound_FX_BACK :
      sound_fx_vol=icon_new_size(sound_hnd, sound_fx_vol, click, slider_y);
      keys_temp_fx_vol = (int) ((float) ((float) click/(float) slider_x)*(float) 64);
      icon_get_extent(sound_hnd, sound_FX_BACK, &x, &y, &w, &h);
      os_byte(19, 0, 0, &d, &d);
      wimp_force_redraw(sound_hnd, x, y, x+w, y+h);
      break;
    case sound_MUSIC_BACK :
      sound_music_vol=icon_new_size(sound_hnd, sound_music_vol, click, slider_y);
      keys_temp_mc_vol = (int) ((float) ((float) click/(float) slider_x)*(float) 64);
      icon_get_extent(sound_hnd, sound_MUSIC_BACK, &x, &y, &w, &h);
      os_byte(19, 0, 0, &d, &d);
      wimp_force_redraw(sound_hnd, x, y, x+w, y+h);
      break;
  }
}


/* Mouse click detected in the sound prefs window */
void keys_sound_clicked ( wimp_block *my_block )
{
  switch ( my_block -> pointer.buttons ) {
    case wimp_CLICK_SELECT :
    case wimp_CLICK_ADJUST :
      keys_sound_selected ( my_block ) ;
      break ;
  }
}


/* Select/adjust clicked */
void keys_misc_selected ( wimp_block *my_block )
{
  switch ( my_block -> pointer.i ) {
    case misc_SAVE :
      keys_temp_save = keys_temp_save ^ 1 ;
      break ;
    case misc_RESET :
      hopper_reset_hi () ;
      break ;
    case misc_AUTO :
      keys_temp_repeat = keys_temp_repeat ^ 1 ;
      break ;
  }
}

/* Mouse click detected in the misc prefs window */
void keys_misc_clicked ( wimp_block *my_block )
{
  switch ( my_block -> pointer.buttons ) {
    case wimp_CLICK_SELECT :
    case wimp_CLICK_ADJUST :
      keys_misc_selected ( my_block ) ;
      break ;
  }
}




/* Select/adjust clicked */
void keys_advanced_selected ( wimp_block *my_block )
{
  switch ( my_block -> pointer.i ) {
    case advanced_VHIGH :
      keys_temp_speed = 0 ;
      break ;
    case advanced_HIGH :
      keys_temp_speed = 1 ;
      break ;
    case advanced_MEDIUM :
      keys_temp_speed = 2 ;
      break ;
    case advanced_LOW :
      keys_temp_speed = 3 ;
      break ;
    case advanced_NORMAL :
      keys_temp_update = 0 ;
      break ;
    case advanced_SLOWER :
      keys_temp_update = 1 ;
      break ;
  }
}

/* Mouse click detected in the advanced prefs window */
void keys_advanced_clicked ( wimp_block *my_block )
{
  switch ( my_block -> pointer.buttons ) {
    case wimp_CLICK_SELECT :
    case wimp_CLICK_ADJUST :
      keys_advanced_selected ( my_block ) ;
      break ;
  }
}


@


1.4
log
@Improvements and car/water level generator sources
Moved choices and hiscores out to Choices dir so the app can be run from read only media.
Iconbar menu changed to say "Choices...".
Info box updated from build system rather than __DATE__
Moved iconbar sprite to 0 baseline.
Changed frames in choices dialogues from R3 to R4.
Added an up front check that the 320 x 256 mode is available when run.
Import the sprite graphics and conversion programs (Numbers graphic regenerated).
Import the level generators.
Researched the authors of the original tracker mods, and updated the attribution text in game and in !Help with their credits.

Version 1.03. Tagged as 'Hopper-1_03'
@
text
@d39 1
a39 1
#include "error.h"
d46 1
a49 1
char    ret[10] = "Unknown" ;
d159 1
a159 1

d165 1
a165 2
    error_make_error ( "Unable to find the Keys lookup file." ) ;
    exit ( EXIT_FAILURE ) ;
d184 3
a186 2
  lookup[128] = (char *) memory_alloc ( strlen("Unknown" + 1 ), "lookup" ) ;
  strcpy ( lookup[128], "Unknown" ) ;
d490 1
a490 1
void keys_display_change ( char *str, int xadd, int yadd )
a491 1
  char               temp[50] ;
d495 2
a496 4
  strcpy ( temp, "Press the new " ) ;
  strcat ( temp, str ) ;
  strcat ( temp, " key" ) ;
  icon_set_text ( change_hnd, change_STRING, temp ) ;
d554 1
d581 2
a582 1
  keys_display_change ( "UP", xsize, ysize ) ;
d584 2
a585 1
  keys_display_change ( "DOWN", xsize, ysize ) ;
d587 2
a588 1
  keys_display_change ( "LEFT", xsize, ysize ) ;
d590 2
a591 1
  keys_display_change ( "RIGHT", xsize, ysize ) ;
@


1.3
log
@Fixes to install something actually complete
Added force screen cache clean for RISC OS 4 (so the frog is visible!) at the end of the plotting loop.
Flattened the app directory structure a bit, to eliminate 'Resources' subdirectory.
Fixed a couple of trivial compiler warnings.
Ensures updated in !Run file.
Copyright attributions in !Help file updated.

Version 1.02. Tagged as 'Hopper-1_02'
@
text
@d36 1
a44 1
#include "proginfo.h"
a124 1
  char  filename[128];
d126 2
a127 3

  sprintf(filename, "%s.Choices", info_appdir);
  out = fopen ( filename, "wb" ) ;
d161 1
a161 1
  sprintf(line, "%s.Keys", info_appdir);
d166 1
a166 1
    exit ( 1) ;
d188 1
a188 2
  sprintf(line, "%s.Choices", info_appdir);
  in = fopen ( line, "rb" ) ;
@


1.2
log
@Changes to make it build
OSLib: and CLib: header file references changed to suite ROOL environment.
Makefile added.
Now builds, but missing some resource install steps.

Version 1.01. Tagged as 'Hopper-1_01'
@
text
@d163 1
a163 1
  sprintf(line, "%s.Resources.Keys", info_appdir);
@


1.1
log
@Initial revision
@
text
@d32 6
a37 5
#include "OSLib:wimp.h"
#include "OSLib:osbyte.h"
#include "CLib:stdio.h"
#include "CLib:stdlib.h"
#include "CLib:string.h"
@


1.1.1.1
log
@Import of Hopper diversion
These are the sources to !Hopper 1.00 from 03-Dec-1996.
Special thanks to the original author, Simon Foster, for permissionto publish the sources to this diversion.
@
text
@@
