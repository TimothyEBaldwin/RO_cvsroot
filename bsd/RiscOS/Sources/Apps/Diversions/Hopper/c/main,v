head	1.4;
access;
symbols
	Hopper-1_05:1.4
	Hopper-1_04:1.4
	Hopper-1_03:1.3
	Hopper-1_02:1.2
	Hopper-1_01:1.2
	Hopper-1_00:1.1.1.1
	sfoster-1_00:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2014.06.19.20.11.59;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	qakzpfvqgu72HaFx;

1.3
date	2014.06.19.20.05.41;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	v0oLLymJjKmIEaFx;

1.2
date	2014.06.19.19.52.23;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	CERygL0JxxNjAaFx;

1.1
date	2014.06.19.19.45.40;	author rsprowson;	state Exp;
branches
	1.1.1.1;
next	;
commitid	qRGkb7TTWYNkxaFx;

1.1.1.1
date	2014.06.19.19.45.40;	author rsprowson;	state Exp;
branches;
next	;
commitid	qRGkb7TTWYNkxaFx;


desc
@@


1.4
log
@Internationalised
Adjusted the bevelled borders plotter around the high scores so the bevels join up.
Fix bug in data_load which would report missing files as allocation failures.
Changed to use newly allocated PsychoEffects SWI base (previous one was an allocation clash).
New application sprites from Chris Wraight.

Version 1.04. Tagged as 'Hopper-1_04'
@
text
@/*
 * Copyright (c) 1994, Simon Foster
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
  Name    - !Hopper
  Module  - main.c
  Purpose - Contains the main function that calls the functions to
            initialise, run, and closedown the application.
  Author  - Simon Foster
  Version - 1.01 (30-Sep-1996)
*/

#include <stdlib.h>
#include "hourglass.h"

#include "templates.h"	   /* Handle window templates */
#include "exit.h"	   /* Tells whether exit has been selected */
#include "memory.h"	   /* Memory allocation with full error checking */
#include "iconbar.h"	   /* Looks after the iconbar sprite */
#include "menu.h"	   /* Creates the menus */
#include "graphics.h"	   /* The graphics side of things */
#include "keys.h"
#include "messages.h"
#include "hopper.h"
#include "qtm.h"
#include "cars.h"
#include "water.h"

/* The various defines required */

/* Global variables */
wimp_t  app_hnd ;


/* Initialise the application */
void main_initialise ( void )
{
  int   version ;

  hourglass_on () ;
  messages_initialise ();

  app_hnd = wimp_initialise ( wimp_VERSION_RO2, info_APPNAME,
                                       (wimp_message_list *) 0, &version ) ;

  templates_initialise () ;
  iconbar_initialise () ;
  keys_initialise () ;
  gfx_load_graphics_data () ;
  cars_load_data () ;
  water_load_data () ;
  qtm_load () ;

  hourglass_off () ;
}


/* Ungraceful error & quit when something goes wrong */
void main_exit_error ( os_error *the_error )
{
  wimp_report_error ( the_error, 1, info_APPNAME ) ;
  messages_closedown () ;

  exit ( EXIT_FAILURE ) ;
}
  

/* Closedown the application, free all memory, etc... */
void main_closedown ( void )
{
  templates_closedown () ;
  gfx_closedown () ;
  water_finished () ;
  cars_finished () ;
  keys_finished () ;

  wimp_close_down ( app_hnd ) ;

  messages_closedown () ;
}


/* Something to do with the application has been clicked */
void main_clicked ( wimp_block *my_block )
{
  wimp_w  wdw ;

  wdw = my_block -> pointer.w ;

  if ( wdw == wimp_ICON_BAR ) {
    iconbar_clicked ( my_block ) ;
  }
  else if ( wdw == prefs_hnd ) {
    keys_prefs_clicked ( my_block ) ;
  }
  else if ( wdw == keys_hnd ) {
    keys_keys_clicked ( my_block ) ;
  }
  else if ( wdw == sound_hnd ) {
    keys_sound_clicked ( my_block ) ;
  }
  else if ( wdw == misc_hnd ) {
    keys_misc_clicked ( my_block ) ;
  }
  else if ( wdw == advanced_hnd ) {
    keys_advanced_clicked ( my_block ) ;
  }
  /* To add another window into the list

        else if ( wdw == window_hnd ) {
          window_clicked ( my_block ) ;
        }
  */
}


/* A key was pressed while the application has input focus */
void main_key_pressed ( wimp_block *my_block )
{
  wimp_w  wdw ;

  wdw = my_block -> key.w ;

  /* To add another window into the list

        if ( wdw == window_hnd ) {
          window_key_pressed ( my_block ) ;
        }
  */
  wimp_process_key ( my_block -> key.c ) ;
}


/* A window connected to the application needs redrawing */
void main_window_opened ( wimp_block *my_block )
{
  /* If we need to check which window is being redrawn

        if ( my_block -> open.w == window_hnd ) {
          window_redrawn ( my_block ) ;
        }

     You then need to place else { .... } around the
     following.
  */
  if ( my_block -> open.w == prefs_hnd ) {
    keys_keep_joined ( &my_block -> open ) ;
  }
  else {
    wimp_open_window ( &my_block -> open ) ;
  }
}


/* A window connected to the application has been closed */
void main_window_closed ( wimp_block *my_block )
{
  /* If we need to check which window is being redrawn

        if ( my_block -> close.w == window_hnd ) {
          window_close ( my_block ) ;
        }

     You then need to place else { .... } around the
     following.
  */
  if ( my_block -> close.w == prefs_hnd ) {
    wimp_close_window ( keys_hnd ) ;
  }
  wimp_close_window ( my_block -> close.w ) ;
}


/* One of the application's menus has been selected */
void main_menu_selected ( wimp_block *my_block )
{
  switch ( menu_current_menu () ) {
    case iconbar_MENU :
      iconbar_menu_selected ( my_block ) ;
      break ;
  }
}


/* A message has been received from the wimp, process it */
void main_message_received ( wimp_block *my_block )
{
  switch ( my_block -> message.action ) {
    case message_QUIT :
      exit_selected () ;
      break ;
    case message_PREQUIT :
      /* Save current accounts, etc... */
      break ;
  }
}


/* Poll the wimp, and basically run the application */
void main_run ( void )
{
  int         event, pollword = 0 ;
  wimp_block  *my_block ;

  my_block = (wimp_block *) memory_alloc ( sizeof ( wimp_block ), "wimp_block" ) ;

  do {
    event = wimp_poll ( 0x01u, my_block, &pollword ) ;
    switch (event) {
      case wimp_NULL_REASON_CODE :
        break ;
      case wimp_MOUSE_CLICK :
        main_clicked ( my_block ) ;
        break ;
      case wimp_KEY_PRESSED :
        main_key_pressed ( my_block ) ;
        break ;
      case wimp_OPEN_WINDOW_REQUEST :
        main_window_opened ( my_block ) ;
        break ;
      case wimp_CLOSE_WINDOW_REQUEST :
        main_window_closed ( my_block) ;
        break ;
      case wimp_MENU_SELECTION :
        main_menu_selected ( my_block ) ;
        break ;
      case wimp_USER_MESSAGE :
      case wimp_USER_MESSAGE_RECORDED :
        main_message_received ( my_block ) ;
        break ;
    }
  } while ( exit_yes_or_no() == exit_NO ) ;
}


/* The main function, no parameters allowed at the moment */
int  main ( void )
{
  main_initialise () ;
  main_run () ;
  main_closedown () ;

  exit ( EXIT_SUCCESS ) ;
}

@


1.3
log
@Improvements and car/water level generator sources
Moved choices and hiscores out to Choices dir so the app can be run from read only media.
Iconbar menu changed to say "Choices...".
Info box updated from build system rather than __DATE__
Moved iconbar sprite to 0 baseline.
Changed frames in choices dialogues from R3 to R4.
Added an up front check that the 320 x 256 mode is available when run.
Import the sprite graphics and conversion programs (Numbers graphic regenerated).
Import the level generators.
Researched the authors of the original tracker mods, and updated the attribution text in game and in !Help with their credits.

Version 1.03. Tagged as 'Hopper-1_03'
@
text
@d47 1
a51 1
#include "error.h"
d65 1
d82 10
d102 2
@


1.2
log
@Changes to make it build
OSLib: and CLib: header file references changed to suite ROOL environment.
Makefile added.
Now builds, but missing some resource install steps.

Version 1.01. Tagged as 'Hopper-1_01'
@
text
@a40 1
#include "proginfo.h"	   /* Provide information about the program */
d47 1
d66 1
a66 2
  proginfo_initialise () ;
  app_hnd = wimp_initialise ( wimp_VERSION_RO2, info_name,
a118 3
  else if ( wdw == proginfo_hnd ) {
    iconbar_proginfo_clicked ( my_block ) ;
  }
@


1.1
log
@Initial revision
@
text
@d37 3
a39 3
/* The various includes for the module */
#include "OSLib:hourglass.h"
#include "CLib:stdlib.h"   /* Standard C library */
@


1.1.1.1
log
@Import of Hopper diversion
These are the sources to !Hopper 1.00 from 03-Dec-1996.
Special thanks to the original author, Simon Foster, for permissionto publish the sources to this diversion.
@
text
@@
