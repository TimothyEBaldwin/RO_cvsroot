head	1.5;
access;
symbols
	EtherH-4_59:1.5
	EtherH-4_58:1.4
	EtherH-4_57:1.3
	EtherH-4_56:1.2
	EtherH-4_55:1.2
	EtherH-4_54:1.1;
locks; strict;
comment	@# @;


1.5
date	2013.02.03.09.36.28;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	KsFXaENIUKMthJCw;

1.4
date	2012.10.13.21.06.53;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	gRDzXRcm019sJgow;

1.3
date	2012.10.13.21.01.21;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	x8Jt9KAXLv3CHgow;

1.2
date	2012.10.13.20.55.28;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	iWEN5VZZYRYzFgow;

1.1
date	2012.10.13.20.49.30;	author rsprowson;	state Exp;
branches;
next	;
commitid	wW7NhIHyp8SxDgow;


desc
@@


1.5
log
@Fix for dropping excessive numbers of transmitted fragmented IP packets
When transmitting packets larger than the MTU the Internet module splits them and so ends up with mbufs with back to back packets. The timing of the network chip access wasn't right so the packets got scrambled in the buffer RAM, and were sent either too short or too long.
A simple "ping -s 1600 other_pc" would have ~25% dropped packets, and a large file transfer via LanManFS would stall (due to 2s TCP/IP backoffs).
The microdelay function polled on the ROM to implement the delay but on a NIC this also cranks the 12 bit ROM counter which seems to interfer with the other CPLD functions.
c/init: function prototype tweaked
h/module: microdelay macro now polls on a read of the control register
s/Support: comment updated to reflect change

Tested on StrongARM Risc PC w/5.19 and A7000 w/3.71. 200 oversized pings completed with 0% dropped.

Version 4.59. Tagged as 'EtherH-4_59'
@
text
@/*
 * Copyright (c) 2002, Design IT
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef Module_h
#define Module_h

#define MICRODELAY(n) eh_microdelay((n),(const char *)en->cntrl_reg)
#define UNUSED(k)     (k)=(k)
#define MIN(a,b)      (((a)<(b))?(a):(b))
#define MAX(a,b)      (((a)>(b))?(a):(b))

/*
 * Message aliases.
 */
enum
{
    M0_WARNING_UK_INTERFACE = 0,
    M1_WARNING_UK_MAU,
    M2_EXPANSION_SLOT,
    M3_NETWORK_SLOT,
    M4_DIAG_START,
    M5_DIAG_FINISH,
    M6_STAT_HEADING,
    M7_STAT_MEASURE,
    M8_STAT_LOCATION,
    M9_STAT_EUI48,
    M10_STAT_CONTROLLER,
    M11_TYPE_VIRTUAL,
    M12_TYPE_FAULTY,
    M13_TYPE_ETHERLAN,
    M14_STAT_UNIT,
    M15_STAT_DRIVER,
    M16_STAT_MEDIA,
    M17_STAT_AUTHOR,
    M18_PACKET_SENT,
    M19_PACKET_RECEIVED,
    M20_STAT_BUFFER,
    M21_MAU_NONE,
    M22_MAU_10BT,
    M23_MAU_10B2,
    M24_MAU_MICRO_10BT,
    M25_MAU_MICRO_10B2,
    M26_MAU_UK,
    M27_MAU_INTEGRATED_10BT,
    M28_MAU_INTEGRATED_10B2,
    M29_MAU_INTEGRATED_UK,
    M30_IO_SEND_ERR,
    M31_IO_RECEIVE_ERR,
    M32_IO_COLLISIONS,
    M33_IO_REJECTS,
    M34_IO_NOMBUFS,
    M35_DMA_AVAILABLE,
    M36_DMA_UNAVAILABLE,
    M37_IO_OVERWRITES,
    M38_LINK_GOOD,
    M39_LINK_BAD,
    M40_POLARITY_CORRECT,
    M41_POLARITY_INCORRECT,
    M42_STAT_LINK,
    M43_FRAME_CLIENTS,
    M44_FRAME_TYPE,
    M45_MCAST_NOT_ENABLED,
    M46_MCAST_NON_ZERO,
    M47_MCAST_SUMMARY,
    M48_MCAST_REGS,
    M49_MODE_HEADER,
    M50_MODE_NORMAL,
    M51_MODE_MULTICAST,
    M52_MODE_PROMISCUOUS,
    M53_MODE_UNKNOWN,
    M54_MODE_WITH_ERRORS,
    M55_MODE_WITHOUT_ERRORS,
    M56_DRIVER_WARNING,
    M57_DRIVER_NOT_INIT,
    M58_DRIVER_NO_MBM,
    M59_DRIVER_LAST_LOG,
    M60_DRIVER_LAST_ERR
};
    
/*
 * Public functions.
 */
int eh_dciversion(_kernel_swi_regs *);
int eh_inquire(_kernel_swi_regs *);
int eh_getnetworkmtu(_kernel_swi_regs *);
int eh_setnetworkmtu(_kernel_swi_regs *);
int eh_transmit(_kernel_swi_regs *);
int eh_filter(_kernel_swi_regs *);
int eh_stats(_kernel_swi_regs *);
int eh_multicastrequest(_kernel_swi_regs *);
int free_filter(struct eh_softc *, int, u_char *);
_kernel_oserror *eh_error(int);
const char *eh_message(int, const char *, const char *, const char *);
const char *eh_sprint_mac(const u_char *);
void eh_call_protocol(DibRef, struct mbuf *, void *, int);
void eh_microdelay(int, const char *);
_kernel_oserror *mb_closesession(void);

/*
 * Public data.
 */
extern volatile int mbuf_present;
extern void *module_wsp;

#endif /* Module_h */

/* EOF Module.h */
@


1.4
log
@Internationalised
Enabled podule speed setting code to ensure speed A.
In tx_done(), don't assume anything about the opaque value from ensure_irqs_off().
Fixed looping in eh_init() to not turn off interrupts repeatedly for non present podules, also removed the call to Podule_ReadID since Podule_ReadHeader will error if there is no podule fitted anyway.
Tested on RISC OS 3.70 and RISC OS 5.19, 10000+ pings, and doing some file transfer loops via LanManFS.

Version 4.58. Tagged as 'EtherH-4_58'
@
text
@d31 1
a31 1
#define MICRODELAY(n) eh_microdelay((n),(const char *)en->rom)
@


1.3
log
@Recoded MICRODELAY to be processor speed/cache agnostic
Checked on a scope doing groups of 250/125/62us delays with interrupts disabled, wiggling an IO line.
Get podule/MEMC logical addresses from Podule_ReadInfo (falls back to table for pre RISC OS 3.50).

Version 4.57. Tagged as 'EtherH-4_57'
@
text
@d37 68
d117 1
@


1.2
log
@Replaced htons and friends with ${INETLIB} ones
Functions max() and min() changed for macros.
Made supporting assembler functions common -> support.s, so the IO sources just manipulate IO.
Unused header file 'int_hndlr.h' removed.
Resolved all the remaining compiler warnings.
File 'dma.c' compiles now, but is unused.
Substituted magic numbers for defines from exported header files where available.
Text for NIC slot 8 is now "Network slot" rather than "Expansion slot 8".
Builds but not tested. 26 bit only.

Version 4.55. Tagged as 'EtherH-4_55'
@
text
@d31 4
a34 3
#define UNUSED(k) (k)=(k)
#define MIN(a,b)  (((a)<(b))?(a):(b))
#define MAX(a,b)  (((a)>(b))?(a):(b))
d51 1
@


1.1
log
@Makefile recreated from fragments
CMHG file inserts version from VersionNum.
Use ensure_irqs_on/irqs_restore from AsmUtils.
Trimmed revision history now the code is in CVS.
Debug switch SHOW_INFO removed - there was no supporting code.
Dozens of minor warning fixups as the shared makefiles have stricter checking enabled by default.
Builds, tested on RISC OS 3.70. 26 bit only.

Version 4.54. Tagged as 'EtherH-4_54'
@
text
@d32 2
d35 3
d48 9
@

