head	1.8;
access;
symbols
	EtherH-4_56:1.7
	EtherH-4_55:1.5
	EtherH-4_54:1.4
	EtherH-4_53:1.3
	EtherH-4_52:1.1.1.1
	designit-4_52:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2012.10.13.21.01.21;	author rsprowson;	state dead;
branches;
next	1.7;
commitid	x8Jt9KAXLv3CHgow;

1.7
date	2012.10.13.20.58.37;	author rsprowson;	state Exp;
branches;
next	1.6;
commitid	622MTy7PdZDGGgow;

1.6
date	2012.10.13.20.56.54;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	4sVrnZlgMCe1Ggow;

1.5
date	2012.10.13.20.55.28;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	iWEN5VZZYRYzFgow;

1.4
date	2012.10.13.20.49.30;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	wW7NhIHyp8SxDgow;

1.3
date	2012.10.13.20.45.45;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	1E7Khr6vvCWfCgow;

1.2
date	2012.10.13.20.41.21;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	wjgMh8kSS5QCAgow;

1.1
date	2012.10.13.20.36.27;	author rsprowson;	state Exp;
branches
	1.1.1.1;
next	;
commitid	K58crg30YaBxygow;

1.1.1.1
date	2012.10.13.20.36.27;	author rsprowson;	state Exp;
branches;
next	;
commitid	K58crg30YaBxygow;


desc
@@


1.8
log
@Recoded MICRODELAY to be processor speed/cache agnostic
Checked on a scope doing groups of 250/125/62us delays with interrupts disabled, wiggling an IO line.
Get podule/MEMC logical addresses from Podule_ReadInfo (falls back to table for pre RISC OS 3.50).

Version 4.57. Tagged as 'EtherH-4_57'
@
text
@/*
 * Copyright (c) 2002, Design IT
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * $Header: /home/rool/cvsroot/bsd/RiscOS/Sources/Networking/Ethernet/EtherH/h/Xcb,v 1.7 2012/10/13 20:58:37 rsprowson Exp $
 * $Source: /home/rool/cvsroot/bsd/RiscOS/Sources/Networking/Ethernet/EtherH/h/Xcb,v $
 *
 * Copyright (c) 1989 Acorn Computers Ltd., Cambridge, England
 *
 * $Desc$
 * $Log: Xcb,v $
 * Revision 1.7  2012/10/13 20:58:37  rsprowson
 * 32 bitted the assembler
 * Only a couple of places make OS interface calls, everything else is called from APCS-32 C, so doesn't need to flag preserve.
 * Fixed *CONFIGURE output to not show a "Syntax:" error prefix.
 * Now uses device number queried from podule manager (or falls back to hardwired assignments if Podule_ReadInfo missing).
 *
 * Version 4.56. Tagged as 'EtherH-4_56'
 *
 * Revision 1.1  89/04/28  14:57:01  mark
 * Initial revision
 * 
 * 
 */
/* xcb.h
 *
 * Definitions for expansion card bus (XCB, formerly known
 * as "podule") device access.
 */
#ifndef  _XCB_
#define  _XCB_

typedef struct
{
    unsigned char id0,          _pad0[3];
    unsigned char flags,        _pad1[3];
    unsigned char unused,       _pad2[3];
    unsigned char product_lo,   _pad3[3];
    unsigned char product_hi,   _pad4[3];
    unsigned char company_lo,   _pad5[3];
    unsigned char company_hi,   _pad6[3];
    unsigned char country,      _pad7[3];
    union
    {
        char            d_char[4];
        unsigned char   d_uchar[4];
        short           d_short[2];
        unsigned short  d_ushort[2];
        int             d_int;
        unsigned int    d_uint;
    } data[1024-8];
} XCBID, *XCBIDRef;
/* bits in c_id0 field: */
#define XCB_ID0_IRQ             (1 << 0)        /* set if IRQ outstanding */
#define XCB_ID0_NOT_PRESENT     (1 << 1)        /* pull-up gives 1 if slot empty */
#define XCB_ID0_FIQ             (1 << 2)        /* set if FIQ outstanding */
#define XCB_ID0_EXTRA           (0xF8)          /* remaining 5 bits should be 0 */


/* expansion card source country codes */

#define XCB_COUNTRY_UK  0
#define XCB_COUNTRY_ITALY       4
#define XCB_COUNTRY_SPAIN       5
#define XCB_COUNTRY_FRANCE      6
#define XCB_COUNTRY_GERMANY     7
#define XCB_COUNTRY_PORTUGAL    8
#define XCB_COUNTRY_GREECE      10
#define XCB_COUNTRY_SWEDEN      11
#define XCB_COUNTRY_FINLAND     12
#define XCB_COUNTRY_DENMARK     14
#define XCB_COUNTRY_NORWAY      15
#define XCB_COUNTRY_ICELAND     16
#define XCB_COUNTRY_CANADA      17
#define XCB_COUNTRY_TURKEY      20

/* expansion card manufacturing company codes */

#define XCB_COMPANY_ACORNUK                     0
#define XCB_COMPANY_ACORNUSA                    1
#define XCB_COMPANY_OLIVETTI                    2
#define XCB_COMPANY_WATFORD                     3
#define XCB_COMPANY_COMPUTERCONCEPTS            4
#define XCB_COMPANY_INTELIGENTINTERFACES        5
#define XCB_COMPANY_CAMAN                       6
#define XCB_COMPANY_ARMADILLO                   7
#define XCB_COMPANY_SOFTOPTION                  8
#define XCB_COMPANY_WILDVISION                  9
#define XCB_COMPANY_ANGLOCOMPUTERS              10
#define XCB_COMPANY_RESOURCE                    11

/* expansion card product type codes */
#define XCB_PRODUCT_HOSTTUBE                    0 /* To a BBC */
#define XCB_PRODUCT_PARASITETUBE                1 /* To a second processor */
#define XCB_PRODUCT_SCSI                        2
#define XCB_PRODUCT_ETHERNET                    3
#define XCB_PRODUCT_IBMDISC                     4
#define XCB_PRODUCT_RAMROM                      5
#define XCB_PRODUCT_BBCIO                       6
#define XCB_PRODUCT_MODEM                       7
#define XCB_PRODUCT_TELETEXT                    8
#define XCB_PRODUCT_CDROM                       9
#define XCB_PRODUCT_IEEE488                     10
#define XCB_PRODUCT_WINCHESTER                  11
#define XCB_PRODUCT_ESDI                        12
#define XCB_PRODUCT_SMD                         13
#define XCB_PRODUCT_LASERPRINTER                14
#define XCB_PRODUCT_SCANNER                     15
#define XCB_PRODUCT_FASTRING                    16
#define XCB_PRODUCT_VMEBUS                      17
#define XCB_PRODUCT_PROMPROGRAMMER              18
#define XCB_PRODUCT_MIDI                        19
#define XCB_PRODUCT_MONOVPU                     20
#define XCB_PRODUCT_FRAMEGRABBER                21
#define XCB_PRODUCT_SOUNDSAMPLER                22
#define XCB_PRODUCT_VIDEODIGITISER              23
#define XCB_PRODUCT_GENLOCK                     24
#define XCB_PRODUCT_CODECSAMPLER                25
#define XCB_PRODUCT_IMAGEANALYSER               26
#define XCB_PRODUCT_ANALOGUEINPUT               27
#define XCB_PRODUCT_CDSOUNDSAMPLER              28
#define XCB_PRODUCT_6MIPSSIGPROC                29
#define XCB_PRODUCT_12MIPSSIGPROC               30
#define XCB_PRODUCT_33MIPSSIGPROC               31
#define XCB_PRODUCT_TOUCHSCREEN                 32
#define XCB_PRODUCT_TRANSPUTERLINK              33

/* Hardware addressing (via IOC) */

#define XCB_SPEED_SLOW          0
#define XCB_SPEED_MEDIUM        1
#define XCB_SPEED_FAST          2
#define XCB_SPEED_SYNC          3               /* slowest of all...(!) */              
#define SLOW   0
#define MEDIUM 1
#define FAST   2
#define SYNC   3
#define XCB_SPEED(speed) (speed)

#define XCB_SLOT_OFF(slot)      ((slot) << 14)
#define XCB_ADDRESS(speed, slot) \
        (0x03240000 + (XCB_SPEED(speed) << 19) + \
         XCB_SLOT_OFF(slot))

#define XCB_IDx(speed, slot) ((XCBIDRef)(XCB_ADDRESS (speed, slot)))
#define XCB_ID(slot)         XCB_IDx (SYNC, slot)       /* recommended speed */


/* XCB manager interface details */

#define XCB_SLOTS       4
#define XCB_MAX_ETHERNET_CARDS 2


/*
 * The XCBInfo structure contains card-identification information, as 
 * stored in ARM memory.  Each expansion card must also contain these
 * codes, in a standard format and location, so that the XCB manager 
 * can read the card ID and hence match cards to drivers.
 */
typedef struct xcb_info
{
    unsigned short product, company;
    unsigned char  country;
} XCBInfo, *XCBInfoRef;

#ifdef NOT_YET
typedef struct xcb_io_mem
{
    struct xcb_io_mem  *next;                   /* in access-def list */
    int flags;                                  /* b/w, r/w, speed, multi etc */
    unsigned short offset, len;                 /* area loc/len in words  */
} XCIOMem, *XCIOMemRef;
/*
 * Flags bits: 
 *      0..1:   I/O cycle speed use XCB_SPEED_xxx 
 *      2:      memc-space address (speed ignored)
 *      3:      readable
 *      4       writable
 *      5:      byte-wide (0 => halfword-wide) access
 *      6:      can use ldm/stm access as appropriate in this area
 *      7:      is multi-mapped fifo register (requires bit 6 also)
 */
#define XCIO_SPEED__MASK        (3 << 0)        /*  */
#endif 

    
/*
 * Expansion Card type record.  This is the means whereby an XCB
 * device driver is linked with the XCB manager, in a fashion
 * analogous to the normal cdevsw and bdevsw tables (note that most
 * expansion card drivers will also have entries in one or both of
 * those tables).  The file "xcbconf.c" in the kernel build directory
 * contains a table, xcb_type[], of expansion card type structures,
 * one for each supported card type; the count of entries is set in
 * the external int nxcb_type.  Adding an XCB device driver requires
 * the inclusion in xcb_type of an entry for the card type.  At boot
 * time, the expansion card bus is scanned for expansion cards; the ID
 * of each installed card is determined by reading the first few bytes
 * of XCB ID space for the slot the card resides in.  Only those cards
 * with IDs matching entries in xcb_type will be considered valid as
 * far as RISC iX is concerned.  For all valid cards, a sequence of
 * initialisation is then performed, as follows:
 * 
 *    {cpu priority level still at MAX_SPL}
 *    for each valid card               {round 1}
 *       if (card_type->init_high != NULL)
 *           (*card_type->init_high) (card_slot);
 *
 *    {cpu priority reduced to 0, but xcb interrupts disabled}
 *    for each valid card               {round 2}
 *       if (card_type->init_low != NULL)
 *           (*card_type->init_low) (card_slot, 0);
 *    enable interrupts from expansion card bus
 *    for each valid card               {round 3}
 *       if (card_type->init_low != NULL)
 *           (*card_type->init_low) (card_slot, 1);
 * 
 * The first round of calls is designed to allow a driver to bring its
 * hardware to a stable, non-interrupting, initialised state, before the
 * processor interrupt priority is dropped from its initial maximum
 * and interrupts are allowed in.  The "init_high" function must not
 * reduce the processor priority.
 *
 * The second round of calls, via the "init_low" field, permits
 * further initialisation if required, with general interrupts
 * enabled, but no interrupts from expansion cards (marked by the
 * second parameter being 0).  The standard Ethernet card uses this
 * call to perform a test routine during which each configured card is
 * checked for correct functionality: if the card is OK then it is
 * added to the driver's tables and an interrupt handler is declared
 * for it using the function decl_xcb_interrupt().
 *
 * During either of the first two initialisation calls to a driver,
 * the driver may call the function decl_xcb_interrupt(), to declare
 * to the interrupt manager the existence of an interrupt handler for
 * IRQs from a specific card.  At most one call may be made, for each
 * slot in which a valid card has been found.  In the case that the
 * hardware configuration does not include a full-spec backplane, as
 * indicated by (xcb_regs == (XCBRegsRef)0), any call to this function
 * (and to the function decl_xcb_irq_sense, for non-standard card
 * interrupt indication) MUST happen at this time: an attempt to call
 * it later will cause a panic.
 *
 * The third and last round of initialisation calls uses the same
 * entry point as the second round, but with a second parameter of 1,
 * marking the fact that by this point interrupts from expansion cards
 * have been enabled, and all declared xcb interrupt handlers can
 * potentially be called.  Again the processor priority level is 0.
 * The Ethernet driver uses this call to perform final setup for each
 * configured working Ethernet card, during which time the Ethernet
 * interrupt handler is functioning normally.
 *
 * During the second and third calls, the driver may raise and lower
 * priority as required, using the normal splnnn calls, but should
 * return with the SPL restored to 0.
 *
 * The finally xcb driver entry point is used when the system reboot
 * or halt mechanism is invoked (e.g. via the "reboot" or "halt"
 * programs); the function specified in the shutdown field will be
 * called, as follows:
 *
 *    {cpu priority at maximum}
 *    foreach valid card:
 *       if (card_type->shutdown != NULL)
 *           (*card_type->shutdown) (card_slot);
 *
 * This function should arrange to close off any activity on the
 * device and bring the card to a stable quiescent state such that
 * when the kernel passes control to RISC OS, the card (a) will not
 * generate any interrupts, and (b) is in a condition equivalent to
 * the hardware reset state, such that the ID bytes used to identify
 * the card are readable at the standard address.
 *
 * In all cases, the called function is passed the physical slot
 * number of the expansion card as its first only parameter; from this
 * the device address may be derived.  Multiple instances of the same
 * card type on the bus will cause multiple calls on the function, one
 * for each slot in which a card of the given type is found.
 */

typedef struct xcb_type
{
    XCBInfo id;                                 /* ROM ID values */
    int flags;                                  /* for various purposes */
#ifdef NOTYET
    XCIOMemRef io_mem;                          /* for user access */
#endif 
    void (*init_high) (/*int slot*/);           /* init function 1, max prio */
    void (*init_low) (/*int slot*/);            /* init function 2, prio 0 */
    void (*shutdown) (/*int slot*/);            /* reboot shutdown function */
} XCBType, *XCBTypeRef;


#ifdef KERNEL
extern XCBType xcb_type[];
extern int nxcb_type;
#endif



#ifdef KERNEL
/*
 * decl_xcb_interrupt
 *
 * The parameters to decl_xcb_interrupt have the following meanings:
 *
 * slot:        0..(XCB_SLOTS-1) - the card's physical slot number.
 * handler:     the address of a statically allocated interrupt handler
 *              record.  The ih_fn field should be set to the address of
 *              the interrupt handling function, and the ih_farg field 
 *              should contain a value to be passed to this function on
 *              interrupt; the ih_mask and ih_next fields must be left 
 *              entirely alone by the driver.
 * priority:    the interrupt level at which IRQs from the expansion card
 *              should be serviced (i.e. a PRIO_xxxx value).  Normally,
 *              interrupts from the slot will actually arrive at this spl;
 *              however on those few systems configured without a proper
 *              backplane but with multiple expansion cards running at 
 *              different priorities, the lowest specified priority will
 *              be used for the single hardware interrupt level, but the
 *              handler function will be called with the spl level set to
 *              the requested level.
 *
 * This requests that whenever an expansion card in the specified slot
 * generates an IRQ, handler->ih_fn will be called, with argument
 * handler->ih_farg, with spl set to priority.
 */

extern void decl_xcb_interrupt (/* int slot, 
                                   struct int_hndlr *handler,
                                   int priority */);
#endif 

/*
 * Structure describing the way in which an interrupt from a non-
 * standard expansion card may be detected by the XCB manager.  On
 * systems with a proper backplane this mechanism is not used: the
 * backplane registers give indication of individual XCB interrupts.
 * On systems (regretably there still are a number) without a proper
 * backplane, we need to cope with XCB devices where the "standard"
 * IRQ flag is not used (ID byte 0, bit 0, positive logic).  Such
 * devices include the winchester expansion card (which has a separate
 * register) and early (pre-issue 1) ethernet cards, where the ID byte
 * must be read at FAST speed as opposed to SYNC.  This mechanism
 * assumes that an interrupting card may be identified by reading a
 * flag word from a (slot-adjusted) address and testing it against a
 * mask, the result indicating IRQ presence (!=0) or absence (==0).
 */
typedef struct xcb_irq_sense
{
    int *flag;          /* Note: slot address bits set by xcb manager */
    int mask;
} XCBIRQSense, *XCBIRQSenseRef;

#ifdef KERNEL
/*
 * decl_xcb_irq_sense need be called only for non-standard cards
 * in systems where the full-spec backplane hardware is not fitted.
 * This can be tested by checking the contents of the external
 * variable xcb_regs (see xcbregs.h).  See the comment above about
 * the meaning of the XCBIRQSense structure.  Note that the slot-
 * specific part of the device address (bits 14,15) is controlled
 * by the XCB manager, and should be left 0 in the flag field of
 * the structure passed in.
 */
extern void decl_xcb_irq_sense (/*int slot, XCBIRQSenseRef sense*/);
#endif 


#endif 

/* EOF xcb.h */

@


1.7
log
@32 bitted the assembler
Only a couple of places make OS interface calls, everything else is called from APCS-32 C, so doesn't need to flag preserve.
Fixed *CONFIGURE output to not show a "Syntax:" error prefix.
Now uses device number queried from podule manager (or falls back to hardwired assignments if Podule_ReadInfo missing).

Version 4.56. Tagged as 'EtherH-4_56'
@
text
@d29 2
a30 2
 * $Header: /smsa/bsd:sys/arm/xcb.h:bsd  1.1  $
 * $Source: /smsa/bsd:sys/arm/xcb.h: $
d35 9
a43 1
 * $Log:        xcb.h,v $
@


1.6
log
@Lined up the assembler to familiar column numbers
No code changes, not tagged.
@
text
@@


1.5
log
@Replaced htons and friends with ${INETLIB} ones
Functions max() and min() changed for macros.
Made supporting assembler functions common -> support.s, so the IO sources just manipulate IO.
Unused header file 'int_hndlr.h' removed.
Resolved all the remaining compiler warnings.
File 'dma.c' compiles now, but is unused.
Substituted magic numbers for defines from exported header files where available.
Text for NIC slot 8 is now "Network slot" rather than "Expansion slot 8".
Builds but not tested. 26 bit only.

Version 4.55. Tagged as 'EtherH-4_55'
@
text
@@


1.4
log
@Makefile recreated from fragments
CMHG file inserts version from VersionNum.
Use ensure_irqs_on/irqs_restore from AsmUtils.
Trimmed revision history now the code is in CVS.
Debug switch SHOW_INFO removed - there was no supporting code.
Dozens of minor warning fixups as the shared makefiles have stricter checking enabled by default.
Builds, tested on RISC OS 3.70. 26 bit only.

Version 4.54. Tagged as 'EtherH-4_54'
@
text
@@


1.3
log
@Substitute 'mbuf', 'dcistructs', 'types', 'errors' from TCPIPLibs:
Insert version number from VersionNum.
Changed error numbers to use SETDCI4ERRNO(), a few were previously using the wrong offset from 0x20E00.
CMHG now generates a header file.
Textual SWI prefix is now "EtherH" for both EtherH8 and EtherH16 versions, since they use the same SWI base they can't coexist, and to match the prefix declared in the DIB block (slightly irrelevant for an ethernet driver since the DCI interface doesn't use SWI names).
Macro FREEM() replaced with m_freem(), also no longer checks for freeing NULL, since MbufManager does that.
Builds but not tested. 26 bit only.

Version 4.53. Tagged as 'EtherH-4_53'
@
text
@@


1.2
log
@Add explicit copyright header to all files
Builds but not tested. 26 bit only.
@
text
@d2 27
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of EtherH driver for i-cubed/Acorn/DesignIT NIC
Special thanks to Rob Cowell of Design IT for taking the time to locate the sources, and agreeing to them being published. 
This is EtherH 4.52, the last public release. 
Only changes
 - makefile now creates empty dirs (to avoid importing empty dirs into CVS)
 - local copies of Hdr: removed, assembler files point to exported central copies
Builds but not tested. 26 bit only.
@
text
@@
