head	1.6;
access;
symbols
	EtherH-4_59:1.6
	EtherH-4_58:1.6
	EtherH-4_57:1.6
	EtherH-4_56:1.6
	EtherH-4_55:1.4
	EtherH-4_54:1.3
	EtherH-4_53:1.2
	EtherH-4_52:1.1.1.1
	designit-4_52:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2012.10.13.20.58.41;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	622MTy7PdZDGGgow;

1.5
date	2012.10.13.20.56.57;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	4sVrnZlgMCe1Ggow;

1.4
date	2012.10.13.20.55.31;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	iWEN5VZZYRYzFgow;

1.3
date	2012.10.13.20.49.33;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	wW7NhIHyp8SxDgow;

1.2
date	2012.10.13.20.41.25;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	wjgMh8kSS5QCAgow;

1.1
date	2012.10.13.20.36.27;	author rsprowson;	state Exp;
branches
	1.1.1.1;
next	;
commitid	K58crg30YaBxygow;

1.1.1.1
date	2012.10.13.20.36.27;	author rsprowson;	state Exp;
branches;
next	;
commitid	K58crg30YaBxygow;


desc
@@


1.6
log
@32 bitted the assembler
Only a couple of places make OS interface calls, everything else is called from APCS-32 C, so doesn't need to flag preserve.
Fixed *CONFIGURE output to not show a "Syntax:" error prefix.
Now uses device number queried from podule manager (or falls back to hardwired assignments if Podule_ReadInfo missing).

Version 4.56. Tagged as 'EtherH-4_56'
@
text
@; Copyright (c) 2002, Design IT
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met: 
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of RISC OS Open Ltd nor the names of its contributors
;       may be used to endorse or promote products derived from this software
;       without specific prior written permission.
; 
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; POSSIBILITY OF SUCH DAMAGE.
;
;**************************************************************************
; Title:       Heron Ethernet Driver Source
; Author:      Douglas J. Berry
; File:        eh_io5_16.s
;
; Copyright (C) 1993 i-cubed Ltd
; Copyright (C) 2000 Design IT
;
;***************************************************************************


        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        
        EXPORT  eh_io_in
        EXPORT  eh_io_out_5
        EXPORT  eh_io_hout_5
        EXPORT  eh_flush_output_5
        
        AREA    io_etherlan500,CODE,READONLY

oddbyte         *       &100    ; Flags whether byte buffer is occupied

;**********************************************************************
;
;       copy packet header from src out to I/O port at dst
;
;       void eh_io_hout_5(u_char *src1, u_char src2, int type, u_int *dst)
;

eh_io_hout_5 ROUT
        Push    "r4-r10, lr"

        LDRB    r4, [r0]
        LDRB    r5, [r0, #1]
        ADD     r5, r4, r5, LSL #8
        MOV     r5, r5, LSL#16

        LDRB    r4, [r0, #2]
        LDRB    r6, [r0, #3]
        ADD     r6, r4, r6, LSL #8
        MOV     r6, r6, LSL#16

        LDRB    r4, [r0, #4]
        LDRB    r7, [r0, #5]
        ADD     r7, r4, r7, LSL #8
        MOV     r7, r7, LSL#16

        LDRB    r4, [r1]
        LDRB    r8, [r1, #1]
        ADD     r8, r4, r8, LSL #8
        MOV     r8, r8, LSL#16

        LDRB    r4, [r1, #2]
        LDRB    r9, [r1, #3]
        ADD     r9, r4, r9, LSL #8
        MOV     r9, r9, LSL#16

        LDRB    r4, [r1, #4]
        LDRB    r10, [r1, #5]
        ADD     r10, r4, r10, LSL #8
        MOV     r10, r10, LSL#16

        STMIA   r3, {r5-r10}
        MOV     r2, r2, LSL#16
        STR     r2, [r3]

        ; finished

        Pull    "r4-r10, pc"

;**********************************************************************
;
;       copy nbytes from src out to I/O port at dst
;
;       void eh_io_out_5(u_char *src, u_int *dst, int nbytes, u_int *bytebuf)
;

eh_io_out_5 ROUT
        Push    "r4-r10, lr"

        ; calculate how many single byte transfers are required
        ; to word align the source ADDress, skip if zero
        MOV     r12, r2
        MVN     r2, r0
        ADD     r2, r2, #5
        ANDS    r2, r2, #3
        BEQ     l0

        ; make sure that no. to align is <= total transfer count, then
        ; MOVe data across & decrement xfer count
        CMP     r2, r12
        MOVGT   r2, r12
        BL      byte_output
        SUB     r12, r12, r2

        ; calculate no. of 16 byte block transfers required
l0      MOVS    r2, r12, LSR #4
        BEQ     l2

        ; transfer as many bytes as possiBLe using load/store multiple routines;
        ; decide which block transfer routine to call: dependant upon whether
        ; or not there is an odd byte ouTSTanding
        LDR     r4, [r3]
        TST     r4, #oddbyte
        BNE     l1
        BL      even_block_output
        B       l2
l1
        BL      odd_block_output

        ; now transfer remaining bytes oNE at a time
l2      ANDS    r2, r12, #&0f
        BLNE    byte_output

        ; finished
        Pull    "r4-r10, pc"

;**********************************************************************
;
;       flush any odd byte remaining at end of transfer
;
;       void eh_flush_output_5(u_int *dst, u_int *bytebuf)
;
eh_flush_output_5 ROUT

        LDR     r1, [r1]
        TST     r1, #oddbyte
        MOVEQ   pc, lr
        BIC     r1, r1, #oddbyte
        ORR     r1, r1, r1, LSL #8
        MOV     r1, r1, LSL #16
        STR     r1, [r0]
        MOV     pc, lr

;**********************************************************************
;
;       transfer bytes from src (incremented) to 16-bit DMA port
;       at dst. must return with byte count preserved in r2
;
;       void byte_output(u_char *src, u_int *dst, int nbytes, u_char *bytebuf)
;
byte_output  ROUT
        LDR     r6, [r3]
        MOV     r4, #0

l01     CMP     r4, r2
        STREQ   r6, [r3]
        MOVEQ   pc, lr

        ; increment byte count, then get NExt src byte into r5. test to
        ; see whether we already have an odd byte
        ADD     r4, r4, #1
        LDRB    r5, [r0], #1
        TST     r6, #oddbyte

        ; no - mark as odd byte & repeat the loop
        ORREQ   r6, r5, #oddbyte
        BEQ     l01

        ; already have an odd byte - clear oddbyte marker,
        ; build 1/2 word & write it out
        BIC     r6, r6, #oddbyte
        ORR     r5, r6, r5, LSL #8
        MOV     r5, r5, LSL #16
        STR     r5, [r1]

        ; repeat the loop
        B       l01

;**********************************************************************
;
;       transfer 16 byte blocks of data to `aligNEd' destination
;       DMA port
;
;       void even_block_output(u_char *src, u_int *dst, int niterations)
;

even_block_output ROUT
        Push    "r3, lr"

        ; transfer NExt block
l02     LDMIA   r0!, {r3-r6}

        MOV     r10, r6
        MOV     r9, r6, LSL #16

        MOV     r8, r5
        MOV     r7, r5, LSL #16

        MOV     r6, r4
        MOV     r5, r4, LSL #16

        MOV     r4, r3
        MOV     r3, r3, LSL #16
        STMIA   r1, {r3-r10}

        ; decrement & test loop counter
        SUBS    r2, r2, #1
        BNE     l02

        ; finished
        Pull    "r3, pc"

;**********************************************************************
;
;       transfer 16 byte blocks of data to `non-aligNEd' destination
;       DMA port
;
;       void odd_block_output(u_char *src, u_int *dst, int niterations, u_int *bytebuf)
;

odd_block_output ROUT
        Push    "r11-r12, lr"

        ; load buffered byte & clear extraNEous bits from it
        STR     r3, [sp, #-4]!
        LDR     r3, [r3]
        AND     r3, r3, #&ff

        ; load NExt data block & preserve byte to be buffered
l03     LDMIA   r0!, {r4-r7}
        MOV     r11, r7, LSR #24

        ; shuffle data ready for transfer to 16-bit I/O space
        MOV     r12, r7, LSL #8
        MOV     r10, r7, LSL #24
        ORR     r10, r10, r6, LSR #8

        MOV     r9, r6, LSL #8
        MOV     r8, r6, LSL #24
        ORR     r8, r8, r5, LSR #8

        MOV     r7, r5, LSL #8
        MOV     r6, r5, LSL #24
        ORR     r6, r6, r4, LSR #8

        MOV     r5, r4, LSL #8
        MOV     r4, r4, LSL #24
        ORR     r4, r4, r3, LSL #16

        ; write this out & update byte buffer
        STMIA   r1, {r4-r10, r12}

        MOV     r3, r11

        ; decrement & test loop counter
        SUBS    r2, r2, #1
        BNE     l03

        ; reset marker in buffered byte, save it away then return
        ORR     r4, r3, #oddbyte
        LDR     r3, [sp], #4
        STR     r4, [r3]
        Pull    "r11-r12, pc"

;**********************************************************************
;
;       transfer data from 16-bit DMA port at src to dst. nbytes is always
;       rounded up to the NEarest whole number of half words.
;
; NOTE:
;
;       this routiNE will only work if the caller can ensure that only the
;       last call has an odd value for nbytes (data is not buffered between
;       calls)
;
;       void eh_io_in(u_int *src, u_char *dst, int nbytes)
;
eh_io_in ROUT
        Push    "r4-r10, lr"

        ; adjust nbytes if NEcessary & calculate no. of 16 byte block
        ; transfers rEQuired
        TST     r2, #1
        MOVEQ   r12, r2
        ADDNE   r12, r2, #1
        MOVS    r2, r12, LSR #4
        BLNE    even_block_input

        ; now transfer remaining data as single bytes
        ANDS    r2, r12, #&0f
        BLNE    byte_input

        ; finished
        Pull    "r4-r10, pc"

;**********************************************************************
;
;       transfer 1/2 words from DMA port at src to dst
;
;       void byte_input(u_int *src, u_char *dst, int nbytes)
;
byte_input ROUT

        ; divide byte counter by 2
        MOV     r2, r2, LSR #1

        ; transfer another 2 bytes (1/2 word)
l04     LDR     r3, [r0]
        STRB    r3, [r1], #1
        MOV     r3, r3, LSR #8
        STRB    r3, [r1], #1

        ; decrement counter & repeat loop
        SUBS    r2, r2, #1
        BNE     l04

        ; finished
        MOV     pc, lr

;**********************************************************************
;
;       transfer 16 byte blocks of data from 16-bit DMA port at src
;       to dst
;
;       void even_block_input(u_int *src, u_char *dst, int niterations)
;

even_block_input ROUT
        Push    "r12, lr"
        MOV     r12, #&ff
        ORR     r12, r12, r12, LSL #8

        ; load another 16 bytes from DMA port then write them to
        ; main memory
l05     LDMIA   r0, {r3-r10}

        AND     r3, r3, r12
        ORR     r3, r3, r4, LSL #16

        AND     r5, r5, r12
        ORR     r4, r5, r6, LSL #16

        AND     r7, r7, r12
        ORR     r5, r7, r8, LSL #16

        AND     r9, r9, r12
        ORR     r6, r9, r10, LSL #16

        STMIA   r1!, {r3-r6}

        ; decrement & test loop counter
        SUBS    r2, r2, #1
        BNE     l05

        ; finished
        Pull    "r12, pc"

        END

;       /* EOF Eh_io5_16.s */
@


1.5
log
@Lined up the assembler to familiar column numbers
No code changes, not tagged.
@
text
@d59 1
a59 1
        STMFD   sp!, {r4-r10,lr}
d97 1
a97 1
        LDMFD   sp!, {r4-r10, pc}^
d107 1
a107 1
        STMFD   sp!, {r4-r10,lr}
d126 1
a126 1
        BEQ     l1
d133 5
a137 2
        BLEQ    even_block_output
        BLNE    odd_block_output
d140 1
a140 1
l1      ANDS    r2, r12, #&0f
d144 1
a144 1
        LDMFD   sp!, {r4-r10, pc}^
d156 1
a156 1
        MOVEQS  pc, lr
d161 1
a161 1
        MOVS    pc, lr
d176 1
a176 1
        MOVEQS  pc, lr
d207 1
a207 1
        STMFD   sp!, {r3, lr}
d230 1
a230 1
        LDMFD   sp!, {r3, pc}^
d241 1
a241 1
        STMFD   sp!, {r11, r12, lr}
d282 1
a282 1
        LDMFD   sp!, {r11, r12, pc}^
d298 1
a298 1
        STMFD   sp!, {r4-r10, lr}
d313 1
a313 1
        LDMFD   sp!, {r4-r10, pc}^
d337 1
a337 1
        MOVS    pc, lr
d348 1
a348 1
        STMFD   sp!, {r12, lr}
d375 1
a375 1
        LDMFD   sp!, {r12, pc}^
@


1.4
log
@Replaced htons and friends with ${INETLIB} ones
Functions max() and min() changed for macros.
Made supporting assembler functions common -> support.s, so the IO sources just manipulate IO.
Unused header file 'int_hndlr.h' removed.
Resolved all the remaining compiler warnings.
File 'dma.c' compiles now, but is unused.
Substituted magic numbers for defines from exported header files where available.
Text for NIC slot 8 is now "Network slot" rather than "Expansion slot 8".
Builds but not tested. 26 bit only.

Version 4.55. Tagged as 'EtherH-4_55'
@
text
@d38 10
a47 13
                GET     Hdr:ListOpts
                GET     Hdr:Macros
                GET     Hdr:System

;
; Defines.
;
                EXPORT  eh_io_in
                EXPORT  eh_io_out_5
                EXPORT  eh_io_hout_5
                EXPORT  eh_flush_output_5

                AREA    io_etherlan500,CODE,READONLY
d51 1
a51 6
                ALIGN

;
;    **********************************************************************
;

d58 2
a59 2
eh_io_hout_5    ROUT
                STMFD   sp!, {r4-r10,lr}
d61 33
a93 4
                LDRB    r4, [r0]
                LDRB    r5, [r0, #1]
                ADD     r5, r4, r5, LSL #8
                MOV     r5, r5, LSL#16
d95 1
a95 4
                LDRB    r4, [r0, #2]
                LDRB    r6, [r0, #3]
                ADD     r6, r4, r6, LSL #8
                MOV     r6, r6, LSL#16
d97 1
a97 28
                LDRB    r4, [r0, #4]
                LDRB    r7, [r0, #5]
                ADD     r7, r4, r7, LSL #8
                MOV     r7, r7, LSL#16

                LDRB    r4, [r1]
                LDRB    r8, [r1, #1]
                ADD     r8, r4, r8, LSL #8
                MOV     r8, r8, LSL#16

                LDRB    r4, [r1, #2]
                LDRB    r9, [r1, #3]
                ADD     r9, r4, r9, LSL #8
                MOV     r9, r9, LSL#16

                LDRB    r4, [r1, #4]
                LDRB    r10, [r1, #5]
                ADD     r10, r4, r10, LSL #8
                MOV     r10, r10, LSL#16

                STMIA   r3, {r5-r10}
                MOV     r2, r2, LSL#16
                STR     r2, [r3]

;
;       finished
;
                LDMFD   sp!, {r4-r10, pc}^
d99 1
a99 3
;
;   **********************************************************************
;
d106 2
a107 42
eh_io_out_5     ROUT
                STMFD   sp!, {r4-r10,lr}

;
;       calculate how many single byte transfers are required
;       to word align the source ADDress, skip if zero
                MOV     r12, r2
                MVN     r2, r0
                ADD     r2, r2, #5
                ANDS    r2, r2, #3
                BEQ     l0

;
;       make sure that no. to align is <= total transfer count, then
;       MOVe data across & decrement xfer count
;
                CMP     r2, r12
                MOVGT   r2, r12
                BL      byte_output
                SUB     r12, r12, r2

;
;       calculate no. of 16 byte block transfers required
;
l0              MOVS    r2, r12, LSR #4
                BEQ     l1

;
;       transfer as many bytes as possiBLe using load/store multiple routines;
;       decide which block transfer routine to call: dependant upon whether
;       or not there is an odd byte ouTSTanding
;
                LDR     r4, [r3]
                TST     r4, #oddbyte
                BLEQ    even_block_output
                BLNE    odd_block_output

;
;       now transfer remaining bytes oNE at a time
;
l1              ANDS    r2, r12, #&0f
                BLNE    byte_output
d109 30
a138 4
;
;       finished
;
                LDMFD   sp!, {r4-r10, pc}^
d140 2
a141 3
;
;       **********************************************************************
;
d143 1
d149 1
a149 10
eh_flush_output_5
                ROUT
                LDR     r1, [r1]
                TST     r1, #oddbyte
                MOVEQS  pc, lr
                BIC     r1, r1, #oddbyte
                ORR     r1, r1, r1, LSL #8
                MOV     r1, r1, LSL #16
                STR     r1, [r0]
                MOVS    pc, lr
d151 8
a158 3
;
;       **********************************************************************
;
d160 1
d167 24
a190 3
byte_output     ROUT
                LDR     r6, [r3]
                MOV     r4, #0
d192 2
a193 35
l01             CMP     r4, r2
                STREQ   r6, [r3]
                MOVEQS  pc, lr

;
;       increment byte count, then get NExt src byte into r5. test to
;       see whether we already have an odd byte
;
                ADD     r4, r4, #1
                LDRB    r5, [r0], #1
                TST     r6, #oddbyte

;
;       no - mark as odd byte & repeat the loop
;
                ORREQ   r6, r5, #oddbyte
                BEQ     l01

;
;       already have an odd byte - clear oddbyte marker,
;       build 1/2 word & write it out
;
                BIC     r6, r6, #oddbyte
                ORR     r5, r6, r5, LSL #8
                MOV     r5, r5, LSL #16
                STR     r5, [r1]

;
;        repeat the loop
;
                B       l01

;
;       **********************************************************************
;
d195 1
d204 1
a204 6
                STMFD   sp!, {r3, lr}

;
;       transfer NExt block
;
l02             LDMIA   r0!, {r3-r6}
d206 2
a207 2
                MOV     r10, r6
                MOV     r9, r6, LSL #16
d209 2
a210 2
                MOV     r8, r5
                MOV     r7, r5, LSL #16
d212 2
a213 2
                MOV     r6, r4
                MOV     r5, r4, LSL #16
d215 2
a216 11
                MOV     r4, r3
                MOV     r3, r3, LSL #16
                STMIA   r1, {r3-r10}
;                STR     r3,[r1]
;                STR     r4,[r1]
;                STR     r5,[r1]
;                STR     r6,[r1]
;                STR     r7,[r1]
;                STR     r8,[r1]
;                STR     r9,[r1]
;                STR     r10,[r1]
d218 3
d222 3
a224 3
;       decrement & test loop counter
                SUBS    r2, r2, #1
                BNE     l02
d226 2
a227 6
;       finished
                LDMFD   sp!, {r3, pc}^

;
;       **********************************************************************
;
d229 1
a235 1
;
d238 1
a238 8
                STMFD   sp!, {r11, r12, lr}

;
;       load buffered byte & clear extraNEous bits from it
;
                STR     r3, [sp, #-4]!
                LDR     r3, [r3]
                AND     r3, r3, #&ff
d240 40
a279 57
;
;       load NExt data block & preserve byte to be buffered
;
l03             LDMIA   r0!, {r4-r7}
                MOV     r11, r7, LSR #24

;
;       shuffle data ready for transfer to 16-bit I/O space
;
                MOV     r12, r7, LSL #8
                MOV     r10, r7, LSL #24
                ORR     r10, r10, r6, LSR #8

                MOV     r9, r6, LSL #8
                MOV     r8, r6, LSL #24
                ORR     r8, r8, r5, LSR #8

                MOV     r7, r5, LSL #8
                MOV     r6, r5, LSL #24
                ORR     r6, r6, r4, LSR #8

                MOV     r5, r4, LSL #8
                MOV     r4, r4, LSL #24
                ORR     r4, r4, r3, LSL #16

;
;       write this out & update byte buffer
;
                STMIA   r1, {r4-r10, r12}
;                STR     r4,[r1]
;                STR     r5,[r1]
;                STR     r6,[r1]
;                STR     r7,[r1]
;                STR     r8,[r1]
;                STR     r9,[r1]
;                STR     r10,[r1]
;                STR     r12,[r1]

                MOV     r3, r11

;
;       decrement & test loop counter
;
                SUBS    r2, r2, #1
                BNE     l03

;
;       reset marker in buffered byte, save it away then return
;
                ORR     r4, r3, #oddbyte
                LDR     r3, [sp], #4
                STR     r4, [r3]
                LDMFD   sp!, {r11, r12, pc}^

;
;       **********************************************************************
;
d281 1
d294 2
a295 2
eh_io_in        ROUT
                STMFD   sp!, {r4-r10, lr}
d297 11
a307 9
;
;       adjust nbytes if NEcessary & calculate no. of 16 byte block
;       transfers rEQuired
;
                TST     r2, #1
                MOVEQ   r12, r2
                ADDNE   r12, r2, #1
                MOVS    r2, r12, LSR #4
                BLNE    even_block_input
d309 2
a310 14
;
;       now transfer remaining data as single bytes
;
                ANDS    r2, r12, #&0f
                BLNE    byte_input

;
;       finished
;
                LDMFD   sp!, {r4-r10, pc}^

;
;       **********************************************************************
;
d312 1
d318 1
a318 6
byte_input      ROUT

;
;       divide byte counter by 2
;
                MOV     r2, r2, LSR #1
d320 2
a321 7
;
;       transfer another 2 bytes (1/2 word)
;
l04             LDR     r3, [r0]
                STRB    r3, [r1], #1
                MOV     r3, r3, LSR #8
                STRB    r3, [r1], #1
d323 5
a327 5
;
;       decrement counter & repeat loop
;
                SUBS    r2, r2, #1
                BNE     l04
d329 3
a331 4
;
;       finished
;
                MOVS    pc, lr
d333 2
a334 3
;
;       **********************************************************************
;
d336 1
d345 3
a347 18
                STMFD   sp!, {r12, lr}
                MOV     r12, #&ff
                ORR     r12, r12, r12, LSL #8

;
;       load another 16 bytes from DMA port then write them to
;       main memory
;
l05             LDMIA   r0, {r3-r10}

;l05             LDR     r3,[r0]
;                LDR     r4,[r0]
;                LDR     r5,[r0]
;                LDR     r6,[r0]
;                LDR     r7,[r0]
;                LDR     r8,[r0]
;                LDR     r9,[r0]
;                LDR     r10,[r0]
d349 3
d353 2
a354 2
                AND     r3, r3, r12
                ORR     r3, r3, r4, LSL #16
d356 2
a357 2
                AND     r5, r5, r12
                ORR     r4, r5, r6, LSL #16
d359 2
a360 2
                AND     r7, r7, r12
                ORR     r5, r7, r8, LSL #16
d362 2
a363 2
                AND     r9, r9, r12
                ORR     r6, r9, r10, LSL #16
d365 1
a365 1
                STMIA   r1!, {r3-r6}
d367 3
a369 5
;
;       decrement & test loop counter
;
                SUBS    r2, r2, #1
                BNE     l05
d371 2
a372 8
;
;       finished
;
                LDMFD   sp!, {r12, pc}^

;
;   **********************************************************************
;
d374 1
a374 1
                END
@


1.3
log
@Makefile recreated from fragments
CMHG file inserts version from VersionNum.
Use ensure_irqs_on/irqs_restore from AsmUtils.
Trimmed revision history now the code is in CVS.
Debug switch SHOW_INFO removed - there was no supporting code.
Dozens of minor warning fixups as the shared makefiles have stricter checking enabled by default.
Builds, tested on RISC OS 3.70. 26 bit only.

Version 4.54. Tagged as 'EtherH-4_54'
@
text
@a40 2
                GET     Hdr:EnvNumbers
                GET     Hdr:ModHand
a48 2
                EXPORT  eh_call_protocol
                EXPORT  eh_call_back
d50 1
a50 1
                AREA    exit_control,CODE,READONLY
a486 31

;**********************************************************************
;
;               void eh_call_protocol(DibRef, struct mbuf *, void *, int);
;

eh_call_protocol
                ROUT
                STMFD   sp!, {r12, lr}
                MOV     r12, r2
                MOV     lr, pc
                MOV     pc, r3
                LDMFD   sp!, {r12, pc}^

;**********************************************************************
;
;               eh_call_back r12 -> pointer to Dib for device starting
;

eh_call_back
                ROUT
                STMFD   sp!, {r0-r3, lr}
                MOV     r0, r12
                MOV     r1, #&9d        ; Service_DCIDriverStatus
                MOV     r2, #0          ; starting
                MOV     r3, #400        ; major DCIVersion
                ; OSS 23 June 2001 We have been DCI 4.04 for ages
                ADD     r3, r3, #4      ; minor DCIVersion
                SWI     XOS_ServiceCall
                LDMFD   sp!, {r0-r3, pc}^

d493 1
a493 1
;       /* EOF eh_io_16.s */
@


1.2
log
@Add explicit copyright header to all files
Builds but not tested. 26 bit only.
@
text
@a34 2
; Initial Revision 1.0  9th June 1993  DJB
;
d494 2
a495 2
;               void eh_call_protocol(u_char *dib, u_char *mbuf, u_char *private,
;                                     u_char *handler)
@


1.1
log
@Initial revision
@
text
@d1 26
@


1.1.1.1
log
@Import of EtherH driver for i-cubed/Acorn/DesignIT NIC
Special thanks to Rob Cowell of Design IT for taking the time to locate the sources, and agreeing to them being published. 
This is EtherH 4.52, the last public release. 
Only changes
 - makefile now creates empty dirs (to avoid importing empty dirs into CVS)
 - local copies of Hdr: removed, assembler files point to exported central copies
Builds but not tested. 26 bit only.
@
text
@@
