head	1.4;
access;
symbols
	EtherH-4_59:1.3
	EtherH-4_58:1.3
	EtherH-4_57:1.3
	EtherH-4_56:1.3
	EtherH-4_55:1.3
	EtherH-4_54:1.3
	EtherH-4_53:1.2
	EtherH-4_52:1.1.1.1
	designit-4_52:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2013.07.05.07.28.05;	author rsprowson;	state dead;
branches;
next	1.3;
commitid	G0XXVsdWl5CMFfWw;

1.3
date	2012.10.13.20.49.33;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	wW7NhIHyp8SxDgow;

1.2
date	2012.10.13.20.41.26;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	wjgMh8kSS5QCAgow;

1.1
date	2012.10.13.20.36.27;	author rsprowson;	state Exp;
branches
	1.1.1.1;
next	;
commitid	K58crg30YaBxygow;

1.1.1.1
date	2012.10.13.20.36.27;	author rsprowson;	state Exp;
branches;
next	;
commitid	K58crg30YaBxygow;


desc
@@


1.4
log
@Loader made 26/32 bit compatible
Loader154.s: loader for EtherLan 100 and 500 series
Loader24.s: loader for EtherLan 200 series
Above two files only differed by 3 lines, so the difference is made into a switch and passed into a new combined source, Loader.s.
Made 26/32 bit compatible.

Tested on an EtherLan500 podule on RISC OS 3 and RISC OS 5.
No changes to network code, retagged as EtherH-4_59.
@
text
@; Copyright (c) 2002, Design IT
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met: 
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of RISC OS Open Ltd nor the names of its contributors
;       may be used to endorse or promote products derived from this software
;       without specific prior written permission.
; 
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; POSSIBILITY OF SUCH DAMAGE.
;
;**************************************************************************
; Title:       Podule Loader code for Ethernet interface card
; Author:      Douglas J. Berry
; File:        Loader.s
;
; Copyright (C) 1995 i-cubed ltd
; Copyright (C) 2000 Design IT
;
;***************************************************************************

                GET     Hdr:ListOpts
                GET     Hdr:Macros
                GET     Hdr:System
                GET     Hdr:EnvNumbers
                GET     Hdr:ModHand
                ORG     0

sp RN 13

NumChunks       *       1
LoaderOffset    *       8+8+(NumChunks*8)+4     ; Assumes only 1 chunk directory.

;; The loader begins with four entry points

Loader          B       Read                    ; Read byte at virtual address R1 to R0
                B       Write                   ; Write byte R0 at virtual address R1
                B       Reset                   ; Reset to initial state
                BICS    pc,lr,#V_bit            ; Call loader - NOT implemented

;; Read entry
;;
;; On entry     R1   Address to read
;;              R11  Base of synchronous ROM space
;; On exit      R0   Returned data
;;
;; The first call made to a loader will always be Read[0]

Read            STMFD   sp!,{r11,lr}            ; Save return address
                BIC     r11,r11,#&FF            ; Clear out CMOS address
                ADD     r2,r1,#LoaderSize       ; Add header size to get real address
; Use the real ROM.
UseROM          MOV     r3,r2,LSR#9             ; 512 byte page size
                CMP     r3,#1024                ; Page number valid?
                BCS     AddressIsTooBig
                MOV     r0,r3,LSR#8             ; Get top 2 bits for 4M bit devices.
                MOV     r0,r0,LSL#10            ; Put in bits 10 and 11.
                STRB    r3,[r11]                ; Write to page register.
                BIC     r2,r2,r3,LSL#9          ; Get offset into page
                ADD     r2,r2,r0                ; Add in bits 10 and 11.
                LDRB    r0,[r11,r2,LSL#2]       ; Get byte
                MOV     r3,#0                   ; Clear page register.
                STRB    r3,[r11]                ; Write to page register.
                LDMFD   sp!,{r11,pc}^           ; Return to caller

AddressIsTooBig
                ADR     r0,E_ATB                ;
                LDMFD   sp!,{r11,lr}            ; Fetch return address
                ORRS    pc,lr,#V_bit            ; Return with error

E_ATB           DCD     0
                DCB     "Address too big", 0
                ALIGN


;; Write byte - can't write to ROM!

Write           ADR     r0,ErrorWrite           ; Address error block
                ORRS    pc,lr,#V_bit            ; Return setting error indication

ErrorWrite      DCD     0
                DCB     "ROM not writeable",0
                ALIGN

;; Reset
;;
;; Set page to zero
;;
;; Assumes writing to ROM page register enabled.

Reset           MOV     r3,#0                   ; Select page
                STMFD   sp!,{r11,lr}            ; Save registers
                BIC     r11,r11,#&FF            ; Remove CMOS RAM pointer if present
                STRB    r3,[r11]                ; Write D0
                LDMFD   sp!,{r11,pc}^


LoaderSize      *       {PC}-Loader+LoaderOffset

                END
@


1.3
log
@Makefile recreated from fragments
CMHG file inserts version from VersionNum.
Use ensure_irqs_on/irqs_restore from AsmUtils.
Trimmed revision history now the code is in CVS.
Debug switch SHOW_INFO removed - there was no supporting code.
Dozens of minor warning fixups as the shared makefiles have stricter checking enabled by default.
Builds, tested on RISC OS 3.70. 26 bit only.

Version 4.54. Tagged as 'EtherH-4_54'
@
text
@@


1.2
log
@Add explicit copyright header to all files
Builds but not tested. 26 bit only.
@
text
@a34 19
; Initial Revision 1.0  11th August 1992  DJB
;
; History       DJB 8th March 1993
;               Modded to reset page register back to 0 after each call to Read
;
;               DJB 25th August 1993
;               It gets complicated !
;               Parts of ROM are now cached in RAM.
;
;               DJB 9th March 1995
;               Supports 512K byte (4 Mbit) ROM for EtherLan 100 and 500 only !
;
;               DJB 6th June 1995
;               Removed support for ROM cache, for DCIv4 driver.
;
;               OSS 16th June 2001 4.43
;               Someone put AREA statements into this code for 4.43, which
;               doesn't work considering it is built with AAasm
;
@


1.1
log
@Initial revision
@
text
@d1 26
@


1.1.1.1
log
@Import of EtherH driver for i-cubed/Acorn/DesignIT NIC
Special thanks to Rob Cowell of Design IT for taking the time to locate the sources, and agreeing to them being published. 
This is EtherH 4.52, the last public release. 
Only changes
 - makefile now creates empty dirs (to avoid importing empty dirs into CVS)
 - local copies of Hdr: removed, assembler files point to exported central copies
Builds but not tested. 26 bit only.
@
text
@@
