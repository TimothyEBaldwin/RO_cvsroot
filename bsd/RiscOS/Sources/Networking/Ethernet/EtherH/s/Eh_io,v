head	1.6;
access;
symbols
	EtherH-4_59:1.6
	EtherH-4_58:1.6
	EtherH-4_57:1.6
	EtherH-4_56:1.6
	EtherH-4_55:1.4
	EtherH-4_54:1.3
	EtherH-4_53:1.2
	EtherH-4_52:1.1.1.1
	designit-4_52:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2012.10.13.20.58.41;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	622MTy7PdZDGGgow;

1.5
date	2012.10.13.20.56.57;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	4sVrnZlgMCe1Ggow;

1.4
date	2012.10.13.20.55.31;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	iWEN5VZZYRYzFgow;

1.3
date	2012.10.13.20.49.33;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	wW7NhIHyp8SxDgow;

1.2
date	2012.10.13.20.41.24;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	wjgMh8kSS5QCAgow;

1.1
date	2012.10.13.20.36.27;	author rsprowson;	state Exp;
branches
	1.1.1.1;
next	;
commitid	K58crg30YaBxygow;

1.1.1.1
date	2012.10.13.20.36.27;	author rsprowson;	state Exp;
branches;
next	;
commitid	K58crg30YaBxygow;


desc
@@


1.6
log
@32 bitted the assembler
Only a couple of places make OS interface calls, everything else is called from APCS-32 C, so doesn't need to flag preserve.
Fixed *CONFIGURE output to not show a "Syntax:" error prefix.
Now uses device number queried from podule manager (or falls back to hardwired assignments if Podule_ReadInfo missing).

Version 4.56. Tagged as 'EtherH-4_56'
@
text
@; Copyright (c) 2002, Design IT
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met: 
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of RISC OS Open Ltd nor the names of its contributors
;       may be used to endorse or promote products derived from this software
;       without specific prior written permission.
; 
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; POSSIBILITY OF SUCH DAMAGE.
;
;**************************************************************************
; Title:       Heron Ethernet Driver Source
; Author:      Douglas J. Berry
; File:        eh_io.s
;
; Copyright (C) 1992 PSI Systems Innovations
; Copyright (C) 2000 Design IT
;
;***************************************************************************

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System

        EXPORT  eh_io_out
        EXPORT  eh_io_in

        AREA    io_etherlan,CODE,READONLY

;**********************************************************************
;
;       Copy nbytes from src out to 8-bit I/O port at dst.
;
;       No restrictions on source buffer alignment or size of transfer.
;
;       Comments;
;       Fairly optimal. Each byte requires an access to external memory.
;       Could be better to assemble bytes into words in register and then
;       send. However then have to start worrying about buffer alignment
;       and odd length transfers.
;
;       void eh_io_out(u_char *src, u_int *dst, int nbytes)
;
eh_io_out ROUT

        Push    "r4, lr"

        ANDS    r4, r2, #7
        BEQ     lpout2

lpout1  LDRB    r3, [r0], #1            ; Read byte from buffer and increment address.
        STRB    r3, [r1]                ; Write to DMA port.
        SUBS    r4, r4, #1              ; Decrement byte count.
        BNE     lpout1

lpout2  MOVS    r2, r2, LSR #3
        BEQ     lpoend

lpout3  LDRB    r3, [r0], #1            ; Read byte from buffer and increment address.
        STRB    r3, [r1]                ; Write to DMA port.
        LDRB    r3, [r0], #1            ; Read byte from buffer and increment address.
        STRB    r3, [r1]                ; Write to DMA port.
        LDRB    r3, [r0], #1            ; Read byte from buffer and increment address.
        STRB    r3, [r1]                ; Write to DMA port.
        LDRB    r3, [r0], #1            ; Read byte from buffer and increment address.
        STRB    r3, [r1]                ; Write to DMA port.
        LDRB    r3, [r0], #1            ; Read byte from buffer and increment address.
        STRB    r3, [r1]                ; Write to DMA port.
        LDRB    r3, [r0], #1            ; Read byte from buffer and increment address.
        STRB    r3, [r1]                ; Write to DMA port.
        LDRB    r3, [r0], #1            ; Read byte from buffer and increment address.
        STRB    r3, [r1]                ; Write to DMA port.
        LDRB    r3, [r0], #1            ; Read byte from buffer and increment address.
        STRB    r3, [r1]                ; Write to DMA port.

        SUBS    r2, r2, #1              ; Decrement byte count.
        BNE     lpout3

        ; Finished.
lpoend
        Pull    "r4, pc"

;
; Slow version.
;
seh_io_out ROUT

lpouts1 LDRB    r3, [r0], #1            ; Read byte from buffer and increment address.
        STRB    r3, [r1]                ; Write to DMA port.
        SUBS    r2, r2, #1              ; Decrement byte count.
        BNE     lpouts1

        MOV     pc, lr

;**********************************************************************
;
;       Transfer data from 8-bit DMA port at src to dst.
;       nbytes is always rounded up to the nearest whole number
;       of half words.
;
;       No restrictions on dst buffer alignment or size of transfer.
;
;       Comments;
;       Fairly optimal.
;
;       void eh_io_in(u_int *src, u_char *dst, int nbytes)
;
;
eh_io_in ROUT

        Push    "r4-r6, lr"

        ANDS    r4, r1, #3
        BEQ     lpin2

        ; Get *dst on a word boundary.
        SUB     r2, r2, r4              ; r2 = r2 - r4
lpin1   LDR     r3, [r0]                ; Read DMA port.
        STRB    r3, [r1], #1            ; Store byte and increment address pointer.
        SUBS    r4, r4, #1              ; Decrement byte count.
        BNE     lpin1

        ; r1 (= *dst) now on a word boundary.
lpin2   AND     r4, r2, #7              ; r4 = nbytes % 8
        MOVS    r2, r2, LSR #3          ; r2 = nbytes / 8
        BEQ     lpirem

lpin3   LDRB    r5, [r0]                ; Read DMA port.
        LDRB    r3, [r0]                ; Read DMA port.
        ADD     r5, r5, r3, LSL #8
        LDRB    r3, [r0]                ; Read DMA port.
        ADD     r5, r5, r3, LSL #16
        LDRB    r3, [r0]                ; Read DMA port.
        ADD     r5, r5, r3, LSL #24

        LDRB    r6, [r0]                ; Read DMA port.
        LDRB    r3, [r0]                ; Read DMA port.
        ADD     r6, r6, r3, LSL #8
        LDRB    r3, [r0]                ; Read DMA port.
        ADD     r6, r6, r3, LSL #16
        LDRB    r3, [r0]                ; Read DMA port.
        ADD     r6, r6, r3, LSL #24

        STMIA   r1!,{r5-r6}
        SUBS    r2, r2, #1              ; Decrement byte count.
        BNE     lpin3

        ; Now do remainder.
lpirem  MOVS    r4, r4
        BEQ     lpiend

lpin4   LDR     r3, [r0]                ; Read DMA port.
        STRB    r3, [r1], #1            ; Store byte and increment address pointer.
        SUBS    r4, r4, #1              ; Decrement byte count.
        BNE     lpin4

        ; Finished.
lpiend
        Pull    "r4-r6, pc"

;
; Slow version.
;
seh_io_in ROUT

lpins1  LDR     r3, [r0]                ; Read DMA port.
        STRB    r3, [r1], #1            ; Store byte and increment address pointer.
        SUBS    r2, r2, #1              ; Decrement byte count.
        BNE     lpins1

        MOV     pc, lr

        END

;       /* EOF Eh_io.s */
@


1.5
log
@Lined up the assembler to familiar column numbers
No code changes, not tagged.
@
text
@d62 1
a62 1
        STMFD   sp!, {r4, lr}
d97 1
a97 1
        LDMFD   sp!, {r4, pc}^
a103 2
        STMFD   sp!, {lr}

d109 1
a109 2
        LDMFD   sp!, {pc}^

d127 1
a127 1
        STMFD   sp!, {r4-r6, lr}
d175 1
a175 1
        LDMFD   sp!, {r4-r6, pc}^
a181 2
        STMFD   sp!, {lr}

d187 1
a187 1
        LDMFD   sp!, {pc}^
@


1.4
log
@Replaced htons and friends with ${INETLIB} ones
Functions max() and min() changed for macros.
Made supporting assembler functions common -> support.s, so the IO sources just manipulate IO.
Unused header file 'int_hndlr.h' removed.
Resolved all the remaining compiler warnings.
File 'dma.c' compiles now, but is unused.
Substituted magic numbers for defines from exported header files where available.
Text for NIC slot 8 is now "Network slot" rather than "Expansion slot 8".
Builds but not tested. 26 bit only.

Version 4.55. Tagged as 'EtherH-4_55'
@
text
@d37 3
a39 3
                GET     Hdr:ListOpts
                GET     Hdr:Macros
                GET     Hdr:System
d41 2
a42 7
;
; Defines.
;
                EXPORT  eh_io_out
                EXPORT  eh_io_in

                AREA    io_etherlan,CODE,READONLY
d44 1
a44 1
                ALIGN
a47 1
;
d60 1
a60 3
eh_io_out       ROUT

                STMFD   sp!, {r4, lr}
d62 1
a62 2
                ANDS    r4, r2, #7
                BEQ     lpout2
d64 2
a65 31
lpout1          LDRB    r3, [r0], #1            ; Read byte from buffer and increment address.
                STRB    r3, [r1]                ; Write to DMA port.
                SUBS    r4, r4, #1              ; Decrement byte count.
                BNE     lpout1

lpout2          MOVS    r2, r2, LSR #3
                BEQ     lpoend

lpout3          LDRB    r3, [r0], #1            ; Read byte from buffer and increment address.
                STRB    r3, [r1]                ; Write to DMA port.
                LDRB    r3, [r0], #1            ; Read byte from buffer and increment address.
                STRB    r3, [r1]                ; Write to DMA port.
                LDRB    r3, [r0], #1            ; Read byte from buffer and increment address.
                STRB    r3, [r1]                ; Write to DMA port.
                LDRB    r3, [r0], #1            ; Read byte from buffer and increment address.
                STRB    r3, [r1]                ; Write to DMA port.
                LDRB    r3, [r0], #1            ; Read byte from buffer and increment address.
                STRB    r3, [r1]                ; Write to DMA port.
                LDRB    r3, [r0], #1            ; Read byte from buffer and increment address.
                STRB    r3, [r1]                ; Write to DMA port.
                LDRB    r3, [r0], #1            ; Read byte from buffer and increment address.
                STRB    r3, [r1]                ; Write to DMA port.
                LDRB    r3, [r0], #1            ; Read byte from buffer and increment address.
                STRB    r3, [r1]                ; Write to DMA port.

                SUBS    r2, r2, #1              ; Decrement byte count.
                BNE     lpout3

; Finished.
;
lpoend          LDMFD   sp!, {r4, pc}^
d67 31
d102 1
a102 1
seh_io_out       ROUT
d104 1
a104 1
                STMFD   sp!, {lr}
d106 4
a109 4
lpouts1         LDRB    r3, [r0], #1            ; Read byte from buffer and increment address.
                STRB    r3, [r1]                ; Write to DMA port.
                SUBS    r2, r2, #1              ; Decrement byte count.
                BNE     lpouts1
d111 1
a111 1
                LDMFD   sp!, {pc}^
a115 1
;
d128 1
a128 3
eh_io_in        ROUT

                STMFD   sp!, {r4-r6, lr}
d130 1
a130 2
                ANDS    r4, r1, #3
                BEQ     lpin2
d132 2
a133 49
; Get *dst on a word boundary.
                SUB     r2, r2, r4              ; r2 = r2 - r4
lpin1           LDR     r3, [r0]                ; Read DMA port.
                STRB    r3, [r1], #1            ; Store byte and increment address pointer.
                SUBS    r4, r4, #1              ; Decrement byte count.
                BNE     lpin1

; r1 (= *dst) now on a word boundary.
lpin2           AND     r4, r2, #7              ; r4 = nbytes % 8
                MOVS    r2, r2, LSR #3          ; r2 = nbytes / 8
                BEQ     lpirem

lpin3           LDRB    r5, [r0]                ; Read DMA port.
                LDRB    r3, [r0]                ; Read DMA port.
                ADD     r5, r5, r3, LSL #8
                LDRB    r3, [r0]                ; Read DMA port.
                ADD     r5, r5, r3, LSL #16
                LDRB    r3, [r0]                ; Read DMA port.
                ADD     r5, r5, r3, LSL #24

                LDRB    r6, [r0]                ; Read DMA port.
                LDRB    r3, [r0]                ; Read DMA port.
                ADD     r6, r6, r3, LSL #8
                LDRB    r3, [r0]                ; Read DMA port.
                ADD     r6, r6, r3, LSL #16
                LDRB    r3, [r0]                ; Read DMA port.
                ADD     r6, r6, r3, LSL #24

                STMIA   r1!,{r5-r6}
                SUBS    r2, r2, #1              ; Decrement byte count.
                BNE     lpin3

; Now do remainder.
lpirem          MOVS    r4, r4
                BEQ     lpiend

lpin4           LDR     r3, [r0]                ; Read DMA port.
                STRB    r3, [r1], #1            ; Store byte and increment address pointer.
                SUBS    r4, r4, #1              ; Decrement byte count.
                BNE     lpin4

;
; Finished.
;
lpiend          LDMFD   sp!, {r4-r6, pc}^

;
;**********************************************************************
;
d135 44
d183 1
a183 3
seh_io_in        ROUT

                STMFD   sp!, {lr}
d185 1
a185 4
lpins1          LDR     r3, [r0]                ; Read DMA port.
                STRB    r3, [r1], #1            ; Store byte and increment address pointer.
                SUBS    r2, r2, #1              ; Decrement byte count.
                BNE     lpins1
d187 4
a190 1
                LDMFD   sp!, {pc}^
d192 1
a192 3
;
;       **********************************************************************
;
d194 1
a194 1
                END
@


1.3
log
@Makefile recreated from fragments
CMHG file inserts version from VersionNum.
Use ensure_irqs_on/irqs_restore from AsmUtils.
Trimmed revision history now the code is in CVS.
Debug switch SHOW_INFO removed - there was no supporting code.
Dozens of minor warning fixups as the shared makefiles have stricter checking enabled by default.
Builds, tested on RISC OS 3.70. 26 bit only.

Version 4.54. Tagged as 'EtherH-4_54'
@
text
@a36 1

a39 2
                GET     Hdr:EnvNumbers
                GET     Hdr:ModHand
a45 2
                EXPORT  eh_call_protocol
                EXPORT  eh_call_back
d47 1
a47 1
                AREA    exit_control,CODE,READONLY
a207 17

;**********************************************************************
;
;               void eh_call_protocol(DibRef, struct mbuf *, void *, int);
;

eh_call_protocol
                ROUT
                STMFD   sp!, {r0-r12, lr}
                MOV     r12, r2
                MOV     r2, #0
                MOV     lr, pc
                MOV     pc, r3
                LDMFD   sp!, {r0-r12, pc}^


;**********************************************************************
d209 1
a209 16
;               eh_call_back r12 -> pointer to Dib for device starting
;

eh_call_back
                ROUT
                STMFD   sp!, {r0-r3, lr}
                MOV     r0, r12
                MOV     r1, #&9d        ; Service_DCIDriverStatus
                MOV     r2, #0          ; starting
                MOV     r3, #400        ; major DCIVersion
                ; OSS 23 June 2001 We have been DCI 4.04 for ages
                ADD     r3, r3, #4      ; minor DCIVersion
                SWI     XOS_ServiceCall
                LDMFD   sp!, {r0-r3, pc}^

;   **********************************************************************
d214 1
a214 1
;       /* EOF eh_io.s */
@


1.2
log
@Add explicit copyright header to all files
Builds but not tested. 26 bit only.
@
text
@a34 2
; Initial Revision 1.0  18th August 1992  DJB
;
d216 2
a217 2
;               void eh_call_protocol(u_char *dib, u_char *mbuf, u_char *private,
;                                     int handler)
@


1.1
log
@Initial revision
@
text
@d1 26
@


1.1.1.1
log
@Import of EtherH driver for i-cubed/Acorn/DesignIT NIC
Special thanks to Rob Cowell of Design IT for taking the time to locate the sources, and agreeing to them being published. 
This is EtherH 4.52, the last public release. 
Only changes
 - makefile now creates empty dirs (to avoid importing empty dirs into CVS)
 - local copies of Hdr: removed, assembler files point to exported central copies
Builds but not tested. 26 bit only.
@
text
@@
