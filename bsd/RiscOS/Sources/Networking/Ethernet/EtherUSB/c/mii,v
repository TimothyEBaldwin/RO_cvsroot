head	1.9;
access;
symbols
	EtherUSB-0_41:1.9
	EtherUSB-0_40:1.8
	EtherUSB-0_39:1.8
	EtherUSB-0_38:1.7
	EtherUSB-0_37:1.7
	EtherUSB-0_36:1.7
	EtherUSB-0_35:1.7
	EtherUSB-0_34:1.7
	EtherUSB-0_33:1.7
	EtherUSB-0_32:1.7
	EtherUSB-0_31:1.7
	EtherUSB-0_30:1.7
	EtherUSB-0_29:1.7
	EtherUSB-0_28:1.7
	EtherUSB-0_27:1.7
	EtherUSB-0_26:1.7
	EtherUSB-0_25:1.6
	EtherUSB-0_24:1.6
	EtherUSB-0_23:1.6
	EtherUSB-0_22:1.6
	EtherUSB-0_21:1.6
	EtherUSB-0_20:1.6
	EtherUSB-0_19:1.6
	EtherUSB-0_18:1.6
	EtherUSB-0_17:1.6
	EtherUSB-0_16:1.5
	EtherUSB-0_15:1.4
	EtherUSB-0_14:1.3
	jpeacock-0_13:1.1;
locks; strict;
comment	@# @;


1.9
date	2018.03.21.23.54.42;	author jlee;	state Exp;
branches;
next	1.8;
commitid	FAdt578EOH7cRnvA;

1.8
date	2018.01.18.23.12.29;	author jlee;	state Exp;
branches;
next	1.7;
commitid	lRremJsVERKgCpnA;

1.7
date	2013.10.13.13.54.41;	author rsprowson;	state Exp;
branches;
next	1.6;
commitid	cLeOtNKk3nePB89x;

1.6
date	2012.05.19.08.44.28;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	6JuVMhjS8DSNlj5w;

1.5
date	2012.05.19.08.42.20;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	1BHJUY7zoQz3lj5w;

1.4
date	2012.05.19.08.39.06;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	sBdKYcdaXJwXjj5w;

1.3
date	2012.05.19.08.30.23;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	R1EOINZ5A36Ygj5w;

1.2
date	2012.05.19.08.22.12;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	SzPjH7uh6hKVdj5w;

1.1
date	2012.05.19.08.19.06;	author rsprowson;	state Exp;
branches;
next	;
commitid	q3rEKeu2RrS2cj5w;


desc
@@


1.9
log
@Add SMSC78xx support
Detail:
  c/smsc78xx, c/module, c/products, h/backends, Makefile - Add SMSC78xx driver, for the chip used in the Raspberry Pi 3B+
  c/config, c/mii, h/mii - Add support for gigabit MIIs & associated (auto) configuration
  c/net, h/net - Handle gigabit link types. Pass verbose flag through to backend info function.
  c/smsc95xx - Make configure_link const-correct
  Resources/UK/CmdHelp - Update *EJConfig syntaxt text to include 1000 option
  Resources/UK/Messages - Add 78xx backend name & device-specific info tokens
Admin:
  Tested on Raspberry Pi 3B & 3B+
  Manually configured gigabit links aren't supported yet
  Gigabit half-duplex isn't supported (78xx MAC limitation)
  For the 78xx, manually-configured full-duplex links appear to suffer terrible RX performance (as seen on 95xx). All supported auto modes appear to work correctly.


Version 0.41. Tagged as 'EtherUSB-0_41'
@
text
@//
// Copyright (c) 2006, James Peacock
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met: 
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of RISC OS Open Ltd nor the names of its contributors
//       may be used to endorse or promote products derived from this software
//       without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//

#include <stddef.h>

#include "kernel.h"

#include "module.h"
#include "utils.h"
#include "USB/USBDevFS.h"
#include "usb.h"
#include "mii.h"

#define DEBUG_MII 1

//---------------------------------------------------------------------------
void mii_initialise(mii_t* mii,
                    mii_read_fn* reader,
                    mii_write_fn* writer,
                    void* handle)
{
  if (DEBUG_MII) syslog("MII initialise");
  mii->handle = handle;
  mii->read = reader;
  mii->write = writer;
  mii->ok = false;
  mii->autoneg = false;
  mii->negotiating = false;
}

//---------------------------------------------------------------------------
// Does this look like a valid PHY? Returns NULL if so and
// err_bad_phy if not.
//---------------------------------------------------------------------------
_kernel_oserror* mii_present(mii_t* mii)
{
  uint16_t value;
  _kernel_oserror* e = mii->read(mii->handle, MII_STATUS, &value);
  if (e==err_translate(ERR_BAD_PHY)) return err_translate(ERR_BAD_DEVICE);
  if (e) return e;
  if (value==0) return err_translate(ERR_BAD_PHY);
  return NULL;
}

//---------------------------------------------------------------------------
// Reset PHY, driving all registers to default state. Set the control
// register reset bit and wait for it to be cleared by the device. If it
// takes over 0.5s, assume failure.
//
// Sets/clears internal 'ok' flag.
//---------------------------------------------------------------------------
_kernel_oserror* mii_reset(mii_t* mii)
{
  if (DEBUG_MII) syslog("MII reset");
  mii->negotiating = false;
  mii->ok = false;
  mii->autoneg = false;

  uint16_t control;
  _kernel_oserror* e = mii->read(mii->handle, MII_CONTROL, &control);

  if (!e) e = mii->write(mii->handle,
                         MII_CONTROL,
                         control | MII_CONTROL_RESET);
  int i = 0;
  while (!e)
  {
    if (++i==5)
    {
      e = err_translate(ERR_BAD_DEVICE);
      break;
    }

    e = mii->read(mii->handle, MII_CONTROL, &control);
    if (!e)
    {
      if (!(control & MII_CONTROL_RESET)) break;
      e = cs_wait(10);
    }
  }

  if (!e) mii->ok = true;
  return e;
}


//---------------------------------------------------------------------------
// Power down and isolate PHY. Note some devices hang if powered down and
// refuse to be powered up again, so just isolate for now.
//---------------------------------------------------------------------------
_kernel_oserror* mii_shutdown(mii_t* mii)
{
  if (DEBUG_MII) syslog("MII shutdown");
  uint16_t value;
  _kernel_oserror* e = mii->read(mii->handle, MII_CONTROL, &value);
  if (!e)
  {
    value |= MII_CONTROL_ISOLATE;
    e = mii->write(mii->handle, MII_CONTROL, value);
  }
  return e;
}

//---------------------------------------------------------------------------
// Read PHY capabilities, must be called directly after a reset.
//---------------------------------------------------------------------------
_kernel_oserror* mii_abilities(mii_t* mii, net_abilities_t* ab)
{
  if (DEBUG_MII) syslog("MII abilities");

  uint16_t status,ext_status=0;
  _kernel_oserror* e = mii->read(mii->handle, MII_STATUS, &status);
  if (e) return e;
  if (status & MII_STATUS_EXTD_STATUS)
  {
    e = mii->read(mii->handle, MII_EXTENDED_STATUS, &ext_status);
    if (e) return e;
  }

  ab->speed_10Mb  = ( (status & MII_STATUS_10BaseT_Full) ||
                      (status & MII_STATUS_10BaseT_Half) );

  ab->speed_100Mb = ( (status & MII_STATUS_100BaseTX_Full) ||
                      (status & MII_STATUS_100BaseTX_Half) ||
                      (status & MII_STATUS_100BaseT4     ) );

  // Ignore 1000BaseX since we have no way of configuring it
  ab->speed_1000Mb = ( /* (ext_status & MII_EXTD_STATUS_1000BaseX_Full) ||
                       (ext_status & MII_EXTD_STATUS_1000BaseX_Half) || */
                       (ext_status & MII_EXTD_STATUS_1000BaseT_Full) ||
                       (ext_status & MII_EXTD_STATUS_1000BaseT_Half) );

  ab->half_duplex = ( (status & MII_STATUS_10BaseT_Half  ) ||
                      (status & MII_STATUS_100BaseTX_Half) ||
                   /* (ext_status & MII_EXTD_STATUS_1000BaseX_Half) || */
                      (ext_status & MII_EXTD_STATUS_1000BaseT_Half) );

  ab->full_duplex = ( (status & MII_STATUS_10BaseT_Full  ) ||
                      (status & MII_STATUS_100BaseTX_Half) ||
                   /* (ext_status & MII_EXTD_STATUS_1000BaseX_Full) || */
                      (ext_status & MII_EXTD_STATUS_1000BaseT_Full) );

  ab->autoneg     = ((status & MII_STATUS_NWAY_ABILITY)!=0);

  ab->loopback = 1;

  return NULL;
}

//---------------------------------------------------------------------------
// Table of supported link technologies. Used for various lookups. Note that
// these are in order of the most preferred link types as required for
// resolving the result of the PHY's auto-negotiation.
//
// See IEEE Std 802.3-2008, Sections 2 & 3
//---------------------------------------------------------------------------
typedef struct
{
  uint16_t     advertised, ms_ctrl;
  uint16_t     partner, ms_stat;
  net_link_t   link;
  net_duplex_t duplex;
  net_speed_t  speed;
} link_t;

static const link_t s_links[] = {
  // 10GBaseT full
  
  { 0, MII_MS_CTRL_1000BaseT_Full, 0, MII_MS_STAT_1000BaseT_Full,
      net_link_1000BaseT_Full, net_duplex_full, net_speed_1000Mb },

  { 0, MII_MS_CTRL_1000BaseT_Half, 0, MII_MS_STAT_1000BaseT_Half,
      net_link_1000BaseT_Half, net_duplex_half, net_speed_1000Mb },

  { MII_ADVERT_100BaseTX_Full, 0, MII_PARTNER_100BaseTX_Full, 0,
      net_link_100BaseTX_Full, net_duplex_full, net_speed_100Mb },

  // 100BaseT2

  { MII_ADVERT_100BaseT4, 0, MII_PARTNER_100BaseT4, 0,
      net_link_100BaseT4, net_duplex_half, net_speed_100Mb },

  { MII_ADVERT_100BaseTX_Half, 0, MII_PARTNER_100BaseTX_Half, 0,
      net_link_100BaseTX_Half, net_duplex_half, net_speed_100Mb },

  { MII_ADVERT_10BaseT_Full, 0, MII_PARTNER_10BaseT_Full, 0,
      net_link_10BaseT_Full, net_duplex_full, net_speed_10Mb },

  { MII_ADVERT_10BaseT_Half, 0, MII_PARTNER_10BaseT_Half, 0,
      net_link_10BaseT_Half, net_duplex_half, net_speed_10Mb }
};

//---------------------------------------------------------------------------
// Autonegotiation configuration and resolution. These functions don't read
// or write to the PHY directly.
//
// See IEEE Std 802.3-2008, Section 2.
//---------------------------------------------------------------------------

static _kernel_oserror* config_autoneg(uint16_t* advertised,
                                       uint16_t* ms_ctrl,
                                       const net_config_t* cfg)

{
#if DEBUG_MII && DEBUG
  static const char* mii_link_string[] = {"Unknown",
                                         "10BaseT (Half)",
                                         "10BaseT (Full)",
                                         "100BaseTX (Half)",
                                         "100BaseTX (Full)",
                                         "100BaseT4",
                                         "1000BaseT (Half)",
                                         "1000BaseT (Full)"};
#endif
  
  // What is requested.
  net_speed_t speed   = cfg->speed;
  net_duplex_t duplex = cfg->duplex;
  net_link_t   link   = cfg->link;

  // Disable link types not matching the specification passed in cfg. This
  // assumes that 'advertised' has its default state, offering the full
  // capabilities of the device.
  bool any = false;
  for (int i=0, e=sizeof(s_links)/sizeof(link_t); i!=e; ++i)
  {
    if ((*advertised & s_links[i].advertised) || (*ms_ctrl & s_links[i].ms_ctrl))
    {
      if ((speed !=net_speed_unknown  && speed !=s_links[i].speed ) ||
          (duplex!=net_duplex_unknown && duplex!=s_links[i].duplex) ||
          (link  !=net_link_unknown   && link  !=s_links[i].link  ) )
      {
        // Supported link type incompatible with config. Mask it out.
        *advertised ^= s_links[i].advertised;
        *ms_ctrl ^= s_links[i].ms_ctrl;
        if (DEBUG_MII) syslog("  link type %i masked out:  %s", i,
                              mii_link_string[s_links[i].link]);
      }
      else
      {
        any = true;
        if (DEBUG_MII) syslog("  link type %i advertised:  %s", i,
                              mii_link_string[s_links[i].link]);
      }
    }
    else
    {
      if (DEBUG_MII) syslog("  link type %i unsupported: %s", i,
                            mii_link_string[s_links[i].link]);
    }
  }

  // Determine which level of pause support we should advertise
  (*advertised) &= ~(MII_ADVERT_SYM_PAUSE | MII_ADVERT_ASYM_PAUSE);
  if (cfg->allow_symmetric_pause)
  {
    *advertised |= MII_ADVERT_SYM_PAUSE;
    if (cfg->allow_rx_pause)
    {
      *advertised |= MII_ADVERT_ASYM_PAUSE;
    }
  }
  else if (cfg->allow_tx_pause)
  {
    *advertised |= MII_ADVERT_ASYM_PAUSE;
  }

  return any ? NULL : err_translate(ERR_UNSUPPORTED);
}

static bool resolve_link(net_status_t* status,
                         uint16_t      advertised,
                         uint16_t      ms_ctrl,
                         uint16_t      partner,
                         uint16_t      ms_stat)
{
  for (int i=0, e=sizeof(s_links)/sizeof(link_t); i!=e; ++i)
  {
    if (((advertised & s_links[i].advertised) || (ms_ctrl & s_links[i].ms_ctrl))&&
        ((partner    & s_links[i].partner) || (ms_stat & s_links[i].ms_stat)))
    {
      status->duplex = s_links[i].duplex;
      status->link   = s_links[i].link;
      status->speed  = s_links[i].speed;
      if (DEBUG_MII) syslog("  -> Link type %i", i);
      return true;
    }
  }

  status->duplex  = net_duplex_unknown;
  status->link    = net_link_unknown;
  status->speed   = net_speed_unknown;
  if (DEBUG_MII) syslog("  -> No common link type");
  return false;
}

static bool resolve_pause(net_status_t* status,
                          net_duplex_t  duplex,
                          uint16_t      advertised,
                          uint16_t      partner)
{
  status->tx_pause = false;
  status->rx_pause = false;

  // Pause only applicable to full duplex links.
  if (duplex == net_duplex_full)
  {
    const bool ap = advertised & MII_ADVERT_SYM_PAUSE;
    const bool aa = advertised & MII_ADVERT_ASYM_PAUSE;
    const bool pp = partner    & MII_PARTNER_SYM_PAUSE;
    const bool pa = partner    & MII_PARTNER_ASYM_PAUSE;

    if (!ap)
    {
      if (aa && pp && pa) status->tx_pause = true;
    }
    else if (!pp)
    {
      if (pa) status->rx_pause = true;
    }
    else
    {
      status->tx_pause = true;
      status->rx_pause = true;
    }

    if (DEBUG_MII)
    {
      syslog("  -> Tx pause: %s", status->tx_pause ? "yes" : "no");
      syslog("     Rx pause: %s", status->rx_pause ? "yes" : "no");
    }
  }

  return true;
}

//---------------------------------------------------------------------------
// Reconfigure PHY, must be reset beforehand.
//---------------------------------------------------------------------------
_kernel_oserror* mii_configure(mii_t* mii,
                               net_status_t* net_status,
                               const net_config_t* cfg)
{
  if (DEBUG_MII) syslog("MII configure");

  // Reset status.
  net_status->up = false;
  net_status->autoneg = net_autoneg_none;
  net_status->speed = net_speed_unknown;
  net_status->link = net_link_unknown;
  net_status->duplex = net_duplex_unknown;
  net_status->tx_pause = false;
  net_status->rx_pause = false;

  _kernel_oserror* e = mii_reset(mii);
  if (e) return e;

  uint16_t control;
  e = mii->read(mii->handle, MII_CONTROL, &control);
  if (e) return e;

  uint16_t status;
  e = mii->read(mii->handle, MII_STATUS, &status);
  if (e) return e;

  if (!(status & MII_STATUS_LINK_STATUS))
  {
    if (DEBUG_MII) syslog("  -> no link");
  }

  // Use auto-negotiation to configure device in preference to manual
  // configuration, even when requesting a particular link type.
  if (cfg->autoneg)
  {
    if (status & MII_STATUS_NWAY_ABILITY)
    {
      if (DEBUG_MII) syslog("MII start auto-negotiation");
      net_status->autoneg = net_autoneg_failed;
      mii->autoneg = true;

      // Configure auto-neg
      uint16_t advertise,ms_ctrl=0;
      e = mii->read(mii->handle, MII_NWAY_ADVERT, &advertise);
      if (!e && (status & MII_STATUS_EXTD_STATUS)) e = mii->read(mii->handle, MII_MASTER_SLAVE_CONTROL, &ms_ctrl);
      if (!e) e = config_autoneg(&advertise, &ms_ctrl, cfg);
      if (!e) e = mii->write(mii->handle, MII_NWAY_ADVERT, advertise);
      if (!e && (status & MII_STATUS_EXTD_STATUS)) e = mii->write(mii->handle, MII_MASTER_SLAVE_CONTROL, ms_ctrl);

      // Fire off auto-neg and wait for it to start
      control |= MII_CONTROL_NWAY_ENABLE | MII_CONTROL_NWAY_RESET;
      e = mii->write(mii->handle, MII_CONTROL, control);
      if (!e)
      {
        for (int polls=0; polls!=10; ++polls)
        {
          cs_wait(5);
          e = mii->read(mii->handle, MII_CONTROL, &control);
          if (e || !(control & MII_CONTROL_NWAY_RESET)) break;
        }

        if (!e & (control & MII_CONTROL_NWAY_RESET))
        {
          if (DEBUG_MII) syslog("  -> failed to start (timeout)");
          e = err_translate(ERR_TIMEOUT);
        }
      }
      if (!e)
      {
        net_status->autoneg = net_autoneg_started;
        mii->negotiating = true;
      }
    }
    else
    {
      // Auto-negotiation not available but config has demanded it. Shouldn't
      // get here if abilities were checked.
      e = err_translate(ERR_UNSUPPORTED);
    }
  }
  else
  {
    // Manual configuration. I don't think this works particularly well and
    // is only here as a fallback for when auto-neg is not possible.
    // E.g. currently we don't provide a way of manually configuring the PAUSE
    // mode to use.
    if (DEBUG_MII) syslog("MII manual configuration");

    control &= ~(MII_CONTROL_NWAY_ENABLE |
                 MII_CONTROL_SPEED100    |
                 MII_CONTROL_SPEED1000   |
                 MII_CONTROL_FULL_DUPLEX );

    switch (cfg->speed)
    {
      case net_speed_unknown: break;
      case net_speed_10Mb   : break;
      case net_speed_100Mb  : control |= MII_CONTROL_SPEED100; break;
      case net_speed_1000Mb : control |= MII_CONTROL_SPEED1000; break;
    }

    switch (cfg->duplex)
    {
      case net_duplex_full   : control |= MII_CONTROL_FULL_DUPLEX; break;
      case net_duplex_half   : break;
      case net_duplex_unknown: break;
    }

    e = mii->write(mii->handle, MII_CONTROL, control);
    if (!e)
    {
      net_status->speed       = cfg->speed;
      net_status->link        = net_link_unknown;
      net_status->duplex      = cfg->duplex;
    }

    mii->read(mii->handle, MII_CONTROL, &control);
  }

  return e;
}


//---------------------------------------------------------------------------
// Read current status from PHY. Could be called often so don't do too
// much in most cases.
//---------------------------------------------------------------------------
_kernel_oserror* mii_link_status(mii_t* mii, net_status_t* status)
{
  status->ok = mii->ok;
  if (!mii->ok)
  {
    status->up = false;
    return NULL;
  }

  uint16_t mii_status = 0;
  _kernel_oserror* e = mii->read(mii->handle, MII_STATUS, &mii_status);
  if (e) return e;
  status->up = ((mii_status & MII_STATUS_LINK_STATUS )!=0);

  // These two flags will have been cleared by reading the register.
  if (mii_status & MII_STATUS_REM_FAULT ) status->remote_faults++;
  if (mii_status & MII_STATUS_JABBER_DET) status->jabbers++;

  //syslog("MII: status check: %i %04X",status->up, mii_status);

  // Check to see if auto-negotiation has finished or been started by
  // someone else.
  if (mii->autoneg)
  {
    const bool negotiating = !(mii_status & MII_STATUS_NWAY_COMP);
    if (!negotiating && mii->negotiating)
    {
      if (DEBUG_MII) syslog("MII: auto-negotiation finished");
      mii->negotiating = false;
      status->autoneg = net_autoneg_failed;

      uint16_t advertise = 0,ms_ctrl = 0;
      e = mii->read(mii->handle, MII_NWAY_ADVERT, &advertise);
      if (!e && (mii_status & MII_STATUS_EXTD_STATUS)) e = mii->read(mii->handle, MII_MASTER_SLAVE_CONTROL, &ms_ctrl);

      uint16_t partner = 0,ms_stat = 0;
      if (!e) e = mii->read(mii->handle, MII_NWAY_PARTNER, &partner);
      if (!e && (mii_status & MII_STATUS_EXTD_STATUS)) e = mii->read(mii->handle, MII_MASTER_SLAVE_STATUS, &ms_stat);

      if (!e &&
          resolve_link(status, advertise, ms_ctrl, partner, ms_stat) &&
          resolve_pause(status, status->duplex, advertise, partner))
      {
        status->autoneg = net_autoneg_reconfigure;
      }
    }
    else if (negotiating && !mii->negotiating)
    {
      if (DEBUG_MII) syslog("MII: auto-negotiation started");
      status->autoneg = net_autoneg_started;
      mii->negotiating = true;
    }
  }
  return e;
}
@


1.8
log
@Improvements to SMSC 95xx backend and common MII handling
Detail:
  c/smsc95xx - Convert code to use the common MII backend. Reduce verbosity of debug output. Fix two sets of status callbacks running (callback_status_adapter + device_status). Tweak/refactor a couple of other bits as necessary in order to get 10M links working reliably.
  c/mii, h/mii, h/net - Allow backends to indicate their level of support for PAUSE functionality, so that we can advertise it correctly when performing auto-negotiation (previously no pause ability would have been advertised)
  c/config - Ensure config_parse_arguments passes through the PAUSE capabilities to the output net_config_t. Use the (currently unused) ERR_BAD_CONFIG for if autonegotiation is disabled but either speed or duplex setting not specified (avoids MII code or backends getting confused as to what options they should use)
  Resources/UK/Messages - Tweak wording of ERR_BAD_CONFIG so that it's more sensible for the new usage
  doc/!ReadMe - Remove the note about 10M links not being supported by the SMSC 95xx backend. Update the changelog to point people towards CVS for recent changes.
Admin:
  Tested on PandaBoard + Raspberry Pi 3, using SMSC 95xx and AX88772 devices
  SMSC testing results:
  * Previously, 10M links were non-functional
  * Previously, manually-configured 100M full duplex links would suffer terrible performance
  * Previously, any attempt to reconfigure a link on Pi 3 would result in a "Device broken or misbehaving" error? (or at least, that's how 0.38 is behaving for me now)
  * Now, all combinations of configuration (speed + link + auto/noauto) appear to work correctly, except for manually-configured full-duplex links, which still suffer from terrible performance
  AX88772 was used to verify MII changes haven't broken anything for other backends; testing showed no significant differences to previous version (all speed + link + auto/noauto modes working)
  Resolves ticket #342:
  https://www.riscosopen.org/tracker/tickets/342
  Note that currently the SMSC 95xx backend is the only backend to advertise PAUSE functionality via the common MII code; a future improvement would be to set up the other backends appropriately (set correct flags in net_abilities_t)


Version 0.39. Tagged as 'EtherUSB-0_39'
@
text
@d136 1
a136 1
  uint16_t status;
d139 6
d152 6
d159 3
a161 1
                      (status & MII_STATUS_100BaseTX_Half) );
d164 3
a166 1
                      (status & MII_STATUS_100BaseTX_Half) );
d178 1
a178 1
// resoling the result of the PHY's auto-negotiation.
d180 1
a180 1
// See IEEE Std 802.3-2008, Section 2.
d184 2
a185 2
  uint16_t     advertised;
  uint16_t     partner;
d193 6
a198 2
  // 1000BaseT full
  // 1000BaseT half
d200 1
a200 1
  { MII_ADVERT_100BaseTX_Full, MII_PARTNER_100BaseTX_Full,
d205 1
a205 1
  { MII_ADVERT_100BaseT4, MII_PARTNER_100BaseT4,
d208 1
a208 1
  { MII_ADVERT_100BaseTX_Half, MII_PARTNER_100BaseTX_Half,
d211 1
a211 1
  { MII_ADVERT_10BaseT_Full , MII_PARTNER_10BaseT_Full,
d214 1
a214 1
  { MII_ADVERT_10BaseT_Half, MII_PARTNER_10BaseT_Half,
d226 1
d236 3
a238 1
                                         "100BaseT4"};
d252 1
a252 1
    if (*advertised & s_links[i].advertised)
d260 1
d298 3
a300 1
                         uint16_t      partner)
d304 2
a305 2
    if ((advertised & s_links[i].advertised) &&
        (partner    & s_links[i].partner))
d407 1
a407 1
      uint16_t advertise;
d409 2
a410 1
      if (!e) e = config_autoneg(&advertise, cfg);
d412 1
d463 1
d523 1
a523 1
      uint16_t advertise = 0;
d525 1
d527 1
a527 1
      uint16_t partner = 0;
d529 1
d532 1
a532 1
          resolve_link(status, advertise, partner) &&
@


1.7
log
@Internationalised
AutoSense script updated to be able to parse both the hardwired english output (0.08-0.25 inclusive) and internationalised text (0.26+).
Tested RAM loaded on a Raspberry Pi.

Version 0.26. Tagged as 'EtherUSB-0_26'
@
text
@d254 15
d421 2
@


1.6
log
@Save 4.5kB by making the table of errors with objasm (so they're not all padded to 252 bytes by the compiler to fit into _kernel_oserror structs).
The 'moduleerr.s' source should be made redundant by internationalising the module.

Version 0.17. Tagged as 'EtherUSB-0_17'
@
text
@d209 9
d238 1
a238 1
                              net_link_string(s_links[i].link));
d244 1
a244 1
                              net_link_string(s_links[i].link));
d250 1
a250 1
                            net_link_string(s_links[i].link));
@


1.5
log
@Added autosense, and autosense install rule to makefile.
Now uses AsmUtils for irqs_on/irqs_off
Squash a few unused variable warnings, not in the backends though as porting updates would be more complex for those that come from (for example) NetBSD.
Changed to use structure definitions from sys/dcistructs.h (mostly an exercise in prefixing member names).

Version 0.16. Tagged as 'EtherUSB-0_16'
@
text
@d31 2
d64 1
a64 1
  if (e==&err_bad_phy) return &err_bad_device;
d66 1
a66 1
  if (value==0) return &err_bad_phy;
d95 1
a95 1
      e = &err_bad_device;
d245 1
a245 1
  return any ? NULL : &err_unsupported;
d377 1
a377 1
          e = &err_timeout;
d390 1
a390 1
      e = &err_unsupported;
@


1.4
log
@Uses common USB header files exported by the USB stack.
Use ModHand/Variables/RISCOS/OsByte headers.
Note, this has meant some header files needed reordering to prevent circular dependencies.

Version 0.15. Tagged as 'EtherUSB-0_15'
@
text
@a35 1
#include "dci.h"
@


1.3
log
@Brought under srccommit control for update of version numbers.
Makefile recreated from fragments
CMHG file renamed to avoid needing special rule to tell where it is.

Version 0.14. Tagged as 'EtherUSB-0_14'
@
text
@d29 2
d32 3
a36 2
#include "utils.h"
#include <stddef.h>
@


1.2
log
@Explicit BSD licence heading blocks added to those source files that did not have them.
No code changes, not tagged.
@
text
@d29 1
a31 1
#include "module.h"
@


1.1
log
@Import of sources to EtherUSB.
Special thanks to James Peacock for allowing ROOL to host these sources.
This import represents version 0.13 by James and the backend contributors, the only change being that the makefile wipes the directories it creates on cleaning so there's no need to import those to CVS.
Tagged as jpeacock-0_13.
@
text
@d1 27
a27 3
/* EtherUSB
 * (C) James Peacock, 2006.
 */
@

