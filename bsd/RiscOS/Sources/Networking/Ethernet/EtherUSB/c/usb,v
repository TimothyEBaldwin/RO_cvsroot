head	1.13;
access;
symbols
	EtherUSB-0_41:1.13
	EtherUSB-0_40:1.13
	EtherUSB-0_39:1.13
	EtherUSB-0_38:1.13
	EtherUSB-0_37:1.13
	EtherUSB-0_36:1.13
	EtherUSB-0_35:1.13
	EtherUSB-0_34:1.13
	EtherUSB-0_33:1.13
	EtherUSB-0_32:1.13
	EtherUSB-0_31:1.13
	EtherUSB-0_30:1.12
	EtherUSB-0_29:1.11
	EtherUSB-0_28:1.10
	EtherUSB-0_27:1.10
	EtherUSB-0_26:1.10
	EtherUSB-0_25:1.9
	EtherUSB-0_24:1.9
	EtherUSB-0_23:1.8
	EtherUSB-0_22:1.8
	EtherUSB-0_21:1.7
	EtherUSB-0_20:1.6
	EtherUSB-0_19:1.6
	EtherUSB-0_18:1.6
	EtherUSB-0_17:1.6
	EtherUSB-0_16:1.5
	EtherUSB-0_15:1.4
	EtherUSB-0_14:1.3
	jpeacock-0_13:1.1;
locks; strict;
comment	@# @;


1.13
date	2015.09.05.20.33.08;	author rool;	state Exp;
branches;
next	1.12;
commitid	hsW7lDmaNPcqz6Ay;

1.12
date	2015.01.11.10.25.44;	author rsprowson;	state Exp;
branches;
next	1.11;
commitid	2kyl1TV8jgmpPA5y;

1.11
date	2014.08.30.16.02.23;	author rsprowson;	state Exp;
branches;
next	1.10;
commitid	ZDJswl20osIWZoOx;

1.10
date	2013.10.13.13.54.42;	author rsprowson;	state Exp;
branches;
next	1.9;
commitid	cLeOtNKk3nePB89x;

1.9
date	2013.04.07.17.47.10;	author jlee;	state Exp;
branches;
next	1.8;
commitid	7koGNmobBUDhYRKw;

1.8
date	2012.10.31.21.56.11;	author jlee;	state Exp;
branches;
next	1.7;
commitid	VatbpwobWsJAqAqw;

1.7
date	2012.09.09.15.37.14;	author jlee;	state Exp;
branches;
next	1.6;
commitid	PX4F0vbh4EFd0Sjw;

1.6
date	2012.05.19.08.44.28;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	6JuVMhjS8DSNlj5w;

1.5
date	2012.05.19.08.42.21;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	1BHJUY7zoQz3lj5w;

1.4
date	2012.05.19.08.39.06;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	sBdKYcdaXJwXjj5w;

1.3
date	2012.05.19.08.30.24;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	R1EOINZ5A36Ygj5w;

1.2
date	2012.05.19.08.22.13;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	SzPjH7uh6hKVdj5w;

1.1
date	2012.05.19.08.19.07;	author rsprowson;	state Exp;
branches;
next	;
commitid	q3rEKeu2RrS2cj5w;


desc
@@


1.13
log
@Further throughput improvements
ax88772.c:
  Modified to work with changes made to net.c and usb.c.
  Increased buffer sizes, allow more than one packet receipt.
ax88172.c/mcs7830.c/pegasus.c:
  Modified to work with changes made to net.c and usb.c.
smsc95xx.c:
  Copyright header simplified by using pronoun form "the copyright holders" rather than repeating this list.
  Modified to work with changes made to net.c and usb.c.
  Reading of MAC address from EEPROM fixed.
products.c:
  Added SMSC9730 device id (uses smsc95xx backend).
net.c/net.h:
  tx_queue removed, all transmit buffering is now done in the USB code.
usb.c:
  Function usb_write() blocks until room is available, or times out.
  Use USBDriver header rather than defining local SWI numbers.
Messages:
  Renamed DescSMC token to DescSMC9.
  Removed redundant Stat7 statistic.

Submission from Colin Granville.
Tested on Pi B+ and OMAP3, not tested on OMAP4, but believed to markedly improve its performance over version 0.30.

Version 0.31. Tagged as 'EtherUSB-0_31'
@
text
@//
// Copyright (c) 2006, James Peacock
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of RISC OS Open Ltd nor the names of its contributors
//       may be used to endorse or promote products derived from this software
//       without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//

#include <stddef.h>
#include <stdarg.h>
#include <stdio.h>
#include <string.h>

#include "swis.h"
#include "kernel.h"
#include "Global/Services.h"
#include "Global/OsBytes.h"
#include "Global/RISCOS.h"
#include "Global/ModHand.h"
#undef   Module_Title
#include "Global/FSNumbers.h"
#include "Global/Upcall.h"
#include "Interface/HighFSI.h"
#include "Interface/USBDriver.h"
#include "AsmUtils/irqs.h"

#include "module.h"
#include "utils.h"
#include "USB/USBDevFS.h"
#include "usb.h"
#include "EtherUSBHdr.h"
#include "net.h"

#define DEBUG_TX 0
#define DEBUG_RX 0

_kernel_oserror* usb_scan_devices(usb_scan_devices_fn* fn, void* handle)
{
  USBServiceAnswer* next = NULL;

  _kernel_oserror* e = _swix(OS_ServiceCall, _INR(0,2)|_OUT(2),
                             Service_USB_Connected,
                             Service_USB,
                             0,
                             &next);
  while (next)
  {
    const USBServiceAnswer* current = next;
    next = next->link;

    if (!e) e = fn(&current->svc, handle);
    _swix(OS_Module, _IN(0)|_IN(2), ModHandReason_Free, current);
  }

  return e;
}

const usb_interface_descriptor_t*
  usb_find_interface(const USBServiceCall* s,
                     unsigned              config_no,
                     unsigned              interface_no,
                     unsigned              alternate_no)
{
  bool correct_config = false;

  const void* descriptor = usb_descriptor_list(s);
  while (descriptor)
  {
    const unsigned type = usb_descriptor_type(descriptor);
    const size_t   size = usb_descriptor_size(descriptor);

    if (type==UDESC_CONFIG &&
        size>=sizeof(usb_config_descriptor_t))
    {
      if (correct_config) return NULL;
      const usb_config_descriptor_t* c = descriptor;
      correct_config = (c->bConfigurationValue==config_no);
    }
    else if (correct_config &&
             type==UDESC_INTERFACE &&
             size>=sizeof(usb_interface_descriptor_t))
    {
      const usb_interface_descriptor_t* i = descriptor;
      if (i->bInterfaceNumber==interface_no &&
          i->bAlternateSetting==alternate_no) return i;
    }

    descriptor = usb_descriptor_next(descriptor);
  }
  return NULL;
}


_kernel_oserror* usb_location(const char *name,
                              uint8_t *location)
{
  return _swix(DeviceFS_CallDevice, _INR(0,1)|_IN(3),
               (1u<<31) + 4,
               name,
               location);
}

_kernel_oserror* usb_control(const char* name,
                             uint8_t     request_type,
                             uint8_t     request,
                             uint16_t    value,
                             uint16_t    index,
                             uint16_t    length,
                             void*       data)
{
  return _swix(DeviceFS_CallDevice, _INR(0,1)|_INR(3,6),
               1u<<31,
               name,
               request_type | (request<<8) | (value<<16),
               index | (length<<16),
               data,
               0);
}

_kernel_oserror* usb_set_config(const char* name, unsigned config)
{
  return usb_control(name,
                     USB_REQ_WRITE | USB_REQ_TP_STANDARD | USB_REQ_TO_DEVICE,
                     USB_REQ_SET_CONFIGURATION,
                     config,
                     0,
                     0,
                     NULL);
}

_kernel_oserror* usb_set_interface(const char* name,
                                   unsigned    interface,
                                   unsigned    alternate)
{
  return usb_control
    (name,
     USB_REQ_WRITE | USB_REQ_TP_STANDARD | USB_REQ_TO_INTERFACE,
     USB_REQ_SET_INTERFACE,
     alternate,
     interface,
     0,
     NULL);
}



struct usb_pipe
{
  usb_pipe_t       prev;
  usb_pipe_t       next;
  usb_open_t       direction;
  uint32_t         file_handle;
  uint32_t         buffer_handle;
  uint32_t         buffer_internal;
  uint32_t         buffer_code;
  uint32_t         buffer_r12;
  uint32_t         usb_handle;
  usb_handler_fn*  handler_fn;
  void*            handler_ws;
  char             device_name[20];
  char             file_name[];
};

static usb_pipe_t s_pipes;


_kernel_oserror* usb_open(const char*     device_name,
                          usb_pipe_t*     pipe,
                          usb_open_t      mode,
                          usb_handler_fn* handler_fn,
                          void*           handler_ws,
                          const char*     ft,
                          ...)
{
  *pipe = NULL;

  va_list ap;
  va_start(ap, ft);

  va_list ap2;
  va_copy(ap2, ap);
  const size_t len = vsnprintf(NULL, 0, ft, ap2)+1;
  va_end(ap2);

  usb_pipe_t p = xalloc(sizeof(struct usb_pipe) + len);
  if (p) vsnprintf(p->file_name, len, ft, ap);
  va_end(ap);

  if (!p) return err_translate(ERR_NO_MEMORY);

  strncpy(p->device_name, device_name, sizeof(p->device_name)-1);
  p->handler_fn = handler_fn;
  p->handler_ws = handler_ws;
  p->direction = mode;
  p->file_handle = 0;

  _kernel_oserror* e = _swix(OS_Find, _INR(0,1)|_OUT(0),
                             mode==USBRead ? 0x4f : 0x8f,
                             p->file_name,
                             &p->file_handle);

  if (!e) e = _swix(DeviceFS_CallDevice, _INR(0,2)|_OUT(3)|_OUT(5),
                    (1u<<31) + 7u,
                    p->device_name,
                    p->file_handle,
                    &p->buffer_handle,
                    &p->usb_handle);

  if (!e) e = _swix(Buffer_InternalInfo, _IN(0)|_OUTR(0,2),
                    p->buffer_handle,
                    &p->buffer_internal,
                    &p->buffer_code,
                    &p->buffer_r12);

  if (!e && mode==USBWrite)
  {
    size_t size = 0;
    _swix(Buffer_GetInfo, _IN(0)|_OUT(5), p->buffer_handle, &size);
    _swix(Buffer_Threshold, _INR(0,1), p->buffer_handle, size);
    _swix(Buffer_ModifyFlags, _INR(0,2), p->buffer_handle, 0x8, 0xfffffff7);
  }

  if (!e && mode==USBRead)
  {
    // Disable read buffer padding weirdness.
    e = _swix(DeviceFS_CallDevice, _INR(0,4),
              (1u<<31) + 8u,
              p->device_name,
              p->usb_handle,
              0x00000001,
              0xfffffffe);
  }


  if (!e)
  {
    int irq = ensure_irqs_off();
    LINKEDLIST_INSERT(s_pipes, p);
    restore_irqs(irq);
    *pipe = p;
    return NULL;
  }

  syslog("usb_open() for '%s' failed with '%s'", p->file_name, e->errmess);

  if (p->file_handle!=0) _swix(OS_Find, _INR(0,1), 0, p->file_handle);
  xfree(p);

  return e;
}

_kernel_oserror* usb_force_short_xfer(usb_pipe_t pipe)
{
  return _swix(DeviceFS_CallDevice, _INR(0,4),
              (1u<<31) + 8u,
              pipe->device_name,
              pipe->usb_handle,
              0x00000002,
              0xfffffffd);
}

#if 0
_kernel_oserror* usb_clear_stall(usb_pipe_t pipe)
{
  return _swix(DeviceFS_CallDevice, _INR(0,2),
              (1u<<31) + 5u,
              pipe->device_name,
              pipe->file_handle);
}
#endif

_kernel_oserror* usb_close(usb_pipe_t* pipe)
{
  if (!*pipe) return NULL;

  int irq = ensure_irqs_off();
  LINKEDLIST_REMOVE(s_pipes, *pipe);
  restore_irqs(irq);

  if ((*pipe)->file_handle!=0)
  {
    _kernel_oserror* e =_swix(OS_Byte, _INR(0,1),
                              OsByte_FlushBuffer, (*pipe)->buffer_handle);

    if (e) syslog("%s: usb_close() error during buffer flush: %s",
                           (*pipe)->file_name,e->errmess);

    e = _swix(OS_Find, _INR(0,1), 0, (*pipe)->file_handle);
    (*pipe)->file_handle = 0;

    if (e) syslog("%s: usb_close() failed close: %s",
                           (*pipe)->file_name,e->errmess);
  }

  xfree(*pipe);
  *pipe = NULL;
  return NULL;
}

size_t usb_buffer_free(usb_pipe_t pipe)
{
  size_t buf_free;
  __asm
  {
    MOV      R0,#7
    MOV      R1,pipe->buffer_internal
    MOV      R12,pipe->buffer_r12
    BLX      pipe->buffer_code,{R0,R1,R12},{R2},{LR,PSR}
    MOV      buf_free,R2
  }
  return buf_free;
}

size_t usb_buffer_used(usb_pipe_t pipe)
{
  size_t buf_used;

  __asm
  {
    MOV      R0,#6
    MOV      R1,pipe->buffer_internal
    MOV      R12,pipe->buffer_r12
    BLX      pipe->buffer_code,{R0,R1,R12},{R2},{LR,PSR}
    MOV      buf_used,R2
  }
  return buf_used;
}

_kernel_oserror* usb_write(usb_pipe_t  pipe,
                           const void* data,
                           size_t*     size)
{
  size_t buf_free;
  int32_t start_time, time_now;

  _swix(OS_ReadMonotonicTime, _OUT(0), &start_time);

  for (;;)
  {
    __asm
    {
      MOV      R0,#7
      MOV      R1,pipe->buffer_internal
      MOV      R12,pipe->buffer_r12
      BLX      pipe->buffer_code,{R0,R1,R12},{R2},{LR,PSR}
      MOV      buf_free,R2
    }

    // Must block until room is available in buffer.
    // Returning if no room available causes a drastic slowdown.
    // Blocking normally should only be for a maximum 1-2ms.
    if (buf_free >=*size) break;
    
    // But timeout incase the loop blocks too long.
    _swix(OS_ReadMonotonicTime, _OUT(0), &time_now);
    if (time_now - start_time > 10) break;
  } 

  if (buf_free<*size)
  {
    *size = 0;
    return NULL;
  }

  if (DEBUG_TX) syslog("usb_write(): %zu bytes, buffer space %zu",
                       *size, buf_free);

  __asm
  {
    MOV      R0,#1
    MOV      R1,pipe->buffer_internal
    MOV      R2,data
    MOV      R3,*size
    MOV      R12,pipe->buffer_r12
    BLX      pipe->buffer_code,{R0-R3,R12},{},{R2,R3,LR,PSR}
  }

  return NULL;
}

_kernel_oserror* usb_start_read(usb_pipe_t pipe)
{
  if (DEBUG_RX) syslog("usb_start_read()");

  // r3 is undocumented and is the amount of data being requested.
  // This is kept as a large value so that usb IN requests return
  // as much data as is available.
  _kernel_oserror *e = _swix(DeviceFS_CallDevice, _INR(0,3),
                             3, pipe->device_name,
                             pipe->usb_handle, 1u<<30);

  if (e) syslog("usb_start_read() failed with '%s'", e->errmess);
  return e;
}


_kernel_oserror* usb_read(usb_pipe_t   pipe,
                          void*        data,
                          size_t*      size)
{
  if (DEBUG_RX) syslog("usb_read()");

  if (!pipe || pipe->file_handle==0)
  {
    *size = 0;
    return NULL;
  }

  size_t bufused = 0;
  __asm
  {
    MOV      R0,#6
    MOV      R1,pipe->buffer_internal
    MOV      R12,pipe->buffer_r12
    BLX      pipe->buffer_code,{R0,R1,R12},{R2},{LR,PSR}
    MOV      bufused,R2
  }

  size_t to_read = *size;
  if (to_read>bufused) to_read = bufused;

  if (DEBUG_RX) syslog("  size=%zu, bufused=%zu", *size, bufused);

  if (to_read==0)
  {
    *size = 0;
    return NULL;
  }

  __asm
  {
    MOV      R0,#3
    MOV      R1,pipe->buffer_internal
    MOV      R2,data
    MOV      R3,to_read
    MOV      R12,pipe->buffer_r12
    BLX      pipe->buffer_code,{R0-R3,R12},{},{R2,R3,LR,PSR}
    MOV      R0,#8
    BLX      pipe->buffer_code,{R0,R1,R12},{},{LR,PSR}
  }

  *size = to_read;
  return NULL;
}

int usb_upcall_hook_handler(_kernel_swi_regs *r, void *pw)
{
  if (r->r[0]!=UpCall_DeviceRxDataPresent) return 1;
  
  usb_pipe_t pipe = s_pipes;
  while (pipe)
  {
    if (r->r[0]==UpCall_DeviceRxDataPresent && r->r[1]==pipe->file_handle &&
                pipe->direction==USBRead)
    {
      // Data has entered a previously empty DeviceFS read stream
      // buffer.
      if (DEBUG_RX) syslog("Rx Buffer data present");
      if (pipe->handler_fn) pipe->handler_fn(pipe, pipe->handler_ws);
      return 1;
    }
    pipe = pipe->next;
  }

  UNUSED(pw);

  return 1;
}

int usb_fscontrol_hook_handler(_kernel_swi_regs *r, void *pw)
{
  if ((r->r[0] != FSControl_Shut) && (r->r[0] != FSControl_ShutDown))
    return 1;

  UNUSED(pw);

  syslog("fscontrol_hook_handler shut/shutdown detected");
  /* Assume FileSwitch hasn't received the message yet. Go round and shutdown all devices with open pipes. */
  while(s_pipes)
  {
    net_dead_device(s_pipes->device_name);
  }
  syslog("fscontrol_hook_handler done");

  return 1;
}

int usb_find_hook_handler(_kernel_swi_regs *r, void *pw)
{
  if (r->r[0] != OSFind_Close)
    return 1;

  UNUSED(pw);

  if (r->r[1])
  {
    /* Do we own this file? */
    usb_pipe_t pipe = s_pipes;
    while (pipe)
    {
      if(pipe->file_handle == r->r[1])
      {
        syslog("find_hook_handler file close detected");
        net_dead_device(pipe->device_name);
        return 1;
      }
      pipe = pipe->next;
    }
  }
  else
  {
    /* Is DeviceFS current FS? */
    int fs;
    _kernel_oserror *e = _swix(OS_Args,_INR(0,1)|_OUT(1),0,0,&fs);
    if(!e && (fs == fsnumber_DeviceFS))
    {
      syslog("find_hook_handler close all detected");
      /* Assume FileSwitch hasn't received the message yet. Go round and shutdown all devices with open pipes. */
      while(s_pipes)
      {
        net_dead_device(s_pipes->device_name);
      }
      syslog("find_hook_handler done");
    }
  }
  return 1;
}

static bool s_upcall_claimed = false;
static bool s_fscontrol_claimed = false;
static bool s_find_claimed = false;

_kernel_oserror* usb_initialise(void)
{
  if (s_upcall_claimed) return NULL;

  unsigned version = 0;
  _kernel_oserror* e = _swix(USBDriver_Version, _OUT(0), &version);
  if (e || version<49) return err_translate(ERR_USB_TOO_OLD);

  e = _swix(OS_Claim, _INR(0,2), UpCallV, &usb_upcall_hook, g_module_pw);
  if (!e) s_upcall_claimed = true;

  if (!e) e = _swix(OS_Claim, _INR(0,2), FSCV, &usb_fscontrol_hook, g_module_pw);
  if (!e) s_fscontrol_claimed = true;

  if (!e) e = _swix(OS_Claim, _INR(0,2), FindV, &usb_find_hook, g_module_pw);
  if (!e) s_find_claimed = true;

  if(e) usb_finalise();

  return e;
}

_kernel_oserror* usb_finalise(void)
{
  _kernel_oserror *e = NULL;

  if (s_upcall_claimed)
  {
    e = _swix(OS_Release, _INR(0,2), UpCallV, &usb_upcall_hook, g_module_pw);
    if(e)
      return e;
    s_upcall_claimed = false;
  }

  if (s_fscontrol_claimed)
  {
    e = _swix(OS_Release, _INR(0,2), FSCV, &usb_fscontrol_hook, g_module_pw);
    if(e)
      return e;
    s_fscontrol_claimed = false;
  }

  if (s_find_claimed)
  {
    e = _swix(OS_Release, _INR(0,2), FindV, &usb_find_hook, g_module_pw);
    if(e)
      return e;
    s_find_claimed = false;
  }

  return e;
}

void usb_service_reset(void)
{
  /* FileSwitch will reclaim its vectors on Service_Reset, so to ensure we're on the vector chain before it we must do the same thing */
  _swix(OS_Claim, _INR(0,2), FSCV, &usb_fscontrol_hook, g_module_pw);
  _swix(OS_Claim, _INR(0,2), FindV, &usb_find_hook, g_module_pw);
}
@


1.12
log
@Correction to CMHG veneer types
The FSCV, FindV, UpcallV handlers were marked as generic veneers rather than vector handlers.
Spotted by Colin Granville.

Version 0.30. Tagged as 'EtherUSB-0_30'
@
text
@a35 1
#include "AsmUtils/irqs.h"
d40 1
d44 2
a45 1
#undef   Module_Title
d337 1
d354 5
a358 1
  __asm
d360 18
a377 6
    MOV      R0,#7
    MOV      R1,pipe->buffer_internal
    MOV      R12,pipe->buffer_r12
    BLX      pipe->buffer_code,{R0,R1,R12},{R2},{LR,PSR}
    MOV      buf_free,R2
  }
a400 1

d405 3
a407 3
  // r3 is undocumented and is the amount of data being requested. It
  // appears that it has to be large to get good
  // read performance.
a416 1

a467 3
  // Note there is no need to fill the TX buffer from here, filling is
  // handled by the transmitting program (trying to do so will cause
  // problems). Only interested in 'new receive data present' subreason.
d469 1
a469 1

d473 2
a474 1
    if (r->r[1]==pipe->file_handle && pipe->direction==USBRead)
a552 2
#define USBDriver_Version 0x54a45

@


1.11
log
@Step change improvement in transmit speed
'usb_upcall_hook_handler' removed filling of tx pipe. This fixes problems of the tx pipe being very slow. It was never needed anyway.
When transmitting, the tx pipe is driven by inserts from the socket driver and transfering that data to USB kicks USB writes into action.
Underflow isn't a problem USB will send as data arrives in the buffer.
Submission from Colin Granville.

Testing with a Raspberry Pi connected via LanManFS to a WinXP server *COPYing a 10MB file from SDFS to Windows, and *COPYing it back to null:
  EtherUSB 0.26  uplink   0.07 MB/s
                 downlink 2.96 MB/s
  This version   uplink   1.31 MB/s
                 downlink 3.05 MB/s
inspection in Wireshark shows no dropped TCP segments or ACKs during the test, previously duplicated ACKs and missing segments would cause most of the uplink slowness while the TCP/IP stack backed off for ~1.5s.
Note: other filing systems and use cases may vary.
In the case of the SMSC91xx backend, ticket #342 remains - sending to a 10Mbps server (even if through a 100Mbps switch) causes dropped segments/duplicated ACKs as before.

usb.c: upcall handler change as above.
smsc91xx.c: typos in comments and debug ammended.


Version 0.29. Tagged as 'EtherUSB-0_29'
@
text
@d450 1
a450 1
_kernel_oserror *usb_upcall_hook_handler(_kernel_swi_regs *r, void *pw)
d455 1
a455 1
  if (r->r[0]!=UpCall_DeviceRxDataPresent) return NULL;
d466 1
a466 1
      return NULL;
d473 1
a473 1
  return NULL;
d476 1
a476 1
_kernel_oserror *usb_fscontrol_hook_handler(_kernel_swi_regs *r, void *pw)
d479 1
a479 1
    return NULL;
d491 1
a491 1
  return NULL;
d494 1
a494 1
_kernel_oserror *usb_find_hook_handler(_kernel_swi_regs *r, void *pw)
d496 2
a497 2
  if (r->r[0] != 0)
    return NULL;
d511 1
a511 1
        return NULL;
d532 1
a532 1
  return NULL;
@


1.10
log
@Internationalised
AutoSense script updated to be able to parse both the hardwired english output (0.08-0.25 inclusive) and internationalised text (0.26+).
Tested RAM loaded on a Raspberry Pi.

Version 0.26. Tagged as 'EtherUSB-0_26'
@
text
@d42 1
d390 1
a390 1
  // read performace.
d452 4
a455 1
  if (r->r[0]!=15 && r->r[0]!=9) return NULL;
d460 1
a460 11
    if (r->r[0]==9 && r->r[1]==pipe->buffer_handle
                   && pipe->direction==USBWrite)
    {
      // Free space in buffer has become greater than the buffer
      // threshold setting.
      if (DEBUG_TX) syslog("Tx Buffer fill request");
      if (pipe->handler_fn) pipe->handler_fn(pipe, pipe->handler_ws);
      return NULL;
    }

    if (r->r[0]==15 && r->r[1]==pipe->file_handle)
@


1.9
log
@Add more ways of specifying device configuration. Adjust unit number allocation & SMSC MAC handling.
Detail:
  c/smsc95xx - Adjust MAC handling some more:
    - Unit number check removed from EtherUSB$MAC_Configured code in fill_arbitraryMAC(), to increase compatibility with previous version
    - EtherUSB$MAC_Configured check is now performed before the devices currently-programmed MAC is checked; this should ensure it always takes priority over the other methods (especially when reiniting EtherUSB after setting the variable)
    - OS_ReadSysInfo 4 & machine ID hash checks remain in their previous place, after the currently-programmed MAC check
  c/config, h/config:
    - Add support for using EtherUSB$VP_* and EtherUSB$Loc_* system variables to configure devices, by specifying USB vendor/product IDs or USB device tree locations, respectively.
    - Allow config_reserved_units() to select a devices unit number by looking for VP_ or Loc_ system variables.
  c/net, h/net:
    - Add USB device vendor & product ID, and device tree location, to net_device_t struct.
    - Display vendor/product ID & device tree location in verbose ejinfo output
    - Adjust unit number selection: Attempt to select a unit number before calling backend->start, so that the unit number can be used in MAC allocation if required (i.e. by net_default_mac()).
    - Change net_default_mac() to use OS_ReadSysInfo 5 instead of OS_ReadSysInfo 2; OS_ReadSysInfo 2 strips out the first and last byte of the ID, making the psuedo-unique MAC somewhat less unique.
  c/usb, h/usb - Add utility function for reading the location of a device within the USB device tree.
Admin:
  Tested on BB-xM, Raspberry Pi
  Overriding MAC via EtherUSB$MAC_Configured now works as expected (was previously failing due to unit number being MODULE_MAX_UNITS)
  Unit number reservation/selection & device configuration via all three variable types (MAC, VP, Loc) verified


Version 0.24. Tagged as 'EtherUSB-0_24'
@
text
@a75 11
const char* usb_speed_string(unsigned speed)
{
  switch (speed)
  {
    case USB_SPEED_FULL: return "Full";
    case USB_SPEED_LOW:  return "Low";
    case USB_SPEED_HI:   return "Hi";
  }
  return "<UNKNOWN>";
}

d280 1
d288 1
d304 1
a304 1
                  (*pipe)->file_name,e->errmess);
d310 1
a310 1
                  (*pipe)->file_name,e->errmess);
d489 1
a489 1
  if (DEBUG) syslog("fscontrol_hook_handler shut/shutdown detected");
d495 1
a495 1
  if (DEBUG) syslog("fscontrol_hook_handler done");
d515 1
a515 1
        if (DEBUG) syslog("find_hook_handler file close detected");
d529 1
a529 1
      if (DEBUG) syslog("find_hook_handler close all detected");
d535 1
a535 1
      if (DEBUG) syslog("find_hook_handler done");
@


1.8
log
@Tidy up some debugging code
Detail:
  c/net, c/usb - Tidy up some debugging code so it's only active in debug builds.
Admin:
  Changes supplied by Willi Theiss, to fix hangs on restart (on OMAP4) when the SysLog module is active.
  Tested locally on BB-xM


Version 0.22. Tagged as 'EtherUSB-0_22'
@
text
@d123 9
@


1.7
log
@Protect against memory corruption caused by devicefs streams being unexepectedly closed
Detail:
  c/cmodule, c/usb, cmhg/EtherUSBHdr, h/usb - Sit on FSControlV & FindV so we can watch for file closures and catch any attempt to close our devicefs streams. Also need to sit on Service_Reset to make sure FileSwitch doesn't get the vector calls before us.
  If the device streams get closed without our notice, then the next attempt to write to a buffer (or potentially read from one?) via the direct buffer manager calls will result in RMA corruption.
Admin:
  Tested on Raspberry Pi with high processor vectors
  Fixes occasional data aborts while sat on "shutdown complete" screen (since *shutdown will close the devicefs streams)


Version 0.21. Tagged as 'EtherUSB-0_21'
@
text
@d4 1
a4 1
// 
d6 1
a6 1
// modification, are permitted provided that the following conditions are met: 
d15 1
a15 1
// 
d478 1
a478 1
  
d487 3
a489 1
  syslog("fscontrol_hook_handler shut/shutdown detected");
d495 1
a495 1
  syslog("fscontrol_hook_handler done");
d505 2
d515 1
a515 1
        syslog("find_hook_handler file close detected");
d529 1
a529 1
      syslog("find_hook_handler close all detected");
d535 1
a535 1
      syslog("find_hook_handler done");
d596 1
a596 1
  
d604 1
a604 1
  _swix(OS_Claim, _INR(0,2), FindV, &usb_find_hook, g_module_pw); 
@


1.6
log
@Save 4.5kB by making the table of errors with objasm (so they're not all padded to 252 bytes by the compiler to fit into _kernel_oserror structs).
The 'moduleerr.s' source should be made redundant by internationalising the module.

Version 0.17. Tagged as 'EtherUSB-0_17'
@
text
@d41 2
d50 1
d482 55
d538 2
d553 9
d567 26
a592 4
  if (!s_upcall_claimed) return NULL;
  _kernel_oserror* e = _swix(OS_Release, _INR(0,2),
                             UpCallV, &usb_upcall_hook, g_module_pw);
  if (!e) s_upcall_claimed = false;
d595 7
@


1.5
log
@Added autosense, and autosense install rule to makefile.
Now uses AsmUtils for irqs_on/irqs_off
Squash a few unused variable warnings, not in the backends though as porting updates would be more complex for those that come from (for example) NetBSD.
Changed to use structure definitions from sys/dcistructs.h (mostly an exercise in prefixing member names).

Version 0.16. Tagged as 'EtherUSB-0_16'
@
text
@d206 1
a206 1
  if (!p) return &err_no_memory;
d489 1
a489 1
  if (e || version<49) return &err_usb_too_old;
@


1.4
log
@Uses common USB header files exported by the USB stack.
Use ModHand/Variables/RISCOS/OsByte headers.
Note, this has meant some header files needed reordering to prevent circular dependencies.

Version 0.15. Tagged as 'EtherUSB-0_15'
@
text
@d36 1
d254 1
a254 1
    irq_state_t irq = disable_irqs();
d291 1
a291 1
  irq_state_t irq = disable_irqs();
d473 3
@


1.3
log
@Brought under srccommit control for update of version numbers.
Makefile recreated from fragments
CMHG file renamed to avoid needing special rule to tell where it is.

Version 0.14. Tagged as 'EtherUSB-0_14'
@
text
@a28 5
#include "usb.h"
#include "utils.h"
#include "module.h"
#include "EtherUSBHdr.h"

d37 10
a50 6
typedef struct usb_service_list
{
  struct usb_service_list* next;              // Or NULL if no more.
  usb_service_t            device;            // Device information.
} usb_service_list_t;

d53 1
a53 1
  usb_service_list_t* next = NULL;
d56 1
a56 1
                             Service_USBDriver_Connected,
d62 2
a63 2
    const usb_service_list_t* current = next;
    next = next->next;
d65 2
a66 2
    if (!e) e = fn(&current->device, handle);
    _swix(OS_Module, _IN(0)|_IN(2), 7, current);
d84 4
a87 4
  usb_find_interface(const usb_service_t* s,
                     unsigned             config_no,
                     unsigned             interface_no,
                     unsigned             alternate_no)
d97 1
a97 1
    if (type==USB_DESCRIPTOR_CONFIG &&
d105 1
a105 1
             type==USB_DESCRIPTOR_INTERFACE &&
d297 1
a297 1
                              21, (*pipe)->buffer_handle);
d487 1
a487 1
  e = _swix(OS_Claim, _INR(0,2), 0x1d, &usb_upcall_hook, g_module_pw);
d496 1
a496 1
                             0x1d, &usb_upcall_hook, g_module_pw);
@


1.2
log
@Explicit BSD licence heading blocks added to those source files that did not have them.
No code changes, not tagged.
@
text
@d32 1
a32 1
#include "autogen/header"
d41 1
d58 1
a58 1
                             Service_USBDriver,
@


1.1
log
@Import of sources to EtherUSB.
Special thanks to James Peacock for allowing ROOL to host these sources.
This import represents version 0.13 by James and the backend contributors, the only change being that the makefile wipes the directories it creates on cleaning so there's no need to import those to CVS.
Tagged as jpeacock-0_13.
@
text
@d1 27
a27 3
/* EtherUSB
 * (C) James Peacock, 2006.
 */
@

