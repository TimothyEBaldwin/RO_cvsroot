head	1.3;
access;
symbols
	EtherUSB-0_41:1.3
	EtherUSB-0_40:1.3
	EtherUSB-0_39:1.3
	EtherUSB-0_38:1.3
	EtherUSB-0_37:1.3
	EtherUSB-0_36:1.3
	EtherUSB-0_35:1.3
	EtherUSB-0_34:1.3
	EtherUSB-0_33:1.3
	EtherUSB-0_32:1.3
	EtherUSB-0_31:1.3
	EtherUSB-0_30:1.3
	EtherUSB-0_29:1.3
	EtherUSB-0_28:1.3
	EtherUSB-0_27:1.3
	EtherUSB-0_26:1.3
	EtherUSB-0_25:1.3
	EtherUSB-0_24:1.3
	EtherUSB-0_23:1.2
	EtherUSB-0_22:1.2
	EtherUSB-0_21:1.2
	EtherUSB-0_20:1.2
	EtherUSB-0_19:1.2
	EtherUSB-0_18:1.2
	EtherUSB-0_17:1.2
	EtherUSB-0_16:1.2
	EtherUSB-0_15:1.2
	EtherUSB-0_14:1.2
	jpeacock-0_13:1.1;
locks; strict;
comment	@# @;


1.3
date	2013.04.07.17.47.12;	author jlee;	state Exp;
branches;
next	1.2;
commitid	7koGNmobBUDhYRKw;

1.2
date	2012.05.19.08.22.18;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	SzPjH7uh6hKVdj5w;

1.1
date	2012.05.19.08.19.15;	author rsprowson;	state Exp;
branches;
next	;
commitid	q3rEKeu2RrS2cj5w;


desc
@@


1.3
log
@Add more ways of specifying device configuration. Adjust unit number allocation & SMSC MAC handling.
Detail:
  c/smsc95xx - Adjust MAC handling some more:
    - Unit number check removed from EtherUSB$MAC_Configured code in fill_arbitraryMAC(), to increase compatibility with previous version
    - EtherUSB$MAC_Configured check is now performed before the devices currently-programmed MAC is checked; this should ensure it always takes priority over the other methods (especially when reiniting EtherUSB after setting the variable)
    - OS_ReadSysInfo 4 & machine ID hash checks remain in their previous place, after the currently-programmed MAC check
  c/config, h/config:
    - Add support for using EtherUSB$VP_* and EtherUSB$Loc_* system variables to configure devices, by specifying USB vendor/product IDs or USB device tree locations, respectively.
    - Allow config_reserved_units() to select a devices unit number by looking for VP_ or Loc_ system variables.
  c/net, h/net:
    - Add USB device vendor & product ID, and device tree location, to net_device_t struct.
    - Display vendor/product ID & device tree location in verbose ejinfo output
    - Adjust unit number selection: Attempt to select a unit number before calling backend->start, so that the unit number can be used in MAC allocation if required (i.e. by net_default_mac()).
    - Change net_default_mac() to use OS_ReadSysInfo 5 instead of OS_ReadSysInfo 2; OS_ReadSysInfo 2 strips out the first and last byte of the ID, making the psuedo-unique MAC somewhat less unique.
  c/usb, h/usb - Add utility function for reading the location of a device within the USB device tree.
Admin:
  Tested on BB-xM, Raspberry Pi
  Overriding MAC via EtherUSB$MAC_Configured now works as expected (was previously failing due to unit number being MODULE_MAX_UNITS)
  Unit number reservation/selection & device configuration via all three variable types (MAC, VP, Loc) verified


Version 0.24. Tagged as 'EtherUSB-0_24'
@
text
@//
// Copyright (c) 2009, James Peacock
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met: 
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of RISC OS Open Ltd nor the names of its contributors
//       may be used to endorse or promote products derived from this software
//       without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
#ifndef CONFIG_H_INCLUDED
#define CONFIG_H_INCLUDED

#include <stddef.h>
#include "kernel.h"
#include "net.h"

//---------------------------------------------------------------------------
// Extract the next token from a command line. The token is written in lower
// case into blk. If the end of the input string is reached, then blk[0] is
// zero on exit. *ptr is incremented for the next call.
//---------------------------------------------------------------------------
_kernel_oserror* config_parse_token(const char** ptr,
                                    char* blk,
                                    size_t blk_size);

//---------------------------------------------------------------------------
// Extract unit number from a command line using config_parse_token,
// updates *out and *ptr on exit iff no error returned. Unit numbers can
// be plain integers or prefixed DCI unit numbers.
//---------------------------------------------------------------------------
_kernel_oserror* config_parse_unit(const char** ptr, unsigned *out);


//---------------------------------------------------------------------------
// Parses a config argument string into a net_config_t. Can pass a completely
// initinitialised 'config' in. Sets configured indicating whether any
// configuration was present.
//---------------------------------------------------------------------------
_kernel_oserror* config_parse_arguments(const net_device_t* device,
                                        const char*         arg_string,
                                        net_config_t*       config,
                                        bool*               configured);

//---------------------------------------------------------------------------
// Configures a newly inserted device taking options from any of the following
// system variables:
// EtherUSB$MAC_xxxxxxxxxxxx         (device MAC address)
// EtherUSB$VP_xxxx_xxxx             (USB vendor + product ID)
// EtherUSB$Loc_xx_xx_xx_xx_xx_xx    (USB location)
// The unit number of 'dev' may be set, other options are parsed into 'cfg'.
//---------------------------------------------------------------------------
_kernel_oserror* config_new_device(net_device_t* dev, net_config_t* cfg);

//---------------------------------------------------------------------------
// Get list of reserved unit numbers, and set unit number of device via
// EtherUSB$VP or EtherUSB$Loc system variable if possible. Note - MAC variable
// not checked, as device MAC won't be known yet.
//---------------------------------------------------------------------------
_kernel_oserror* config_reserved_units(bool flags[MODULE_MAX_UNITS],
                                       net_device_t *dev);

#endif
@


1.2
log
@Explicit BSD licence heading blocks added to those source files that did not have them.
No code changes, not tagged.
@
text
@d63 6
a68 3
// Configures a newly inserted device taking options from the EtherUSB$MAC_*
// system variable, if it exists. The unit number of 'dev' may be set, other
// options are parsed into 'cfg'.
d73 3
a75 1
// Get list of reserved unit numbers.
d77 2
a78 1
_kernel_oserror* config_reserved_units(bool flags[MODULE_MAX_UNITS]);
@


1.1
log
@Import of sources to EtherUSB.
Special thanks to James Peacock for allowing ROOL to host these sources.
This import represents version 0.13 by James and the backend contributors, the only change being that the makefile wipes the directories it creates on cleaning so there's no need to import those to CVS.
Tagged as jpeacock-0_13.
@
text
@d1 27
a27 5
/* EtherUSB
 * (C) James Peacock, 2009.
 *
 * Device configuration and options/command parsing helpers.
 */
@

