head	1.4;
access;
symbols
	EtherUSB-0_41:1.4
	EtherUSB-0_40:1.3
	EtherUSB-0_39:1.3
	EtherUSB-0_38:1.2
	EtherUSB-0_37:1.2
	EtherUSB-0_36:1.2
	EtherUSB-0_35:1.2
	EtherUSB-0_34:1.2
	EtherUSB-0_33:1.2
	EtherUSB-0_32:1.2
	EtherUSB-0_31:1.2
	EtherUSB-0_30:1.2
	EtherUSB-0_29:1.2
	EtherUSB-0_28:1.2
	EtherUSB-0_27:1.2
	EtherUSB-0_26:1.2
	EtherUSB-0_25:1.2
	EtherUSB-0_24:1.2
	EtherUSB-0_23:1.2
	EtherUSB-0_22:1.2
	EtherUSB-0_21:1.2
	EtherUSB-0_20:1.2
	EtherUSB-0_19:1.2
	EtherUSB-0_18:1.2
	EtherUSB-0_17:1.2
	EtherUSB-0_16:1.2
	EtherUSB-0_15:1.2
	EtherUSB-0_14:1.2
	jpeacock-0_13:1.1;
locks; strict;
comment	@# @;


1.4
date	2018.03.21.23.54.45;	author jlee;	state Exp;
branches;
next	1.3;
commitid	FAdt578EOH7cRnvA;

1.3
date	2018.01.18.23.12.34;	author jlee;	state Exp;
branches;
next	1.2;
commitid	lRremJsVERKgCpnA;

1.2
date	2012.05.19.08.22.18;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	SzPjH7uh6hKVdj5w;

1.1
date	2012.05.19.08.19.16;	author rsprowson;	state Exp;
branches;
next	;
commitid	q3rEKeu2RrS2cj5w;


desc
@@


1.4
log
@Add SMSC78xx support
Detail:
  c/smsc78xx, c/module, c/products, h/backends, Makefile - Add SMSC78xx driver, for the chip used in the Raspberry Pi 3B+
  c/config, c/mii, h/mii - Add support for gigabit MIIs & associated (auto) configuration
  c/net, h/net - Handle gigabit link types. Pass verbose flag through to backend info function.
  c/smsc95xx - Make configure_link const-correct
  Resources/UK/CmdHelp - Update *EJConfig syntaxt text to include 1000 option
  Resources/UK/Messages - Add 78xx backend name & device-specific info tokens
Admin:
  Tested on Raspberry Pi 3B & 3B+
  Manually configured gigabit links aren't supported yet
  Gigabit half-duplex isn't supported (78xx MAC limitation)
  For the 78xx, manually-configured full-duplex links appear to suffer terrible RX performance (as seen on 95xx). All supported auto modes appear to work correctly.


Version 0.41. Tagged as 'EtherUSB-0_41'
@
text
@//
// Copyright (c) 2006, James Peacock
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met: 
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of RISC OS Open Ltd nor the names of its contributors
//       may be used to endorse or promote products derived from this software
//       without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
#ifndef MII_H_INCLUDED
#define MII_H_INCLUDED

#include <stdbool.h>
#include <stdint.h>
#include "kernel.h"
#include "net.h"

//---------------------------------------------------------------------------
// Basic MII Registers - all PHYs support these.
//---------------------------------------------------------------------------
#define MII_CONTROL             0
#define MII_STATUS              1

//---------------------------------------------------------------------------
// Extended MII Registers - only PHYs with the MII_STATUS_EXTENDED_CAP bit
// set in the status register support these.
//---------------------------------------------------------------------------
#define MII_PHY_ID0              2
#define MII_PHY_ID1              3
#define MII_NWAY_ADVERT          4
#define MII_NWAY_PARTNER         5
#define MII_NWAY_EXPANSTION      6
#define MII_NWAY_NEXT_PG_TX      7

#define MII_MASTER_SLAVE_CONTROL 9
#define MII_MASTER_SLAVE_STATUS  10

#define MII_EXTENDED_STATUS      15 /* Only exists if MII_STATUS_EXTD_STATUS is set */

// More registers in the range 8-15 exist on some MIIs, but are not supported
// here yet.
// Registers 16+ are vendor-specific and must be managed by the appropriate
// backend driver.

//---------------------------------------------------------------------------
// Control register fields (reg 0)
//---------------------------------------------------------------------------
#define MII_CONTROL_RESET       (1u<<15)
#define MII_CONTROL_LOOPBACK    (1u<<14)
#define MII_CONTROL_SPEED100    (1u<<13)
#define MII_CONTROL_NWAY_ENABLE (1u<<12)
#define MII_CONTROL_POWER_DOWN  (1u<<11)
#define MII_CONTROL_ISOLATE     (1u<<10)
#define MII_CONTROL_NWAY_RESET  (1u<<9)
#define MII_CONTROL_FULL_DUPLEX (1u<<8)
#define MII_CONTROL_COLL_TEST   (1u<<7)
#define MII_CONTROL_SPEED1000   (1u<<6)
#define MII_CONTROL_UNI_ENABLE  (1u<<5)

//---------------------------------------------------------------------------
// Status register fields (reg 1)
//---------------------------------------------------------------------------
#define MII_STATUS_100BaseT4      (1u<<15)
#define MII_STATUS_100BaseTX_Full (1u<<14)
#define MII_STATUS_100BaseTX_Half (1u<<13)
#define MII_STATUS_10BaseT_Full   (1u<<12)
#define MII_STATUS_10BaseT_Half   (1u<<11)
#define MII_STATUS_100BaseT2_Full (1u<<10)
#define MII_STATUS_100BaseT2_Half (1u<<9)
#define MII_STATUS_EXTD_STATUS    (1u<<8)
#define MII_STATUS_UNI_ABILITY    (1u<<7)
#define MII_STATUS_MFPRE_SUP      (1u<<6)
#define MII_STATUS_NWAY_COMP      (1u<<5)
#define MII_STATUS_REM_FAULT      (1u<<4)
#define MII_STATUS_NWAY_ABILITY   (1u<<3)
#define MII_STATUS_LINK_STATUS    (1u<<2)
#define MII_STATUS_JABBER_DET     (1u<<1)
#define MII_STATUS_EXTENDED_CAP   (1u<<0)

//---------------------------------------------------------------------------
// Auto-negotiation advertisement (reg 4)
// Bits 0-4 are the selector field: 1?
//---------------------------------------------------------------------------
#define MII_ADVERT_NEXT_PAGE      (1u<<15)
#define MII_ADVERT_ZERO14         (1u<<14) // Reserved: write as zero
#define MII_ADVERT_REM_FAULT      (1u<<13)
#define MII_ADVERT_ZERO12         (1u<<12) // Reserved: zero?
#define MII_ADVERT_ASYM_PAUSE     (1u<<11)
#define MII_ADVERT_SYM_PAUSE      (1u<<10)
#define MII_ADVERT_100BaseT4      (1u<<9)
#define MII_ADVERT_100BaseTX_Full (1u<<8)
#define MII_ADVERT_100BaseTX_Half (1u<<7)
#define MII_ADVERT_10BaseT_Full   (1u<<6)
#define MII_ADVERT_10BaseT_Half   (1u<<5)

//---------------------------------------------------------------------------
// Auto-negotiation partner (reg 5)
//---------------------------------------------------------------------------
#define MII_PARTNER_NEXT_PAGE      (1u<<15)
#define MII_PARTNER_ACK            (1u<<14)
#define MII_PARTNER_REM_FAULT      (1u<<13)
#define MII_PARTNER_ASYM_PAUSE     (1u<<11)
#define MII_PARTNER_SYM_PAUSE      (1u<<10)
#define MII_PARTNER_100BaseT4      (1u<<9)
#define MII_PARTNER_100BaseTX_Full (1u<<8)
#define MII_PARTNER_100BaseTX_Half (1u<<7)
#define MII_PARTNER_10BaseT_Full   (1u<<6)
#define MII_PARTNER_10BaseT_Half   (1u<<5)

//---------------------------------------------------------------------------
// MASTER-SLAVE control (reg 9)
//---------------------------------------------------------------------------
#define MII_MS_CTRL_1000BaseT_Full (1u<<9)
#define MII_MS_CTRL_1000BaseT_Half (1u<<8)

//---------------------------------------------------------------------------
// MASTER-SLAVE status (reg 10)
//---------------------------------------------------------------------------
#define MII_MS_STAT_1000BaseT_Full (1u<<11)
#define MII_MS_STAT_1000BaseT_Half (1u<<10)

//---------------------------------------------------------------------------
// Extended status (reg 15)
//---------------------------------------------------------------------------
#define MII_EXTD_STATUS_1000BaseX_Full (1u<<15)
#define MII_EXTD_STATUS_1000BaseX_Half (1u<<14)
#define MII_EXTD_STATUS_1000BaseT_Full (1u<<13)
#define MII_EXTD_STATUS_1000BaseT_Half (1u<<12)

//---------------------------------------------------------------------------
// Functions to read/write to a PHY register. 'handle' is passed
// through from mii_*() functions, below.
//---------------------------------------------------------------------------
typedef _kernel_oserror* (mii_read_fn)(void*     handle,
                                       unsigned  reg,
                                       uint16_t* value);

typedef _kernel_oserror* (mii_write_fn)(void*     handle,
                                        unsigned  reg,
                                        uint16_t  value);

//---------------------------------------------------------------------------
// A struct like this is needed for each PHY to be controlled. You MUST
// call mii_initialise() before passing the mii_t to any other function
// in here. Once initialised, the mii_t should not be altered by anything
// other than the functions here.
//---------------------------------------------------------------------------
typedef struct
{
  void*          handle;            // As passed in to initialise
  mii_read_fn*   read;              // As passed in to initialise
  mii_write_fn*  write;             // As passed in to initialise
  bool           ok;                // Reset worked.
  bool           autoneg;           // Autoneg configured to be on.
  bool           negotiating;       // Autoneg in process.
} mii_t;

void mii_initialise(mii_t* mii,
                    mii_read_fn* reader,
                    mii_write_fn* writer,
                    void* handle);

//---------------------------------------------------------------------------
// Does this look like a valid PHY? Returns NULL if so and
// err_bad_phy if not. This may not be reliable - only use for finding
// the PHY address if the device offers no other way to get it.
//---------------------------------------------------------------------------
_kernel_oserror* mii_present(mii_t* mii);

//---------------------------------------------------------------------------
// Reset and initialise device.
//---------------------------------------------------------------------------
_kernel_oserror* mii_reset(mii_t* mii);

//---------------------------------------------------------------------------
// Shutdown PHY.
//---------------------------------------------------------------------------
_kernel_oserror* mii_shutdown(mii_t* mii);

//---------------------------------------------------------------------------
// Read PHY capabilities, must be called directly after a reset.
//---------------------------------------------------------------------------
_kernel_oserror* mii_abilities(mii_t* mii, net_abilities_t* ab);

//---------------------------------------------------------------------------
// Read PHY status. This always updates the 'up' flag
//---------------------------------------------------------------------------
_kernel_oserror* mii_link_status(mii_t* mii, net_status_t* status);

//---------------------------------------------------------------------------
// Reconfigure PHY. The 'cfg' must satisfy the requirements returmed by
// mii_abilities(). Status is updated.
//---------------------------------------------------------------------------
_kernel_oserror* mii_configure(mii_t* mii,
                               net_status_t* status,
                               const net_config_t* cfg);

#endif
@


1.3
log
@Improvements to SMSC 95xx backend and common MII handling
Detail:
  c/smsc95xx - Convert code to use the common MII backend. Reduce verbosity of debug output. Fix two sets of status callbacks running (callback_status_adapter + device_status). Tweak/refactor a couple of other bits as necessary in order to get 10M links working reliably.
  c/mii, h/mii, h/net - Allow backends to indicate their level of support for PAUSE functionality, so that we can advertise it correctly when performing auto-negotiation (previously no pause ability would have been advertised)
  c/config - Ensure config_parse_arguments passes through the PAUSE capabilities to the output net_config_t. Use the (currently unused) ERR_BAD_CONFIG for if autonegotiation is disabled but either speed or duplex setting not specified (avoids MII code or backends getting confused as to what options they should use)
  Resources/UK/Messages - Tweak wording of ERR_BAD_CONFIG so that it's more sensible for the new usage
  doc/!ReadMe - Remove the note about 10M links not being supported by the SMSC 95xx backend. Update the changelog to point people towards CVS for recent changes.
Admin:
  Tested on PandaBoard + Raspberry Pi 3, using SMSC 95xx and AX88772 devices
  SMSC testing results:
  * Previously, 10M links were non-functional
  * Previously, manually-configured 100M full duplex links would suffer terrible performance
  * Previously, any attempt to reconfigure a link on Pi 3 would result in a "Device broken or misbehaving" error? (or at least, that's how 0.38 is behaving for me now)
  * Now, all combinations of configuration (speed + link + auto/noauto) appear to work correctly, except for manually-configured full-duplex links, which still suffer from terrible performance
  AX88772 was used to verify MII changes haven't broken anything for other backends; testing showed no significant differences to previous version (all speed + link + auto/noauto modes working)
  Resolves ticket #342:
  https://www.riscosopen.org/tracker/tickets/342
  Note that currently the SMSC 95xx backend is the only backend to advertise PAUSE functionality via the common MII code; a future improvement would be to set up the other backends appropriately (set correct flags in net_abilities_t)


Version 0.39. Tagged as 'EtherUSB-0_39'
@
text
@d46 6
a51 6
#define MII_PHY_ID0             2
#define MII_PHY_ID1             3
#define MII_NWAY_ADVERT         4
#define MII_NWAY_PARTNER        5
#define MII_NWAY_EXPANSTION     6
#define MII_NWAY_NEXT_PG_TX     7
d53 7
a59 1
// Regsiters 8-15 also exist on some MIIs, but are not supported here yet.
d115 1
a115 1
// Auto-negotiation partner (ref 4)
d129 20
@


1.2
log
@Explicit BSD licence heading blocks added to those source files that did not have them.
No code changes, not tagged.
@
text
@d53 4
@


1.1
log
@Import of sources to EtherUSB.
Special thanks to James Peacock for allowing ROOL to host these sources.
This import represents version 0.13 by James and the backend contributors, the only change being that the makefile wipes the directories it creates on cleaning so there's no need to import those to CVS.
Tagged as jpeacock-0_13.
@
text
@d1 27
a27 3
/* EtherUSB
 * (C) James Peacock, 2006.
 */
@

