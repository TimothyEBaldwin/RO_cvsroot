head	1.14;
access;
symbols
	EtherUSB-0_41:1.14
	EtherUSB-0_40:1.13
	EtherUSB-0_39:1.13
	EtherUSB-0_38:1.12
	EtherUSB-0_37:1.11
	EtherUSB-0_36:1.11
	EtherUSB-0_35:1.10
	EtherUSB-0_34:1.10
	EtherUSB-0_33:1.10
	EtherUSB-0_32:1.10
	EtherUSB-0_31:1.10
	EtherUSB-0_30:1.9
	EtherUSB-0_29:1.9
	EtherUSB-0_28:1.9
	EtherUSB-0_27:1.8
	EtherUSB-0_26:1.8
	EtherUSB-0_25:1.7
	EtherUSB-0_24:1.7
	EtherUSB-0_23:1.6
	EtherUSB-0_22:1.5
	EtherUSB-0_21:1.5
	EtherUSB-0_20:1.5
	EtherUSB-0_19:1.5
	EtherUSB-0_18:1.5
	EtherUSB-0_17:1.5
	EtherUSB-0_16:1.5
	EtherUSB-0_15:1.4
	EtherUSB-0_14:1.3
	jpeacock-0_13:1.1;
locks; strict;
comment	@# @;


1.14
date	2018.03.21.23.54.45;	author jlee;	state Exp;
branches;
next	1.13;
commitid	FAdt578EOH7cRnvA;

1.13
date	2018.01.18.23.12.34;	author jlee;	state Exp;
branches;
next	1.12;
commitid	lRremJsVERKgCpnA;

1.12
date	2017.10.21.16.35.38;	author rool;	state Exp;
branches;
next	1.11;
commitid	RL2w4GqnhnkuhWbA;

1.11
date	2016.02.29.10.37.10;	author bavison;	state Exp;
branches;
next	1.10;
commitid	oAHZMQOdmovfANWy;

1.10
date	2015.09.05.20.33.11;	author rool;	state Exp;
branches;
next	1.9;
commitid	hsW7lDmaNPcqz6Ay;

1.9
date	2014.08.24.08.09.32;	author rsprowson;	state Exp;
branches;
next	1.8;
commitid	waLmpCDiEYRjzANx;

1.8
date	2013.10.13.13.54.47;	author rsprowson;	state Exp;
branches;
next	1.7;
commitid	cLeOtNKk3nePB89x;

1.7
date	2013.04.07.17.47.12;	author jlee;	state Exp;
branches;
next	1.6;
commitid	7koGNmobBUDhYRKw;

1.6
date	2013.04.01.14.59.36;	author jlee;	state Exp;
branches;
next	1.5;
commitid	depDMAPvYqzJe5Kw;

1.5
date	2012.05.19.08.42.24;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	1BHJUY7zoQz3lj5w;

1.4
date	2012.05.19.08.39.09;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	sBdKYcdaXJwXjj5w;

1.3
date	2012.05.19.08.30.29;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	R1EOINZ5A36Ygj5w;

1.2
date	2012.05.19.08.22.18;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	SzPjH7uh6hKVdj5w;

1.1
date	2012.05.19.08.19.17;	author rsprowson;	state Exp;
branches;
next	;
commitid	q3rEKeu2RrS2cj5w;


desc
@@


1.14
log
@Add SMSC78xx support
Detail:
  c/smsc78xx, c/module, c/products, h/backends, Makefile - Add SMSC78xx driver, for the chip used in the Raspberry Pi 3B+
  c/config, c/mii, h/mii - Add support for gigabit MIIs & associated (auto) configuration
  c/net, h/net - Handle gigabit link types. Pass verbose flag through to backend info function.
  c/smsc95xx - Make configure_link const-correct
  Resources/UK/CmdHelp - Update *EJConfig syntaxt text to include 1000 option
  Resources/UK/Messages - Add 78xx backend name & device-specific info tokens
Admin:
  Tested on Raspberry Pi 3B & 3B+
  Manually configured gigabit links aren't supported yet
  Gigabit half-duplex isn't supported (78xx MAC limitation)
  For the 78xx, manually-configured full-duplex links appear to suffer terrible RX performance (as seen on 95xx). All supported auto modes appear to work correctly.


Version 0.41. Tagged as 'EtherUSB-0_41'
@
text
@//
// Copyright (c) 2006, James Peacock
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met: 
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of RISC OS Open Ltd nor the names of its contributors
//       may be used to endorse or promote products derived from this software
//       without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
#ifndef NET_H_INCLUDED
#define NET_H_INCLUDED

#include <stdint.h>

#include "kernel.h"
#include "sys/dcistructs.h"
#include "sys/errno.h"

typedef struct net_device net_device_t;
typedef struct net_filter_t net_filter_t;
typedef struct net_tx net_tx_t;
typedef struct net_config_t net_config_t;
typedef struct net_status_t net_status_t;
typedef struct net_abilities_t net_abilities_t;

typedef enum { net_speed_unknown = 0,
               net_speed_10Mb,
               net_speed_100Mb,
               net_speed_1000Mb
} net_speed_t;

typedef enum { net_duplex_unknown = 0,
               net_duplex_half,
               net_duplex_full
} net_duplex_t;

typedef enum { net_link_unknown = 0,
               net_link_10BaseT_Half,
               net_link_10BaseT_Full,
               net_link_100BaseTX_Half,
               net_link_100BaseTX_Full,
               net_link_100BaseT4,
               net_link_1000BaseT_Half,
               net_link_1000BaseT_Full
} net_link_t;

typedef enum { net_autoneg_none = 0,
               net_autoneg_started,
               net_autoneg_reconfigure,
               net_autoneg_complete,
               net_autoneg_failed
} net_autoneg_t;

//---------------------------------------------------------------------------
// Called to attempt to bind a device to the backend, returning
// err_unsupported if the backend cannot support it; otherwise it should
// allocate workspace (store the value in *private), parse the options and
// stash any settings in its workspace. It should not open any USB pipes.
//---------------------------------------------------------------------------
typedef _kernel_oserror* (net_open_fn)(const USBServiceCall* usb,
                                       const char*           options,
                                       void**                private);

//---------------------------------------------------------------------------
// Called if open is successful, but before the interface is announced.
// Should open the USB pipes and initialise the device. Returning an
// error will cause the driver to call the close_fn. This MUST update the
// dev->abilities and dev->status, see below.
//---------------------------------------------------------------------------
typedef _kernel_oserror* (net_start_fn)(net_device_t* dev,
                                        const char* options);

//---------------------------------------------------------------------------
// Called to shutdown the device, before the close_fn is called. All USB
// pipes should be closed. MUST not return an error unless removing the
// EtherUSB module is not safe.
//---------------------------------------------------------------------------
typedef _kernel_oserror* (net_stop_fn)(net_device_t* dev);

//---------------------------------------------------------------------------
// Called when unbinding a device from the backend. If dev->gone, then the
// device was unplugged and is no longer accessible, otherwise the driver
// should shut it down cleanly and release all resources. MUST not return
// an error unless removing the EtherUSB module is not safe.
//---------------------------------------------------------------------------
typedef _kernel_oserror* (net_close_fn)(void** private);

//---------------------------------------------------------------------------
// Called to attempt to send a packet. Return &err_tx_blocked if it can't
// be sent yet.
//---------------------------------------------------------------------------
typedef _kernel_oserror* (net_transmit_fn)(net_device_t*   dev,
                                           const net_tx_t* pkt);

//---------------------------------------------------------------------------
// Chance to augment output of *EJInfo, a NULL function pointer causes no
// extra information to be output.
//---------------------------------------------------------------------------
typedef void (net_info_fn)(const net_device_t* dev,
                           bool verbose);

//---------------------------------------------------------------------------
// Called to (re)configure deviceof *EJLink, a NULL function pointer means
// that the device can't be explicitly configured. The requirements will
// not contradict the 'abilitites', see below, declared by the device when
// starting. The device should update the 'status', see below and return
// NULL on success; or return an error.
//
// If non-NULL, then this is called immediately after the device is
// initialised.
//---------------------------------------------------------------------------
typedef _kernel_oserror* (net_config_fn)(net_device_t*       dev,
                                         const net_config_t* config);

//---------------------------------------------------------------------------
// Called, if non-NULL, before dev->status is used to give the backend
// the chance to update the information provided.
//---------------------------------------------------------------------------
typedef _kernel_oserror* (net_status_fn)(net_device_t* dev);

//---------------------------------------------------------------------------
// Backend description.
//---------------------------------------------------------------------------
typedef struct
{
  const char*       name;
  const char*       description;
  net_open_fn*      open;
  net_start_fn*     start;
  net_stop_fn*      stop;
  net_close_fn*     close;
  net_transmit_fn*  transmit;
  net_info_fn*      info;
  net_config_fn*    config;
  net_status_fn*    status;
} net_backend_t;

//---------------------------------------------------------------------------
// EUI48
//---------------------------------------------------------------------------
#define ETHER_ADDR_LEN 6
#define ETHER_MAX_LEN  1518

//---------------------------------------------------------------------------
// Ethernet frame header
//---------------------------------------------------------------------------
typedef __packed struct
{
  uint8_t        dst_addr[ETHER_ADDR_LEN];
  uint8_t        src_addr[ETHER_ADDR_LEN];
  uint16_t       type;                      // Network byte order.
} net_header_t;

//---------------------------------------------------------------------------
// Layout of tx data passed to backends when.
//---------------------------------------------------------------------------
struct net_tx
{
  net_tx_t* next;                           // Next pointer for linking
  size_t size;                              // Size of 'data'
  uint8_t prefix[TX_PREFIX_SIZE];           // Backend scratch space
  net_header_t header;                      // Ethernet packet header
  uint8_t data[TX_MAX_DATA_SIZE];           // Ethernet packet data
  uint8_t suffix[TX_SUFFIX_SIZE];           // Backend scratch space
};

//---------------------------------------------------------------------------
// This structure should be regularly updated to reflect the devices current
// status. NOTE that the MAC address MUST be filled in during the
// net_start_fn. The struct is always available as dev->status. Initially,
// all fields are 0.
//---------------------------------------------------------------------------
struct net_status_t
{
  net_speed_t   speed;                 // Current network speed of device.
  net_duplex_t  duplex;                // Current duplex setting.
  net_link_t    link;                  // Link technology.
  net_autoneg_t autoneg;               // Autonegotiation status.
  uint8_t       mac[ETHER_ADDR_LEN];   // MAC address, MUST BE SET.
  unsigned      remote_faults;         // Remote fault count.
  unsigned      jabbers;               // Jabber count.
  unsigned      ok                :1;  // Is the device functional?
  unsigned      up                :1;  // Is the link 'up'?
  unsigned      broadcast         :1;  // Are Rx broadcast packets enabled?
  unsigned      multicast         :1;  // Are Rx multicast packets enabled?
  unsigned      promiscuous       :1;  // Is in promiscuous mode?
  unsigned      polarity_incorrect:1;  // Is the line polarity incorrect?
  unsigned      tx_pause          :1;  // Tx pauses enabled.
  unsigned      rx_pause          :1;  // Rx pauses enabled.
};

//---------------------------------------------------------------------------
// This structure should be updated during the net_start_fn to indicate
// which features the device supports. This will be used by *EJConfig
//---------------------------------------------------------------------------
struct net_abilities_t
{
  unsigned speed_10Mb            :1;
  unsigned speed_100Mb           :1;
  unsigned speed_1000Mb          :1;
  unsigned half_duplex           :1;
  unsigned full_duplex           :1;
  unsigned autoneg               :1;
  unsigned multicast             :1;
  unsigned promiscuous           :1;
  unsigned tx_rx_loopback        :1; // Tx packets will be received.
  unsigned loopback              :1; // Supports loopback mode.
  unsigned mutable_mac           :1; // Can redefine MAC address.
  unsigned tx_pause              :1; // Supports asymmetric pause towards link partner
  unsigned rx_pause              :1; // Supports asymmetric pause towards self
  unsigned symmetric_pause       :1; // Supports symmetric pause
};

//---------------------------------------------------------------------------
// This structure is passed as an argument to the backend net_config_fn, if
// non-NULL. It is always called after the net_start_fn and may be called
// at any time until the net_stop_fn. Is defaulted to zero which means don't
// alter anything. For 'speed', 'duplex' and 'link' the 'unknown' value
// indicates that it wasn't specified.
//---------------------------------------------------------------------------
struct net_config_t
{
  net_speed_t  speed;       // Preferred speed.
  net_duplex_t duplex;      // Preferred duplex setting.
  net_link_t   link;        // Preferred link type.
  bool         autoneg;     // Force link auto negotiation.
  bool         multicast;   // Enable multicast mode.
  bool         promiscuous; // Enable promiscuous mode.
  bool         allow_tx_pause;
  bool         allow_rx_pause;
  bool         allow_symmetric_pause;
};

//---------------------------------------------------------------------------
// Non-backend specifc device data. Backends MUST NOT alter any of this
// except for the net_status_t and net_abilities_t structs.
//---------------------------------------------------------------------------
struct net_device
{
  struct net_device*   next;                // Next in linked list.
  struct net_device*   prev;                // Previous in linked list.
  char                 name[20];            // DeviceFS name of USB device.
  uint16_t             vendor;              // USB device vendor
  uint16_t             product;             // USB device product
  uint8_t              bus;                 // USB bus number.
  uint8_t              address;             // USB device number.
  uint8_t              speed;               // USB speed.
  uint8_t              usb_location[6];     // Location in USB device tree
  bool                 gone;                // Device unplugged.
  volatile uint8_t     tx_guard;            // Transmit Semaphore.
  const net_backend_t* backend;             // Backend used to talk to it.
  Dib                  dib;                 // DCI device info block.
  char                 location[64];        // Textual location description.
  size_t               mtu;                 // Current MTU.
  void*                private;             // Backend private word.
  net_filter_t*        specific_filters;    // Filter linked list.
  net_filter_t*        sink_filter;         // NULL or owns sink.
  net_filter_t*        monitor_filter;      // NULL or owns monitor filter.
  net_filter_t*        ieee_filter;         // NULL or owns IEEE filter.
  size_t               packet_tx_count;     // Packets sucessfully sent.
  size_t               packet_rx_count;     // Packets recieved.
  size_t               packet_unwanted;     // Packets with nowhere to go.
  size_t               packet_tx_errors;    // Packets unable to be sent.
  size_t               packet_rx_errors;    // Packets with rx errors.
  size_t               packet_tx_bytes;     // Tx byte count.
  size_t               packet_rx_bytes;     // Rx byte count.
  size_t               queue_tx_overflows;  // No. discarded op pkts
  size_t               queue_tx_max_usage;  // Max tx queue length.
  net_status_t         status;              // Driver should update these.
  net_abilities_t      abilities;           // Driver should update these.
  net_tx_t             tx_packet;
};

//---------------------------------------------------------------------------
// Initialisation/Finalisation
//---------------------------------------------------------------------------

// Call to register a backend.
_kernel_oserror* net_register_backend(const net_backend_t* backend);

// Call on exit to ensure everything shutdown etc.
_kernel_oserror* net_finalise(void);

//---------------------------------------------------------------------------
// Service call handlers
//---------------------------------------------------------------------------

// Checks a device to see if any backend can handle it, handle=NULL.
// Takes no action if device is not supported.
_kernel_oserror* net_check_device(const USBServiceCall* dev, void* handle);

// Notify of device removal. 'name' is DeviceFS name, e.g. 'USB1'
_kernel_oserror* net_dead_device(const char* name);

// Someone is scanning for network interfaces.
_kernel_oserror* net_enumerate_drivers(_kernel_swi_regs* r);

// Protocol module is dying and wants to release all claimed frame types.
_kernel_oserror* net_protocol_dying(_kernel_swi_regs* r);

//---------------------------------------------------------------------------
// Backend specific functions
//---------------------------------------------------------------------------

// Send a packet to wherever it is meant to go or discard it. Error is 0 if
// there was no packet RX error or a device specific error code.
_kernel_oserror* net_receive(net_device_t* dev,
                             const void*   pk,
                             size_t        size,
                             uint32_t      error);

// Attempts to send next queued packet by calling dev's backend.
_kernel_oserror* net_attempt_transmit(net_device_t* dev);

//---------------------------------------------------------------------------
// (Re)configure device
//---------------------------------------------------------------------------
_kernel_oserror* net_configure(unsigned unit, const char* arg_string);

//---------------------------------------------------------------------------
// Generation of default MAC address for devices which don't have one.
//---------------------------------------------------------------------------
void net_default_mac(unsigned unit, uint8_t* mac);

//---------------------------------------------------------------------------
// Look up the configured MAC address for the machine. Returns false if no
// MAC exists, or if it's already in use by another driver.
//---------------------------------------------------------------------------
bool net_machine_mac(uint8_t* mac);

//---------------------------------------------------------------------------
// *Command output.
//---------------------------------------------------------------------------

// General information to stdout.
_kernel_oserror* net_info(unsigned unit, bool verbose);

//---------------------------------------------------------------------------
// DCI Driver SWI implementations. These are all required to be reentrant
//---------------------------------------------------------------------------

// Get flags (DCI_Inquire). Reentrant.
_kernel_oserror* net_inquire(_kernel_swi_regs* r);

// Get MTU (DCI_GetNetworkMTU). Reentrant.
_kernel_oserror* net_get_network_mtu(_kernel_swi_regs* r);

// Send some data (DCI_Transmit). Reentrant.
_kernel_oserror* net_transmit(_kernel_swi_regs* r);

// Claim/release packet types (DCI_Filter). Reentrant
_kernel_oserror* net_filter(_kernel_swi_regs* r);

// Statistics
_kernel_oserror* net_stats(_kernel_swi_regs* r);

//---------------------------------------------------------------------------

#endif
@


1.13
log
@Improvements to SMSC 95xx backend and common MII handling
Detail:
  c/smsc95xx - Convert code to use the common MII backend. Reduce verbosity of debug output. Fix two sets of status callbacks running (callback_status_adapter + device_status). Tweak/refactor a couple of other bits as necessary in order to get 10M links working reliably.
  c/mii, h/mii, h/net - Allow backends to indicate their level of support for PAUSE functionality, so that we can advertise it correctly when performing auto-negotiation (previously no pause ability would have been advertised)
  c/config - Ensure config_parse_arguments passes through the PAUSE capabilities to the output net_config_t. Use the (currently unused) ERR_BAD_CONFIG for if autonegotiation is disabled but either speed or duplex setting not specified (avoids MII code or backends getting confused as to what options they should use)
  Resources/UK/Messages - Tweak wording of ERR_BAD_CONFIG so that it's more sensible for the new usage
  doc/!ReadMe - Remove the note about 10M links not being supported by the SMSC 95xx backend. Update the changelog to point people towards CVS for recent changes.
Admin:
  Tested on PandaBoard + Raspberry Pi 3, using SMSC 95xx and AX88772 devices
  SMSC testing results:
  * Previously, 10M links were non-functional
  * Previously, manually-configured 100M full duplex links would suffer terrible performance
  * Previously, any attempt to reconfigure a link on Pi 3 would result in a "Device broken or misbehaving" error? (or at least, that's how 0.38 is behaving for me now)
  * Now, all combinations of configuration (speed + link + auto/noauto) appear to work correctly, except for manually-configured full-duplex links, which still suffer from terrible performance
  AX88772 was used to verify MII changes haven't broken anything for other backends; testing showed no significant differences to previous version (all speed + link + auto/noauto modes working)
  Resolves ticket #342:
  https://www.riscosopen.org/tracker/tickets/342
  Note that currently the SMSC 95xx backend is the only backend to advertise PAUSE functionality via the common MII code; a future improvement would be to set up the other backends appropriately (set correct flags in net_abilities_t)


Version 0.39. Tagged as 'EtherUSB-0_39'
@
text
@d60 3
a62 1
               net_link_100BaseT4
d117 2
a118 1
typedef void (net_info_fn)(const net_device_t* dev);
@


1.12
log
@Speed reporting and buffer sizing for SMSC75xx backend
Detail:
  net.c: added support for 1000Mb speed
  smsc75xx.c: reduced MAX_RX_FIFOSIZE to 16k (avoids problems with Kernel keyboard scanning);
              corrected determination of ethernet speed (read from SMC75XX_MAC_CR register)
  net.h: added net_speed_1000Mb (in net_speed_t) and speed_1000Mb (in struct net_abilities_t)
  Messages: added Sp1000 and Dit21 for supporting 1000Mb speed
Admin:
  Submission from Colin Granville.

Version 0.38. Tagged as 'EtherUSB-0_38'
@
text
@d224 3
d244 3
@


1.11
log
@  Support ARMv8
Detail:
  This module previously used both SWP and SWPB instructions, which have
  been withdrawn in ARMv8. Now use SyncLib to provide the equivalent
  functionality, which will use LDREX/STREX or LDREXB/STREXB instead when
  appropriate.
Admin:
  Tested on Raspberry Pi 3.

Version 0.36. Tagged as 'EtherUSB-0_36'
@
text
@d46 2
a47 1
               net_speed_100Mb
d215 1
@


1.10
log
@Further throughput improvements
ax88772.c:
  Modified to work with changes made to net.c and usb.c.
  Increased buffer sizes, allow more than one packet receipt.
ax88172.c/mcs7830.c/pegasus.c:
  Modified to work with changes made to net.c and usb.c.
smsc95xx.c:
  Copyright header simplified by using pronoun form "the copyright holders" rather than repeating this list.
  Modified to work with changes made to net.c and usb.c.
  Reading of MAC address from EEPROM fixed.
products.c:
  Added SMSC9730 device id (uses smsc95xx backend).
net.c/net.h:
  tx_queue removed, all transmit buffering is now done in the USB code.
usb.c:
  Function usb_write() blocks until room is available, or times out.
  Use USBDriver header rather than defining local SWI numbers.
Messages:
  Renamed DescSMC token to DescSMC9.
  Removed redundant Stat7 statistic.

Submission from Colin Granville.
Tested on Pi B+ and OMAP3, not tested on OMAP4, but believed to markedly improve its performance over version 0.30.

Version 0.31. Tagged as 'EtherUSB-0_31'
@
text
@d257 1
a257 1
  uint8_t              tx_guard;            // Transmit Semaphore.
@


1.9
log
@Define ETHER_ADDR_LEN
There's an element of duplication between the definitions of net.h and those in TCPIPLibs:net/ethernet.h which would be better to resolve, but for now just mirror its definition locally.
Not tagged.
@
text
@d156 1
d173 1
a275 2
  volatile size_t      tx_queue_in;         // Insert position.
  volatile size_t      tx_queue_out;        // Remove position.
d278 1
a278 1
  net_tx_t             tx_queue[TX_QUEUE_LENGTH];
@


1.8
log
@Internationalised
AutoSense script updated to be able to parse both the hardwired english output (0.08-0.25 inclusive) and internationalised text (0.26+).
Tested RAM loaded on a Raspberry Pi.

Version 0.26. Tagged as 'EtherUSB-0_26'
@
text
@d153 5
d162 2
a163 2
  uint8_t        dst_addr[6];
  uint8_t        src_addr[6];
d191 1
a191 1
  uint8_t       mac[6];                // MAC address, MUST BE SET.
d328 1
a328 10
// Generation of default MAC address for devices which don't have one. The
// 'mac' pointer must point to a 6 byte buffer. The MAC address is
// generated from the machine's unique ID, or failing that a hard coded one.
//
// Most significant byte:
//   b0   : Flag: 0=>unicast, 1=>multicast.
//   b1   : Flag: 0=>globally unique, 1=>locally administered.
//   b2-b3: zero.
//   b4-b7: unit number.
// unit number
@


1.7
log
@Add more ways of specifying device configuration. Adjust unit number allocation & SMSC MAC handling.
Detail:
  c/smsc95xx - Adjust MAC handling some more:
    - Unit number check removed from EtherUSB$MAC_Configured code in fill_arbitraryMAC(), to increase compatibility with previous version
    - EtherUSB$MAC_Configured check is now performed before the devices currently-programmed MAC is checked; this should ensure it always takes priority over the other methods (especially when reiniting EtherUSB after setting the variable)
    - OS_ReadSysInfo 4 & machine ID hash checks remain in their previous place, after the currently-programmed MAC check
  c/config, h/config:
    - Add support for using EtherUSB$VP_* and EtherUSB$Loc_* system variables to configure devices, by specifying USB vendor/product IDs or USB device tree locations, respectively.
    - Allow config_reserved_units() to select a devices unit number by looking for VP_ or Loc_ system variables.
  c/net, h/net:
    - Add USB device vendor & product ID, and device tree location, to net_device_t struct.
    - Display vendor/product ID & device tree location in verbose ejinfo output
    - Adjust unit number selection: Attempt to select a unit number before calling backend->start, so that the unit number can be used in MAC allocation if required (i.e. by net_default_mac()).
    - Change net_default_mac() to use OS_ReadSysInfo 5 instead of OS_ReadSysInfo 2; OS_ReadSysInfo 2 strips out the first and last byte of the ID, making the psuedo-unique MAC somewhat less unique.
  c/usb, h/usb - Add utility function for reading the location of a device within the USB device tree.
Admin:
  Tested on BB-xM, Raspberry Pi
  Overriding MAC via EtherUSB$MAC_Configured now works as expected (was previously failing due to unit number being MODULE_MAX_UNITS)
  Unit number reservation/selection & device configuration via all three variable types (MAC, VP, Loc) verified


Version 0.24. Tagged as 'EtherUSB-0_24'
@
text
@d35 1
d253 1
a253 1
  char                 location[40];        // Textual location description.
a276 7
// Return static strings for displaying enum value.
//---------------------------------------------------------------------------
const char* net_link_string(net_link_t link);
const char* net_speed_string(net_speed_t speed);
const char* net_duplex_string(net_duplex_t duplex);

//---------------------------------------------------------------------------
@


1.6
log
@Improve SMSC MAC selection
Detail:
  c/net, h/net - Make net_default_mac() non-static. Add net_machine_mac() function for looking up MAC by OS_ReadSysInfo 4.
  c/smsc95xx - Change MAC selection logic. Old order was OS_ReadSysInfo 4 -> EtherUSB$MAC_Configured -> 100% hardcoded default. New order is EtherUSB$MAC_Configured -> OS_ReadSysInfo 4 -> hashed machine ID + unit number -> hardcoded default (with unit number). This new logic means BB-xM's should now have unique MACs instead of all sharing the same MAC.
Admin:
  Tested on BB-xM, Raspberry Pi. Raspberry Pi retains the MAC that's specified by the firmware, while the BB-xM now uses the hashed machine ID instead of the hardcoded default.
  Based on changes supplied by Willi Theiss.


Version 0.23. Tagged as 'EtherUSB-0_23'
@
text
@d242 2
d247 1
@


1.5
log
@Added autosense, and autosense install rule to makefile.
Now uses AsmUtils for irqs_on/irqs_off
Squash a few unused variable warnings, not in the backends though as porting updates would be more complex for those that come from (for example) NetBSD.
Changed to use structure definitions from sys/dcistructs.h (mostly an exercise in prefixing member names).

Version 0.16. Tagged as 'EtherUSB-0_16'
@
text
@d326 20
@


1.4
log
@Uses common USB header files exported by the USB stack.
Use ModHand/Variables/RISCOS/OsByte headers.
Note, this has meant some header files needed reordering to prevent circular dependencies.

Version 0.15. Tagged as 'EtherUSB-0_15'
@
text
@d34 1
a34 1
#include "dci.h"
d248 1
a248 1
  dci_dib_t            dib;                 // DCI device info block.
@


1.3
log
@Brought under srccommit control for update of version numbers.
Makefile recreated from fragments
CMHG file renamed to avoid needing special rule to tell where it is.

Version 0.14. Tagged as 'EtherUSB-0_14'
@
text
@a33 1
#include "usb.h"
d74 3
a76 3
typedef _kernel_oserror* (net_open_fn)(const usb_service_t* usb,
                                       const char*          options,
                                       void**               private);
d295 1
a295 1
_kernel_oserror* net_check_device(const usb_service_t* dev, void* handle);
@


1.2
log
@Explicit BSD licence heading blocks added to those source files that did not have them.
No code changes, not tagged.
@
text
@a35 1
#include "version.h"
@


1.1
log
@Import of sources to EtherUSB.
Special thanks to James Peacock for allowing ROOL to host these sources.
This import represents version 0.13 by James and the backend contributors, the only change being that the makefile wipes the directories it creates on cleaning so there's no need to import those to CVS.
Tagged as jpeacock-0_13.
@
text
@d1 27
a27 4
/* EtherUSB
 * (C) James Peacock, 2006
 */

@

