head	1.4;
access;
symbols
	EtherUSB-0_15:1.3
	EtherUSB-0_14:1.3
	jpeacock-0_13:1.1;
locks; strict;
comment	@# @;


1.4
date	2012.05.19.08.42.24;	author rsprowson;	state dead;
branches;
next	1.3;
commitid	1BHJUY7zoQz3lj5w;

1.3
date	2012.05.19.08.30.29;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	R1EOINZ5A36Ygj5w;

1.2
date	2012.05.19.08.22.18;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	SzPjH7uh6hKVdj5w;

1.1
date	2012.05.19.08.19.15;	author rsprowson;	state Exp;
branches;
next	;
commitid	q3rEKeu2RrS2cj5w;


desc
@@


1.4
log
@Added autosense, and autosense install rule to makefile.
Now uses AsmUtils for irqs_on/irqs_off
Squash a few unused variable warnings, not in the backends though as porting updates would be more complex for those that come from (for example) NetBSD.
Changed to use structure definitions from sys/dcistructs.h (mostly an exercise in prefixing member names).

Version 0.16. Tagged as 'EtherUSB-0_16'
@
text
@//
// Copyright (c) 2006, James Peacock
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met: 
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of RISC OS Open Ltd nor the names of its contributors
//       may be used to endorse or promote products derived from this software
//       without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
#ifndef DCI_H_INCLUDED
#define DCI_H_INCLUDED

#include <stdint.h>

// Standardised DCI error numbers
#define DCI_ERR_BAD_VALUE                     (0x20e16)
#define DCI_ERR_BAD_UNIT                      (0x20e06)
#define DCI_ERR_BAD_OPERATION                 (0x20e19)
#define DCI_ERR_BLOCKED                       (0x20e86)
#define DCI_ERR_NET_DOWN                      (0x20e32)
#define DCI_ERR_MESSAGE_SIZE                  (0x20e28)
#define DCI_ERR_NO_MBUFS                      (0x20e37)
#define DCI_ERR_PERMISSIONS                   (0x20e01)
#define DCI_ERR_ALREADY_CLAIMED               (0x20e87)

// DCI slot IDs.
#define DCI_SLOT_PODULE(n) (n)                  // n in {0, ..., 7}
#define DCI_SLOT_NIC       (8u)
#define DCI_SLOT_PCI(n)    ((16u)+(n))          // n in {0, ...,15}
#define DCI_SLOT_PARALLEL  (128u)
#define DCI_SLOT_SERIAL    (129u)
#define DCI_SLOT_ECONET    (130u)
#define DCI_SLOT_PCMIA     (131u)
#define DCI_SLOT_USB       (201u)               // Get allocated!

// Filtering frame class/level.
#define DCI_FL_E2SPECIFIC  (0x0001)             // Specifed E2 type only
#define DCI_FL_E2SINK      (0x0002)             // All unclaimed E2
#define DCI_FL_E2MONITOR   (0x0003)             // All E2 frames
#define DCI_FL_IEEE        (0x0004)             // All IEEE 802.2 frames

// Filtering address levels.
#define DCI_AL_SPECIFIC     (0x0000)            // Addressed
#define DCI_AL_NORMAL       (0x0001)            // Addressed, bcast
#define DCI_AL_MULTICAST    (0x0002)            // Addressed, bcast, mcast.
#define DCI_AL_PROMISCUOUS  (0x0003)            // All.

// Filtering Error levels
#define DCI_EL_NO_ERRORS    (0x0)               // Only error free frames
#define DCI_EL_ERRORS       (0x1)               // All frames.

// SWI _Filter flags
#define DCI_FILTER_RELEASE  (1u<<0)             // Release a packet type
#define DCI_FILTER_SAFE     (1u<<1)             // Must pass safe data up.
#define DCI_FILTER_ALL_MC   (1u<<2)             // Don't pass all MC frames.

// SWI _Transmit flags
#define DCI_TX_HW_ADDRESS   (1u<<0)             // HW source address in r5
#define DCI_TX_DONT_OWN     (1u<<1)             // Don't take mbuf ownership.

// Stats interface types
#define DCI_ST_10BASE_5     (0x1)               // 10-base5
#define DCI_ST_10BASE_2     (0x02)              // 10-base2
#define DCI_ST_10BASE_T     (0x03)              // 10-baseT
#define DCI_ST_10BASE_25    (0x04)              // 10-base5 + 10-base2
#define DCI_ST_10BASE_2T    (0x05)              // 10-baseT + 10-base2
#define DCI_ST_10BASE_T_RS  (0x06)              // 10-baseT Reduced-Squelch
#define DCI_ST_ECONET       (0x07)
#define DCI_ST_SERIAL       (0x08)
#define DCI_ST_PARALLEL     (0x09)
#define DCI_ST_10BASE_25T   (0x10)              // 10-base{2,5,T}
#define DCI_ST_10BASE_FX    (0x11)
#define DCI_ST_100BASE_TX   (0x12)
#define DCI_ST_100BASE_VG   (0x13)
#define DCI_ST_100BASE_T4   (0x14)
#define DCI_ST_100BASE_FX   (0x15)
#define DCI_ST_ATM_25_6     (0x16)
#define DCI_ST_ATM_155      (0x17)

// Stats link status
#define DCI_ST_INTERFACE_BAD           (0u<<0)
#define DCI_ST_INTERFACE_GOOD          (1u<<0)
#define DCI_ST_INTERFACE_INACTIVE      (0u<<1)
#define DCI_ST_INTERFACE_ACTIVE        (1u<<1)
#define DCI_ST_INTERFACE_ADDRESSED     (0u<<2)
#define DCI_ST_INTERFACE_BROADCAST     (1u<<2)
#define DCI_ST_INTERFACE_MULTICAST     (2u<<2)
#define DCI_ST_INTERFACE_ALL           (3u<<2)
#define DCI_ST_INTERFACE_HALF_DUBLEX   (0u<<4)
#define DCI_ST_INTERFACE_FULL_DUPLEX   (1u<<4)

// Stats link polarity
#define DCI_ST_POLARITY_CORRECT        (1u<<0)
#define DCI_ST_POLARITY_INCORRECT      (0u<<0)

// Inquire flags
#define DCI_INQUIRE_MULTICAST          (1u<<0)  // Multicast supported
#define DCI_INQUIRE_PROMISCUOUS        (1u<<1)  // Promiscuous mode supported
#define DCI_INQUIRE_LOOPBACK           (1u<<2)  // Interface Rx's own Tx's
#define DCI_INQUIRE_STATION_NO_REQ     (1u<<3)  // Econet fixed station no?
#define DCI_INQUIRE_RX_BAD_PACKETS     (1u<<4)  // Can Rx erroreous packets
#define DCI_INQUIRE_HW_ADDRESS         (1u<<5)  // Has hardware adderess
#define DCI_INQUIRE_HW_ADDRESS_MUTABLE (1u<<6)  // Can change hw addresss
#define DCI_INQUIRE_POINT_TO_POINT     (1u<<7)  // Point to point link
#define DCI_INQUIRE_STD_STATS          (1u<<8)  // Provides standard stats.
#define DCI_INQUIRE_EXT_STATS          (1u<<9)  // Provides extended stats.
#define DCI_INQUIRE_VIRTUAL            (1u<<10) // Interface is virtual.
#define DCI_INQUIRE_VIRTUAL_SOFT       (1u<<11) // Software based.
#define DCI_INQUIRE_MULTICAST_REQUEST  (1u<<12) // MulticastRequest supported

typedef struct
{
  unsigned id   :8;            // One of DCI_SLOT_...
  unsigned minor:8;            // Device driver dependent.
  unsigned pcmia:5;            // MUST be zero if not PCMIA virtual slot.
  unsigned mbz  :11;           // 0
} dci_slot_t;


typedef struct
{
  uint32_t       swibase;      // Driver module SWI base
  const char*    name;         // 0 terminated short name, e.g. 'en'
  uint32_t       unit;         // Unit number, 0,1...
  const uint8_t* address;      // => 6 byte hardware address
  const char*    module;       // Module title of driver.
  const char*    location;     // Description of location, <40 chars
  dci_slot_t     slot;         // Slot
  uint32_t       inquire;      // Flags returned by Inquery SWI.
} dci_dib_t;


// Service EnumerateNetworkDrivers chain list
typedef struct dci_chain_dib_t
{
  struct dci_chain_dib_t*  next;
  const dci_dib_t*         dib;
} dci_chain_dib_t;

typedef struct
{
  void*          ptr;          // Interal use by RX handler
  int32_t        tag;          // Zero initially. Used by IEEE802.2 impl,
  uint8_t        src_addr[6];  // Hardware source address/0 if not supported.
  uint8_t        src_pad[2];   // Zero
  uint8_t        dst_addr[6];  // Hardware dest address/0 if not supported.
  uint8_t        dst_pad[2];   // Zero
  uint32_t       frame_type;   // Last 2 bytes from MAC header.
  uint32_t       error_level;  // 0 => No errors else driver specific code.
} dci_rx_header_t;

typedef struct
{
  // General
  uint8_t         interface_type;         // 0
  uint8_t         link_status;            // 1
  uint8_t         link_polarity;          // 2
  uint8_t         blank1;                 // 3
  uint32_t        link_failures;          // 4
  uint32_t        network_collisions;     // 8
  // Transmit
  uint32_t        collisions;             // 12
  uint32_t        excess_collisions;      // 16
  uint32_t        heartbeat_failures;     // 20
  uint32_t        not_listening;          // 24
  //uint32_t        net_error;
  uint32_t        tx_frames;              // 28
  uint32_t        tx_bytes;               // 32
  uint32_t        tx_general_errors;      // 36
  uint8_t         last_dest_addr[8];      // 40
  // Receive
  uint32_t        crc_failures;           // 48
  uint32_t        frame_alignment_errors; // 52
  uint32_t        dropped_frames;         // 56
  uint32_t        runt_frames;            // 60
  uint32_t        overlong_frames;        // 64
  uint32_t        jabbers;                // 68
  uint32_t        late_events;            // 72
  uint32_t        unwanted_frames;        // 76
  uint32_t        rx_frames;              // 80
  uint32_t        rx_bytes;               // 84
  uint32_t        rx_general_errors;      // 88
  uint8_t         last_src_addr[8];       // 92
} dci_stats_t;                            // 100

#endif
@


1.3
log
@Brought under srccommit control for update of version numbers.
Makefile recreated from fragments
CMHG file renamed to avoid needing special rule to tell where it is.

Version 0.14. Tagged as 'EtherUSB-0_14'
@
text
@@


1.2
log
@Explicit BSD licence heading blocks added to those source files that did not have them.
No code changes, not tagged.
@
text
@a30 8
// DCI Service Calls
#define Service_EnumerateNetworkDrivers         (0x9b)
#define Service_DCIDriverStatus                 (0x9d)
#define Service_DCIFrameTypeFree                (0x9e)
#define Service_DCIProtocolStatus               (0x9f)

#ifndef CMHG

a204 1
#endif
@


1.1
log
@Import of sources to EtherUSB.
Special thanks to James Peacock for allowing ROOL to host these sources.
This import represents version 0.13 by James and the backend contributors, the only change being that the makefile wipes the directories it creates on cleaning so there's no need to import those to CVS.
Tagged as jpeacock-0_13.
@
text
@d1 27
a27 3
/* EtherUSB
 * (C) James Peacock, 2006.
 */
@

