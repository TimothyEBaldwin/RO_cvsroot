head	1.7;
access;
symbols
	EtherUSB-0_41:1.7
	EtherUSB-0_40:1.7
	EtherUSB-0_39:1.7
	EtherUSB-0_38:1.7
	EtherUSB-0_37:1.7
	EtherUSB-0_36:1.7
	EtherUSB-0_35:1.7
	EtherUSB-0_34:1.7
	EtherUSB-0_33:1.7
	EtherUSB-0_32:1.7
	EtherUSB-0_31:1.7
	EtherUSB-0_30:1.7
	EtherUSB-0_29:1.7
	EtherUSB-0_28:1.7
	EtherUSB-0_27:1.7
	EtherUSB-0_26:1.7
	EtherUSB-0_25:1.6
	EtherUSB-0_24:1.6
	EtherUSB-0_23:1.5
	EtherUSB-0_22:1.5
	EtherUSB-0_21:1.5
	EtherUSB-0_20:1.4
	EtherUSB-0_19:1.4
	EtherUSB-0_18:1.4
	EtherUSB-0_17:1.4
	EtherUSB-0_16:1.4
	EtherUSB-0_15:1.4
	EtherUSB-0_14:1.3
	jpeacock-0_13:1.1;
locks; strict;
comment	@# @;


1.7
date	2013.10.13.13.54.47;	author rsprowson;	state Exp;
branches;
next	1.6;
commitid	cLeOtNKk3nePB89x;

1.6
date	2013.04.07.17.47.12;	author jlee;	state Exp;
branches;
next	1.5;
commitid	7koGNmobBUDhYRKw;

1.5
date	2012.09.09.15.37.19;	author jlee;	state Exp;
branches;
next	1.4;
commitid	PX4F0vbh4EFd0Sjw;

1.4
date	2012.05.19.08.39.09;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	sBdKYcdaXJwXjj5w;

1.3
date	2012.05.19.08.30.29;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	R1EOINZ5A36Ygj5w;

1.2
date	2012.05.19.08.22.18;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	SzPjH7uh6hKVdj5w;

1.1
date	2012.05.19.08.19.17;	author rsprowson;	state Exp;
branches;
next	;
commitid	q3rEKeu2RrS2cj5w;


desc
@@


1.7
log
@Internationalised
AutoSense script updated to be able to parse both the hardwired english output (0.08-0.25 inclusive) and internationalised text (0.26+).
Tested RAM loaded on a Raspberry Pi.

Version 0.26. Tagged as 'EtherUSB-0_26'
@
text
@//
// Copyright (c) 2006, James Peacock
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met: 
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of RISC OS Open Ltd nor the names of its contributors
//       may be used to endorse or promote products derived from this software
//       without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
#ifndef USB_H_INCLUDED
#define USB_H_INCLUDED

#include <stdint.h>
#include <stdbool.h>
#include "kernel.h"

// Device speeds
#define USB_SPEED_LOW  (1u)
#define USB_SPEED_FULL (2u)
#define USB_SPEED_HI   (3u)

// Control pipe request types. Or one of each of these.
#define USB_REQ_WRITE        (0u<<7)
#define USB_REQ_READ         (1u<<7)

#define USB_REQ_TP_STANDARD  (0u<<5)
#define USB_REQ_TP_CLASS     (1u<<5)
#define USB_REQ_TP_VENDOR    (2u<<5)

#define USB_REQ_TO_DEVICE    (0u<<0)
#define USB_REQ_TO_INTERFACE (1u<<0)
#define USB_REQ_TO_ENDPOINT  (2u<<0)
#define USB_REQ_TO_OTHER     (3u<<0)

// Common cases
#define USB_REQ_VENDOR_WRITE (USB_REQ_WRITE|USB_REQ_TP_VENDOR)
#define USB_REQ_VENDOR_READ  (USB_REQ_READ|USB_REQ_TP_VENDOR)

// Standard control pipe requests.
#define USB_REQ_GET_STATUS        0u
#define USB_REQ_CLEAR_FEATURE     1u
#define USB_REQ_SET_FEATURE       3u
#define USB_REQ_SET_ADDRESS       5u
#define USB_REQ_GET_DESCRIPTOR    6u
#define USB_REQ_SET_DESCRIPTOR    7u
#define USB_REQ_GET_CONFIGURATION 8u
#define USB_REQ_SET_CONFIGURATION 9u
#define USB_REQ_GET_INTERFACE     10u
#define USB_REQ_SET_INTERFACE     11u
#define USB_REQ_SYNCH_FRAME       12u

// Returns type field from a descriptor,
static inline unsigned usb_descriptor_type(const void* descriptor)
{
  return ((const uint8_t*)descriptor)[1];
}

static inline size_t usb_descriptor_size(const void* descriptor)
{
  return ((const uint8_t*)descriptor)[0];
}

// Returns pointer to next descriptor, or NULL if no more.
static inline const void* usb_descriptor_next(const void* descriptor)
{
  const uint8_t* p = (const uint8_t*)descriptor;
  p += p[0];
  return (p[0]<2) ? NULL : p;
}

// Returns pointer to first descriptor (device descriptor).
static inline const void* usb_descriptor_list(const USBServiceCall* s)
{
  return (const uint8_t*)s + s->descoff;
}

// Calls 'fn' for each USB device currently connected.
typedef _kernel_oserror* (usb_scan_devices_fn)(const USBServiceCall*,
                                               void* handle);

_kernel_oserror* usb_scan_devices(usb_scan_devices_fn* fn, void* handle);

// Finds a interface descriptor, returns NULL if not present.
const usb_interface_descriptor_t*
  usb_find_interface(const USBServiceCall* s,
                     unsigned              config_no,
                     unsigned              interface_no,
                     unsigned              alternate_no);

// Read the location of a device within the device tree
_kernel_oserror* usb_location(const char *name,
                              uint8_t *location);

// Sends request to device's control pipe and await reply.
_kernel_oserror* usb_control(const char* name,
                             uint8_t     request_type,
                             uint8_t     request,
                             uint16_t    value,
                             uint16_t    index,
                             uint16_t    length,
                             void*       data);

// Sends a set configuration command to the device over its control pipe.
_kernel_oserror* usb_set_config(const char* name, unsigned config);

// Selects a interface alternate.
_kernel_oserror* usb_set_interface(const char* name,
                                   unsigned    interface,
                                   unsigned    alternate);

// Handle for an open USB pipe.
typedef struct usb_pipe* usb_pipe_t;

// Purge all data in a usb buffer.
_kernel_oserror* usb_buffer_purge(usb_pipe_t pipe);

// Start a read transfer.
_kernel_oserror* usb_start_read(usb_pipe_t pipe);

// Opens a endpoint for reading/writing, if NULL returned, it is guarented
// that fh is a valid file handle, otherwise fh is zero. The string passed
// through is the devicefs filepath, with printf formating.
typedef enum { USBRead, USBWrite } usb_open_t;

// Called when Tx data sent or Rx data recieved.
typedef void (usb_handler_fn)(usb_pipe_t pipe, void* handler_ws);

#ifdef __CC_NORCROFT
#pragma -v1
#endif

_kernel_oserror* usb_open(const char*     device_name,
                          usb_pipe_t*     pipe,
                          usb_open_t      mode,
                          usb_handler_fn* handler_fn,
                          void*           handler_ws,
                          const char*     device_fmt,
                          ...);

#ifdef __CC_NORCROFT
#pragma -v0
#endif

// If *fs!=0 then purge all buffers associated with the device and
// close it. Sets *pipe to 0 on success. 'name' can be NULL if the device has
// been destroyed (e.g. was unplugged).
_kernel_oserror* usb_close(usb_pipe_t* pipe);

// Non-blocking write upto 'size' bytes to usb endpoint. 'size' updated with
// the actual number of bytes written. Ether all or nothing is written.
_kernel_oserror* usb_write(usb_pipe_t  pipe,
                           const void* data,
                           size_t*     size);

// Non-blocking read of up to up to 'size' bytes from a usb endpoint. 'size'
// is updated with the actual number of bytes read.
_kernel_oserror* usb_read(usb_pipe_t   pipe,
                          void*        data,
                          size_t*      size);

// Returns free or used bytes in a USB pipe's buffer.
size_t usb_buffer_free(usb_pipe_t pipe);
size_t usb_buffer_used(usb_pipe_t pipe);

// By default, short packets are only sent if the data sent is not an
// exact multiple of the of the pipe's max packet size. Calling this
// forces them to be sent at the end of all USB writes.
_kernel_oserror* usb_force_short_xfer(usb_pipe_t pipe);

// Init/uninit calls - must respect returned errors.
_kernel_oserror* usb_initialise(void);
_kernel_oserror* usb_finalise(void);

// Notify of Service_Reset
void usb_service_reset(void);

#endif
@


1.6
log
@Add more ways of specifying device configuration. Adjust unit number allocation & SMSC MAC handling.
Detail:
  c/smsc95xx - Adjust MAC handling some more:
    - Unit number check removed from EtherUSB$MAC_Configured code in fill_arbitraryMAC(), to increase compatibility with previous version
    - EtherUSB$MAC_Configured check is now performed before the devices currently-programmed MAC is checked; this should ensure it always takes priority over the other methods (especially when reiniting EtherUSB after setting the variable)
    - OS_ReadSysInfo 4 & machine ID hash checks remain in their previous place, after the currently-programmed MAC check
  c/config, h/config:
    - Add support for using EtherUSB$VP_* and EtherUSB$Loc_* system variables to configure devices, by specifying USB vendor/product IDs or USB device tree locations, respectively.
    - Allow config_reserved_units() to select a devices unit number by looking for VP_ or Loc_ system variables.
  c/net, h/net:
    - Add USB device vendor & product ID, and device tree location, to net_device_t struct.
    - Display vendor/product ID & device tree location in verbose ejinfo output
    - Adjust unit number selection: Attempt to select a unit number before calling backend->start, so that the unit number can be used in MAC allocation if required (i.e. by net_default_mac()).
    - Change net_default_mac() to use OS_ReadSysInfo 5 instead of OS_ReadSysInfo 2; OS_ReadSysInfo 2 strips out the first and last byte of the ID, making the psuedo-unique MAC somewhat less unique.
  c/usb, h/usb - Add utility function for reading the location of a device within the USB device tree.
Admin:
  Tested on BB-xM, Raspberry Pi
  Overriding MAC via EtherUSB$MAC_Configured now works as expected (was previously failing due to unit number being MODULE_MAX_UNITS)
  Unit number reservation/selection & device configuration via all three variable types (MAC, VP, Loc) verified


Version 0.24. Tagged as 'EtherUSB-0_24'
@
text
@a100 4

// Returns pointer to static string for USB speeds
const char* usb_speed_string(unsigned speed);

@


1.5
log
@Protect against memory corruption caused by devicefs streams being unexepectedly closed
Detail:
  c/cmodule, c/usb, cmhg/EtherUSBHdr, h/usb - Sit on FSControlV & FindV so we can watch for file closures and catch any attempt to close our devicefs streams. Also need to sit on Service_Reset to make sure FileSwitch doesn't get the vector calls before us.
  If the device streams get closed without our notice, then the next attempt to write to a buffer (or potentially read from one?) via the direct buffer manager calls will result in RMA corruption.
Admin:
  Tested on Raspberry Pi with high processor vectors
  Fixes occasional data aborts while sat on "shutdown complete" screen (since *shutdown will close the devicefs streams)


Version 0.21. Tagged as 'EtherUSB-0_21'
@
text
@d112 4
@


1.4
log
@Uses common USB header files exported by the USB stack.
Use ModHand/Variables/RISCOS/OsByte headers.
Note, this has meant some header files needed reordering to prevent circular dependencies.

Version 0.15. Tagged as 'EtherUSB-0_15'
@
text
@d192 3
@


1.3
log
@Brought under srccommit control for update of version numbers.
Makefile recreated from fragments
CMHG file renamed to avoid needing special rule to tell where it is.

Version 0.14. Tagged as 'EtherUSB-0_14'
@
text
@a30 6
#define Service_USBDriver_Attach    0     // New device detected
#define Service_USBDriver_Connected 1     // Report connected devices
#define Service_USBDriver_Gone      2     // Not issued.
#define Service_USBDriver_Starting  3     // USBDriver starting
#define Service_USBDriver_Dying     4     // USBDriver stopping

a32 1
#include <stddef.h>
a69 89
// Descriptor types
#define USB_DESCRIPTOR_DEVICE           0x01
#define USB_DESCRIPTOR_CONFIG           0x02
#define USB_DESCRIPTOR_STRING           0x03
#define USB_DESCRIPTOR_INTERFACE        0x04
#define USB_DESCRIPTOR_ENDPOINT         0x05
#define USB_DESCRIPTOR_DEVICE_QUALIFIER 0x06
#define USB_DESCRIPTOR_OTHER_SPEED      0x07
#define USB_DESCRIPTOR_CS_INTERFACE     0x24
#define USB_DESCRIPTOR_CS_ENDPOINT      0x25

typedef struct
{
  uint8_t     bLength;
  uint8_t     bDescriptorType;
  uint16_t    bcdUSB;
  uint8_t     bDeviceClass;
  uint8_t     bDeviceSubClass;
  uint8_t     bDeviceProtocol;
  uint8_t     bMaxPacketSize;
  uint16_t    idVendor;
  uint16_t    idProduct;
  uint16_t    bcdDevice;
  uint8_t     iManufacturer;
  uint8_t     iProduct;
  uint8_t     iSerialNumber;
  uint8_t     bNumConfigurations;
} usb_device_descriptor_t;

typedef __packed struct
{
  uint8_t     bLength;
  uint8_t     bDescriptorType;
  uint16_t    wTotalLength;
  uint8_t     bNumInterface;
  uint8_t     bConfigurationValue;
  uint8_t     iConfiguration;
  uint8_t     bmAttributes;
  uint8_t     bMaxPower;
} usb_config_descriptor_t;

typedef __packed struct
{
  uint8_t     bLength;
  uint8_t     bDescriptorType;
  uint16_t    bString[127];
} usb_string_descriptor_t;

typedef __packed struct
{
  uint8_t     bLength;
  uint8_t     bDescriptorType;
  uint8_t     bInterfaceNumber;
  uint8_t     bAlternateSetting;
  uint8_t     bNumEndpoints;
  uint8_t     bInterfaceClass;
  uint8_t     bInterfaceSubClass;
  uint8_t     bInterfaceProtocol;
  uint8_t     iInterface;
} usb_interface_descriptor_t;

typedef __packed struct
{
  uint8_t     bLength;
  uint8_t     bDescriptorType;
  uint8_t     bEndpointAddress;
  uint8_t     bmAttributes;
  uint8_t     wMaxPacketSize;
  uint8_t     bInterval;
} usb_endpoint_descriptor_t;


typedef struct
{
  uint16_t                sum_length;
  uint16_t                descriptors_offset;
  char                    name[20];           // e.g. 'USB1'
  uint8_t                 bus;                // Bus number 0-255
  uint8_t                 address;            // Device address 1-127
  uint8_t                 host_address;       // Device address 0-127
  uint8_t                 host_port;          // Port on host device
  uint8_t                 speed;              // Speed
  uint8_t                 unused1;            // Padding
  uint8_t                 unused2;            // Padding
  uint8_t                 unused3;            // Padding
  usb_device_descriptor_t device;             // Device desciptor
} usb_service_t;


d90 1
a90 1
static inline const void* usb_descriptor_list(const usb_service_t* s)
d92 1
a92 1
  return (const uint8_t*)s + s->descriptors_offset;
d96 1
a96 1
typedef _kernel_oserror* (usb_scan_devices_fn)(const usb_service_t*,
d107 4
a110 4
  usb_find_interface(const usb_service_t* s,
                     unsigned             config_no,
                     unsigned             interface_no,
                     unsigned             alternate_no);
@


1.2
log
@Explicit BSD licence heading blocks added to those source files that did not have them.
No code changes, not tagged.
@
text
@a30 1
#define Service_USBDriver           0xd2
a36 4
#define Service_DeviceDead          0x79

#ifndef CMHG

a288 1
#endif
@


1.1
log
@Import of sources to EtherUSB.
Special thanks to James Peacock for allowing ROOL to host these sources.
This import represents version 0.13 by James and the backend contributors, the only change being that the makefile wipes the directories it creates on cleaning so there's no need to import those to CVS.
Tagged as jpeacock-0_13.
@
text
@d1 27
a27 3
/* EtherUSB
 * (C) James Peacock, 2006.
 */
@

