head	1.3;
access;
symbols
	EtherB-4_32:1.3
	EtherB-4_31:1.2
	EtherB-4_30:1.1.1.1
	rsprowson-4_30:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2017.06.02.07.46.15;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	fUQBHbVxcYRRSLTz;

1.2
date	2015.11.24.08.24.30;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	9jFJJd7bF493YjKy;

1.1
date	2012.10.13.19.56.44;	author rsprowson;	state Exp;
branches
	1.1.1.1;
next	;
commitid	nzHmSfuNnQVzjgow;

1.1.1.1
date	2012.10.13.19.56.44;	author rsprowson;	state Exp;
branches;
next	;
commitid	nzHmSfuNnQVzjgow;


desc
@@


1.3
log
@Flip round the concept of NICs and interfaces
Having subsequently used this as the breeding stock for EtherY and EtherCPSW, it became clear that the hierarchy was the wrong way round for EtherB.
Meaning EtherB = 1 chip, 2 interfaces per chip (1 real, 1 virtual)
        EtherY = many chips, 1 interface per chip (no virtual support)
        EtherCPSW = many chips, 2 interfaces per chip (1 real, 1 virtual)
This change is a bulk search & replace job changing the referencing around so that DCI unit numbers (which map directly to interfaces) can get to the interface pertinent data via 1 pointer.

ebmodule.c: lots of pointer changes, split out the creation of a DCI unit into etherb_add_interface(), move the mbuf session flag out of the NIC structure
filtering.c: sync this with EtherY/EtherCPSW, removing one level of indirection
selftest.c/selftest.h/glue.c: lots of pointer changes
ebmodule.h: nest the 2 interfaces inside the NIC structure, as they are logically arranged this way
Messages: rephrase the slot location

Tested on a RiscPC, with and without virtual interface, and setting/clearing the other configuration options.

Version 4.32. Tagged as 'EtherB-4_32'
@
text
@/*
 * Copyright (c) 2012, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>
#include <ctype.h>

#include "sys/types.h"
#include "sys/errno.h"
#include "sys/mbuf.h"
#include "sys/dcistructs.h"
#include "net/ethernet.h"

#include "AsmUtils/irqs.h"

#include "filtering.h"
#include "glue.h"
#include "bus.h"
#include "seeq8005reg.h"
#include "seeq8005var.h"
#include "ebmodule.h"

/* Local state */
static volatile txdesc_t desc[EA_TX_BUFFER_COUNT];

/*
 * Translate a change in address or error level to chip settings
 */
void glue_set_levels(struct ifnet *ifp)
{
	uint8_t  unit, esummed, asummed;
	uint16_t passerrors;
	uint16_t matchmode;

	/* Since there's only one controller, combine levels */
	asummed = ADDRLVL_SPECIFIC;
	esummed = ERRLVL_NO_ERRORS;
	for (unit = 0; unit < units; unit++)
	{
		esummed = MAX(esummed, nicunit[unit]->ctrl->errorlevel);
		asummed = MAX(asummed, nicunit[unit]->ctrl->addresslevel);
	}

	/* While the 8005 and 80C04A do have more than 1 station address slot,
	 * keep things common to all supported chips by going promiscuous.
	 */
	if (units > 1) asummed = ADDRLVL_PROMISCUOUS;

	/* Map to SEEQ chip register bits */
	switch (esummed)
	{
		case ERRLVL_NO_ERRORS:
			passerrors = 0;
			break;

		default:
			passerrors = SEEQ_CFG2_CRC_ERR_ENABLE | SEEQ_CFG2_DRIB_ERR_ENABLE;
			break;
	}
	switch (asummed)
	{
		case ADDRLVL_SPECIFIC:
			matchmode = SEEQ_CFG1_SPECIFIC;
			break;

		case ADDRLVL_NORMAL:
			matchmode = SEEQ_CFG1_BROADCAST;
			break;

		case ADDRLVL_MULTICAST:
			matchmode = SEEQ_CFG1_MULTICAST;
			break;

		case ADDRLVL_PROMISCUOUS:
			matchmode = SEEQ_CFG1_PROMISCUOUS;
			break;
	}

	/* Write to the chip */
	ifp->if_ioctl(ifp, IOCTL_SET_MATCHMODE, &matchmode);
	ifp->if_ioctl(ifp, IOCTL_PASS_RXERRORS, &passerrors);
}

/*
 * Receive a packet to filter
 */
void glue_receive(struct ifnet *unused, struct mbuf *chain)
{
	struct mbuf *shuffle;
	uint8_t *hdr;
	RxHdr   *rxhdr;
	int8_t   ctrl, unit;
	int8_t   specific = 0;
	uint16_t frame, class;
	uint32_t length = chain->m_pkthdr.len;

	hdr = mtod(chain, uint8_t *);
	frame = (hdr[(2 * ETHER_ADDR_LEN) + 0] << 8) | hdr[(2 * ETHER_ADDR_LEN) + 1];

	/* Only one supported, so it must be this controller */
	ctrl = 0;

	/* Don't process packets from faulty hardware */
	if (nic[ctrl].faulty)
	{
		m_freem(chain);
		return;
	}
 
	/* Figure out which EUI48 class it is */
	if (((hdr[0] & 1) != 0) && (hdr[0] != 0xFF))
	{
		class = IS_MULTICAST;
	}
	else
	{
		if ((hdr[0] & hdr[1] & hdr[2] & hdr[3] & hdr[4] & hdr[5]) == 0xFF)
		{
			class = IS_BROADCAST;
		}
		else
		{
			/* Specific of some sort */
			class = IS_SPECIFIC;
			for (unit = 0; unit < units; unit++)
			{
				if (memcmp(hdr, nicunit[unit]->eui, ETHER_ADDR_LEN) == 0)
				{
					class = IS_MINE;
					specific = unit;
					break;
				}
			}
		}
	}

	/* Shuffle the header into protocol handler format */
	shuffle = ALLOC_S(sizeof(RxHdr), NULL);
	if (shuffle == NULL)
	{
		for (unit = 0; unit < units; unit++)
		{
			if ((class == IS_MINE) && (specific != unit)) continue;
			nicunit[unit]->rx_errors++;
		}
		m_freem(chain);
		return;
	}
	shuffle->m_list = NULL;
	shuffle->m_type = MT_HEADER;
	rxhdr = mtod(shuffle, RxHdr *);
	rxhdr->rx_tag = 0;
	rxhdr->rx_error_level = (int)chain->m_pkthdr.rcvif;
	rxhdr->_spad[0] = rxhdr->_spad[1] = 0;
	rxhdr->_dpad[0] = rxhdr->_dpad[1] = 0;
	memcpy(rxhdr->rx_dst_addr, &hdr[0], ETHER_ADDR_LEN);
	memcpy(rxhdr->rx_src_addr, &hdr[ETHER_ADDR_LEN], ETHER_ADDR_LEN);
	rxhdr->rx_frame_type = frame;

	/* Ditch the flattened head of the chain, and prefix the shuffled copy */
	shuffle->m_next = chain->m_next;
	m_free(chain);
	chain = shuffle;

	/* Pass on to unit(s) concerned */
	for (unit = units - 1; unit >= 0; unit--)
	{
		if ((class == IS_MINE) && (specific != unit)) continue;

		/* Non specifics get propagated to virtual units as clones */
		if ((class != IS_MINE) && nicunit[unit]->virtual)
		{
			struct mbuf *clone;
#if GLUE_DUMP_RX
			printf("Rx%c : clone, %d bytes\n", '0' + unit, length);
#endif
			clone = COPY_P(chain, 0, M_COPYALL);
			if (clone == NULL)
			{
				nicunit[unit]->rx_errors++;
			}
			else
			{
				nicunit[unit]->rx_packets++;
				nicunit[unit]->rx_bytes += length;
				filter_input(unit, class, rxhdr, clone);
			}
			continue;
		}
#if GLUE_DUMP_RX
		printf("Rx%c : ", '0' + unit);
		GLUE_DUMP_EUI48(rxhdr->rx_dst_addr);
		printf(": ");
		GLUE_DUMP_EUI48(rxhdr->rx_src_addr);
		printf(": type %04X, %d bytes\n", rxhdr->rx_frame_type, length);
#endif
		/* Remainder is for this specific unit or is the master copy for unit 0 */
		nicunit[unit]->rx_packets++;
		nicunit[unit]->rx_bytes += length;
		filter_input(unit, class, rxhdr, chain);
	}

	UNUSED(unused);
}

/*
 * Receive error counting
 */
void glue_inc_rxerrors(void)
{
	size_t i;

	/* Add this receive error to the corresponding
	 * unit's counts
	 */
	for (i = 0; i < units; i++)
	{
		nicunit[i]->rx_errors++;
	}
}

/*
 * Transmit packet list
 */
int glue_transmit(bool free, uint8_t unit, uint16_t frame,
                  struct mbuf *list, uint8_t *src, uint8_t *dst, struct ifnet *ifp)
{
	struct mbuf *chain, *mb, *hdr;
	int          error = -1;
	size_t       i;
	int          s;

	/* Build a common header for all packets in the chain */
	hdr = ALLOC_S(ETHER_HDR_LEN, NULL);
	if (hdr == NULL)
	{
		error = ENOBUFS;
		s = splnet();
		nicunit[unit]->tx_errors++;
		splx(s);
	}
	if (error < 0)
	{
		uint8_t *data;

		/* Copy in the header fields */
		data = mtod(hdr, uint8_t *);
		for (i = 0; i < ETHER_ADDR_LEN; i++)
		{
			data[0              + i] = dst[i];
			data[ETHER_ADDR_LEN + i] = src[i];
		}
		data[(2 * ETHER_ADDR_LEN) + 0] = (uint8_t)(frame >> 8);
		data[(2 * ETHER_ADDR_LEN) + 1] = (uint8_t)frame;

		/* Gate on whether the NIC works or not */
		if (nicunit[unit]->ctrl->faulty) error = ENETDOWN;
	}

	while (list != NULL)
	{
		chain = list;
		list = list->m_list;

		/* Send each chain in the list until first error */
		if (error < 0)
		{
			uint32_t length;

			/* Sum the chain */
			length = 0;
			for (mb = chain; mb != NULL; mb = mb->m_next)
			{
				length = length + mb->m_len;
			}
			if (length > nicunit[unit]->ctrl->mtu)
			{
				error = EMSGSIZE;
				s = splnet();
				nicunit[unit]->tx_errors++;
				splx(s);
			}
#if GLUE_DUMP_TX
			printf("Tx%c : ", '0' + unit);
			GLUE_DUMP_EUI48(dst);
			printf(": ");
			GLUE_DUMP_EUI48(src);
			printf(": type %04X, %d bytes", frame, length);
			if (length < (ETHER_MIN_LEN - ETHER_HDR_LEN))
			{
				printf(" + %d pad\n", ETHER_MIN_LEN - ETHER_HDR_LEN - length);
			}
			else
			{
				printf("\n");
			}
#endif
			if (error < 0)
			{
				/* The original NetBSD code only permitted one pending transmit
				 * packet at a time, dequeueing the next only when the first completed.
				 * In this driver the slack time while the chip is transmitting on the
				 * wire is used to stuff more data into the chip, so some record of
				 * packets posted but not yet sent must be retained in descriptors.
				 */
				i = 0;
				while (1)
				{
					/* Find a descriptor, or block here in SVC mode with interrupts
					 * enabled until one becomes free
					 */
					if (!desc[i].inuse) break;
					i++;
					if (i >= EA_TX_BUFFER_COUNT) i = 0;
				}
				hdr->m_type = i;
				desc[i].length = length;
				desc[i].unit = unit;
				desc[i].inuse = TRUE;
				ifp->if_snd = CAT(hdr, chain);
				ifp->if_start(ifp);

				/* Unlink the header for reuse down the list */
				hdr->m_next = NULL;
			}
		}

		/* Free (when our responsibility) even if error */
		if (free) m_freem(chain);
	}

	/* Done with the header too */
	m_free(hdr);

	return error;
}

/*
 * Post transmit statistics gathering
 */
void glue_transmitted(uint8_t which, bool success)
{
	if (which == EA_TX_BUFFER_COUNT)
	{
		int s;

		/* Special case marks all with the same success state */
		s = splnet();
		for (which = 0; which < EA_TX_BUFFER_COUNT; which++)
		{
			if (desc[which].inuse) glue_transmitted(which, success);
		}
		splx(s);

		return;
	}

	/* A packet completed, update statistics now it's definitely gone */
	if (success)
	{
		nicunit[desc[which].unit]->tx_packets++;
		nicunit[desc[which].unit]->tx_bytes += desc[which].length;
	}
	else
	{
		nicunit[desc[which].unit]->tx_errors++;
	}
	desc[which].inuse = FALSE;
}

/*
 * Dummy function (no logging)
 */
void logentry(log_severity_t severity, const char *fmt, ...)
{
	UNUSED(severity);
	UNUSED(fmt);
}

/*
 * Microsecond delay
 */
void delay(uint32_t delay)
{
	volatile uint8_t *rom = (volatile uint8_t *)nic[0].rombase;
	uint8_t  dummy;

	while (delay)
	{
		/* Using Podule_Speed_TypeC takes 5 x 16MHz ticks per
		 * access, or 312.5ns. So we can waste 1us by reading
		 * the EPROM four-ish times
		 */
		dummy = *rom;
		dummy = *rom;
		dummy = *rom;
		dummy = *rom;
		delay--;
	}
}
@


1.2
log
@Some tidy ups, and fix for mbuf loop on fragmented packet
ebmodule.c:
When killing the module, make sure the driver linked callback is removed.
Slight simplification of debug printf, and excess UNUSED().
glue.c:
On fast machines if you're unlucky while sending out a fragmented packet which has been provided as a list of mbufs length > 1, having sent the first chain in the list by using CAT() the chain is free'd but without cropping the hdr off which now points to a free'd mbuf. An incoming packet just at that moment would likely recycle the mbuf and the result is a circular linked list which MbufManager can't process. Unlink hdr before freeing to break the chain.
Non functional comment/variable declarations to make diffing with EtherY/EtherCPSW easier.
glue.h:
Remove unused structure member to save memory.


Version 4.31. Tagged as 'EtherB-4_31'
@
text
@a43 1
#include "ebmodule.h"
d48 1
d65 1
a65 1
	for (unit = 0; unit < nic.units; unit++)
d67 2
a68 2
		esummed = MAX(esummed, nic.interface[unit].errorlevel);
		asummed = MAX(asummed, nic.interface[unit].addresslevel);
d74 1
a74 1
	if (nic.units > 1) asummed = ADDRLVL_PROMISCUOUS;
d119 1
a119 1
	int8_t   unit;
d127 3
d131 1
a131 1
	if (nic.faulty)
d152 1
a152 1
			for (unit = 0; unit < nic.units; unit++)
d154 1
a154 1
				if (memcmp(hdr, nic.interface[unit].eui, ETHER_ADDR_LEN) == 0)
d168 1
a168 1
		for (unit = 0; unit < nic.units; unit++)
d171 1
a171 1
			nic.interface[unit].rx_errors++;
d193 1
a193 1
	for (unit = nic.units - 1; unit >= 0; unit--)
d198 1
a198 1
		if ((class != IS_MINE) && (unit > 0))
d207 1
a207 1
				nic.interface[unit].rx_errors++;
d211 2
a212 2
				nic.interface[unit].rx_packets++;
				nic.interface[unit].rx_bytes += length;
d225 2
a226 2
		nic.interface[unit].rx_packets++;
		nic.interface[unit].rx_bytes += length;
d238 1
a238 1
	uint8_t unit;
d240 2
a241 2
	/* A receive error means the header can't be looked at, so
	 * add it to all units' counts
d243 1
a243 1
	for (unit = 0; unit < nic.units; unit++)
d245 1
a245 1
		nic.interface[unit].rx_errors++;
d266 1
a266 1
		nic.interface[unit].tx_errors++;
d284 1
a284 1
		if (nic.faulty) error = ENETDOWN;
d303 1
a303 1
			if (length > nic.interface[unit].mtu)
d307 1
a307 1
				nic.interface[unit].tx_errors++;
d388 2
a389 2
		nic.interface[desc[which].unit].tx_packets++;
		nic.interface[desc[which].unit].tx_bytes += desc[which].length;
d393 1
a393 1
		nic.interface[desc[which].unit].tx_errors++;
d412 1
a412 1
	volatile uint8_t *rom = (volatile uint8_t *)nic.rombase;
@


1.1
log
@Initial revision
@
text
@d119 2
a120 1
	int8_t   unit, specific;
a125 1
	specific = 0;
d346 3
d362 3
d395 3
d404 3
@


1.1.1.1
log
@Import of EtherB driver for ANT NIC
This is a clean room reimplementation of the EtherB driver, as the sources are long since lost in the mists of time.
Based on the SEEQ8005 driver from NetBSD it has a few extra changes (demarked by 'RISCOS')
* Some power on self test (configured with *CONFIGURE ETHERB <option>)
* Support for a virtual interface, and seperate stats collection
* Allows up to 8 packets in flight so the dead time while waiting for the hardware to send one packet is used to copy in the next
Tested with a NIC fitted with a SEEQ80C04 and with SEEQ80C04A.
In theory a SEEQ8005 should work, but this has not been tested due to lack of available chips - they were discontinued in 1992, and all samples of ANT NICs seem to be 80C04 or 80C04A based.
@
text
@@
