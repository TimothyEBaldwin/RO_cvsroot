head	1.2;
access;
symbols
	EtherB-4_32:1.2
	EtherB-4_31:1.1.1.1
	EtherB-4_30:1.1.1.1
	rsprowson-4_30:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2017.06.02.07.46.19;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	fUQBHbVxcYRRSLTz;

1.1
date	2012.10.13.19.56.45;	author rsprowson;	state Exp;
branches
	1.1.1.1;
next	;
commitid	nzHmSfuNnQVzjgow;

1.1.1.1
date	2012.10.13.19.56.45;	author rsprowson;	state Exp;
branches;
next	;
commitid	nzHmSfuNnQVzjgow;


desc
@@


1.2
log
@Flip round the concept of NICs and interfaces
Having subsequently used this as the breeding stock for EtherY and EtherCPSW, it became clear that the hierarchy was the wrong way round for EtherB.
Meaning EtherB = 1 chip, 2 interfaces per chip (1 real, 1 virtual)
        EtherY = many chips, 1 interface per chip (no virtual support)
        EtherCPSW = many chips, 2 interfaces per chip (1 real, 1 virtual)
This change is a bulk search & replace job changing the referencing around so that DCI unit numbers (which map directly to interfaces) can get to the interface pertinent data via 1 pointer.

ebmodule.c: lots of pointer changes, split out the creation of a DCI unit into etherb_add_interface(), move the mbuf session flag out of the NIC structure
filtering.c: sync this with EtherY/EtherCPSW, removing one level of indirection
selftest.c/selftest.h/glue.c: lots of pointer changes
ebmodule.h: nest the 2 interfaces inside the NIC structure, as they are logically arranged this way
Messages: rephrase the slot location

Tested on a RiscPC, with and without virtual interface, and setting/clearing the other configuration options.

Version 4.32. Tagged as 'EtherB-4_32'
@
text
@/*
 * Copyright (c) 2012, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef SELFTEST_H
#define SELFTEST_H

#define TEST_OK       0
#define TEST_IRQS     1
#define TEST_MEMORY   2
#define TEST_CRCGEN   4
#define TEST_LOOPBACK 8
#define TEST_LIVEWIRE 16

#define TEST_ETHERII_SIZE    901    /* Bigger than a 256 byte page */
#define TEST_ETHERII_PATTERN 0x4F   /* Anything */
#define TEST_ETHERII_EXP1    0x88B5 /* IEEE ethexp1 */
#define TEST_ETHERII_EXP2    0x88B6 /* IEEE ethexp2 */

#define TEST_VERBOSE(k)      if (nicunit[unit]->ctrl->flags & NIC_FLAG_VERBOSE) printf k

/* Self test support */
bool selftest_execute(struct ifnet *, uint8_t, const char *, const char *, void *);

#endif
@


1.1
log
@Initial revision
@
text
@d43 1
a43 1
#define TEST_VERBOSE(k)      if (nic.flags & NIC_FLAG_VERBOSE) printf k
@


1.1.1.1
log
@Import of EtherB driver for ANT NIC
This is a clean room reimplementation of the EtherB driver, as the sources are long since lost in the mists of time.
Based on the SEEQ8005 driver from NetBSD it has a few extra changes (demarked by 'RISCOS')
* Some power on self test (configured with *CONFIGURE ETHERB <option>)
* Support for a virtual interface, and seperate stats collection
* Allows up to 8 packets in flight so the dead time while waiting for the hardware to send one packet is used to copy in the next
Tested with a NIC fitted with a SEEQ80C04 and with SEEQ80C04A.
In theory a SEEQ8005 should work, but this has not been tested due to lack of available chips - they were discontinued in 1992, and all samples of ANT NICs seem to be 80C04 or 80C04A based.
@
text
@@
