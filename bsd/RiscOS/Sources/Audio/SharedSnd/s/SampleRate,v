head	1.5;
access;
symbols
	SharedSnd-1_20:1.5
	SharedSnd-1_19:1.5
	SharedSnd-1_18:1.5
	SharedSnd-1_17:1.3
	SharedSnd-1_16:1.3
	SharedSnd-1_15:1.3
	SharedSnd-1_14:1.3
	SharedSnd-1_13:1.3
	SharedSnd-1_12:1.2
	SharedSnd-1_11:1.2
	SharedSnd-1_10:1.1
	SharedSnd-1_09:1.1
	SharedSnd-1_08:1.1
	SharedSnd-1_07:1.1
	ESP_SharedSnd-1_06_merge:1.1
	SharedSnd-1_06:1.1
	ESP_SharedSnd-1_06:1.1.0.2
	ESP_SharedSnd-1_06_bp:1.1
	SharedSnd-1_05:1.1
	SharedSnd-1_04:1.1
	SharedSnd-1_03:1.1
	SharedSnd-1_02:1.1
	SharedSnd-1_01:1.1
	SharedSnd-1_00:1.1;
locks; strict;
comment	@# @;


1.5
date	2016.06.18.16.39.01;	author jlee;	state Exp;
branches;
next	1.4;
commitid	ODW0ixlFy50c3Yaz;

1.4
date	2016.06.18.16.19.19;	author jlee;	state Exp;
branches;
next	1.3;
commitid	L0sIVnG3vL4sWXaz;

1.3
date	2013.09.04.07.14.42;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	2RDI391I6q1nE54x;

1.2
date	2012.05.13.12.13.48;	author bavison;	state Exp;
branches;
next	1.1;
commitid	ikRUfBzwYcXxHy4w;

1.1
date	2001.06.28.18.11.58;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Use Entry/EXIT, Push/Pull macros
Detail:
  s/* - Code updated to use Entry/EXIT and Push/Pull macros where possible instead of manual STM/LDM. Also add ROUTs for safety (although most routines use named local labels rather than numbered ones). A few obvious cases also fixed to reduce number of regs pushed onto stack.
  A few other changes and fixes of note:
  s/Log - Trim empty, unused installLogDriver routine when doLog is {FALSE}
  s/Module - Add a veneer to swiHandler to deal with 26bit and 26/32bit neutral cases; avoids the need for individual SWI handlers to preserve NZC
  s/SWIs:
  - Remove 26/32bit neutral SWI exit code, now handled by veneers. CLRV on most SWI exits to replace the implicit CLRV from CMP pc,pc.
  - swiHandlerVolume and swiDriverMixer were popping the wrong regs from the stack for most error cases; now fixed via the switch to Entry/EXIT
Admin:
  Tested on Raspberry Pi


Version 1.18. Tagged as 'SharedSnd-1_18'
@
text
@; Copyright (c) 1995, Expressive Software Projects
; All rights reserved.
; 
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met:
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of Expressive Software Projects nor the names of its
;       contributors may be used to endorse or promote products derived from
;       this software without specific prior written permission.
; 
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
; WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
; DISCLAIMED. IN NO EVENT SHALL EXPRESSIVE SOFTWARE PROJECTS BE LIABLE FOR ANY
; DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
; ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
; 
 ; ------------------------------- Sample rate routines ----------------------

newRate ROUT
        ; Used from handler routine to sort out details
        ;  r0 = New frequency
        Entry   "r0-r11,ws"

        ; Need new sample period in r1

        LDR     r6,rateConst
        MOV     r2,r0
        BL      clockCalc

        MOV     r1,r3   ; Return sample period in r1

 ;      LDR     r3,rateConst   \ r3.r2
 ;      MOV     r2,#0
 ;      MOV     r4,r0    \ DIV frequency
 ;
 ;      BL      div      \ r3 = Sample period
 ;
 ;      MOV     r1,r3

        BL      newSampleRateSet

        EXIT



 ; ------------------



newSampleRate   ROUT
        ; The sample rate has changed,  sort it out
        ; On entry r0 = 0 to read, >0 to set new rate = r0

        Entry   "r0-r11,ws"

        Debug   gn,"New sample rate"

        BL      sampleRate  ; Returns r0 = frequency, r1 = period

        LDR     r2,[ws,#work_SampleFrequency] ; Has the rate changed?
        CMP     r0,r2
        BEQ     newSampleRateExit  ; Nothing to do

        BL      stopSound        ; Stop play and wait for fill to finish

        STR     r0,[ws,#work_SampleFrequency]  ; Store frequency
        STR     r1,[ws,#work_SamplePeriod]     ; Store sample period

        ; then calculate the fractional step for each handler

        ADD     r1,ws,#work_handlerTable   ; Get handler table

        MOV     r6,#handlerMax              ; Count

newSampleRateLoop
        LDR     r0,[r1,#handler_Address]    ; Is there a handler here?
        CMP     r0,#0
        BEQ     newSampleRateNext

        LDR     r0,[r1,#handler_SampleFrequency]
        CMP     r0,#0
        BEQ     newSampleRateNext                    ; No rate stored

        BL      sampleRateFraction

        STR     r0,[r1,#handler_Fraction]

newSampleRateNext
        ADD     r1,r1,#handlerTableLen
        SUBS    r6,r6,#1
        BNE     newSampleRateLoop

        BL      startSound       ; Start sound again

newSampleRateExit
        EXIT

 ; ---------

newSampleRateSet ROUT
        Entry

        STR     r0,[ws,#work_SampleFrequency]  ; Store frequency
        STR     r1,[ws,#work_SamplePeriod]     ; Store sample period

        ; then calculate the fractional step for each handler
        ADD     r1,ws,#work_handlerTable   ; Get handler table

        MOV     r6,#handlerMax              ; Count

newSampleRateSetLoop
        LDR     r0,[r1,#handler_Address]    ; Is there a handler here?
        CMP     r0,#0
        BEQ     newSampleRateSetNext

        LDR     r0,[r1,#handler_SampleFrequency]
        CMP     r0,#0
        BEQ     newSampleRateSetNext                    ; No rate stored

        BL      sampleRateFraction

        STR     r0,[r1,#handler_Fraction]

newSampleRateSetNext
        ADD     r1,r1,#handlerTableLen
        SUBS    r6,r6,#1
        BNE     newSampleRateSetLoop

        EXIT

 ; ---------

sampleRate      ROUT
        ; Set or read sample rate

        ; On entry:
        ;  r0 = 0 to read
        ;     > 0 for sample frequency required
        ; On exit:
        ;  r0 = current frequency      (provided by driver)
        ;  r1 = current sample period  (calculated by shared sound)
        Entry   "r2-r11,ws"

        BL      driverSampleRate                ; Get current rate from driver
        CMP     r0,#0                            ; Failed if 0
        BEQ     sampleRateExit

        ; r0  will return sample frequency.....

        ; Now calculate sample period

;       LDR     r3,rateConst   \ r3.r2
;       MOV     r2,#0
;       MOV     r4,r0    \ DIV frequency
;
;       BL      div

        LDR     r6,rateConst
        MOV     r2,r0
        BL      clockCalc

        MOV     r1,r3   ; Return sample period in r1

sampleRateExit
        EXIT

 ;----------

sampleRateFraction
        ; Get the fractional step required for given rate and current rate
        ; On entry:
        ;   r0 = Frequency required
        ; On exit:
        ;   r0 = Fraction in 8.24
        Entry   "r1-r11,ws"

        LDR     r2,[ws,#work_SampleFrequency]    ; Current frequency
        MOV     r6,r0                              ; Frequency required

        BL      clockCalc       ; Returns fraction in r3

        MOV     r0,r3            ; Return in r0

        EXIT

 ; ------------------

rateConst
        DCD     &3D090000

clockCalc       ROUT
        ; Calculate  fraction count
        ; Pass rate in r6, actual rate in r2
        Entry

        MOV     r9,r2      ; Store actual rate
        MOV     r4,r2      ; actual rate ready for next calculation

        MOV     r2,#0      ; Calculate whole part
        MOV     r3,r6
        ; r4=actual rate
        BL      div
        MOV     r10,r3
                         ; Calculate fraction
                         ; r2 = Remainder from above
        MOV     r3,#0
        ; r4=actual rate
        MOV     r4,r9
        BL      div

        MOV     r3,r3,LSR #8 ; 24 Bit fraction
        ADD     r3,r3,r10,LSL #24 ; 8 Bit whole part

        EXIT

div     ROUT
        ; Divide r3.r2 by r4 , r3 = result, r2 = remainder
        MOV     r5,#32 ; Number of bits in divisor
dloop
        MOVS    r3,r3,LSL #1
        MOV     r2,r2,LSL #1
        ORRCS   r2,r2,#1
        CMPS    r2,r4
        BCC     dnext
        SBC     r2,r2,r4
        ADD     r3,r3,#1
dnext
        SUBS    r5,r5,#1
        BNE     dloop
        MOV     pc,lr

        END
@


1.4
log
@Expand tabs
Detail:
  s/* - Expand all tabs, to avoid space/tab use inconsistencies within some files and to match general ROOL code formatting
Admin:
  Binary unchanged


Version 1.17. Not tagged
@
text
@d28 1
a28 1
newRate
d31 1
a31 1
        STMDB   sp!,{r0-r11,ws,lr}
d51 1
a51 1
        LDMIA   sp!,{r0-r11,ws,pc}
d59 1
a59 1
newSampleRate
d63 1
a63 1
        STMDB   sp!,{r0-r11,ws,lr}
d105 1
a105 1
        LDMIA   sp!,{r0-r11,ws,pc}
d109 2
a110 2
newSampleRateSet
        Push    "lr"
d138 1
a138 1
        Pull    "pc"
d142 1
a142 1
sampleRate
d151 1
a151 1
        STMDB   sp!,{r2-r11,ws,lr}
d174 1
a174 1
        LDMIA   sp!,{r2-r11,ws,pc}
d184 1
a184 1
        STMDB   sp!,{r1-r11,ws,lr}
d193 1
a193 1
        LDMIA   sp!,{r1-r11,ws,pc}
d200 1
a200 1
clockCalc
d203 1
a203 1
        Push    "lr"
d223 3
a225 2
        Pull    "pc"
div
@


1.3
log
@Changed to use NdrDebug instead of local debug functions
Changed GET of filenames to use <name>.<extension> form.
Built, but not tested.

Version 1.13. Tagged as 'SharedSnd-1_13'
@
text
@d29 3
a31 3
	; Used from handler routine to sort out details
	;  r0 = New frequency
	STMDB	sp!,{r0-r11,ws,lr}
d33 1
a33 1
	; Need new sample period in r1
d35 3
a37 3
	LDR	r6,rateConst
	MOV	r2,r0
	BL	clockCalc
d39 1
a39 1
	MOV	r1,r3   ; Return sample period in r1
d41 3
a43 3
 ;	LDR	r3,rateConst   \ r3.r2
 ;	MOV	r2,#0
 ;	MOV	r4,r0    \ DIV frequency
d45 1
a45 1
 ;	BL	div      \ r3 = Sample period
d47 1
a47 1
 ;	MOV	r1,r3
d49 1
a49 1
	BL	newSampleRateSet
d51 1
a51 1
	LDMIA	sp!,{r0-r11,ws,pc}
d60 2
a61 2
	; The sample rate has changed,  sort it out
	; On entry r0 = 0 to read, >0 to set new rate = r0
d63 1
a63 1
	STMDB	sp!,{r0-r11,ws,lr}
d67 1
a67 1
	BL	sampleRate  ; Returns r0 = frequency, r1 = period
d69 3
a71 3
	LDR	r2,[ws,#work_SampleFrequency] ; Has the rate changed?
	CMP	r0,r2
	BEQ	newSampleRateExit  ; Nothing to do
d73 1
a73 1
	BL	stopSound        ; Stop play and wait for fill to finish
d75 2
a76 2
	STR	r0,[ws,#work_SampleFrequency]  ; Store frequency
	STR	r1,[ws,#work_SamplePeriod]     ; Store sample period
d78 1
a78 1
	; then calculate the fractional step for each handler
d80 1
a80 1
	ADD	r1,ws,#work_handlerTable   ; Get handler table
d82 1
a82 1
	MOV	r6,#handlerMax              ; Count
d85 3
a87 3
	LDR	r0,[r1,#handler_Address]    ; Is there a handler here?
	CMP	r0,#0
	BEQ	newSampleRateNext
d89 3
a91 3
	LDR	r0,[r1,#handler_SampleFrequency]
	CMP	r0,#0
	BEQ	newSampleRateNext                    ; No rate stored
d93 1
a93 1
	BL	sampleRateFraction
d95 1
a95 1
	STR	r0,[r1,#handler_Fraction]
d98 3
a100 3
	ADD	r1,r1,#handlerTableLen
	SUBS	r6,r6,#1
	BNE	newSampleRateLoop
d102 1
a102 1
	BL	startSound       ; Start sound again
d105 1
a105 1
	LDMIA	sp!,{r0-r11,ws,pc}
d112 2
a113 2
	STR	r0,[ws,#work_SampleFrequency]  ; Store frequency
	STR	r1,[ws,#work_SamplePeriod]     ; Store sample period
d115 2
a116 2
	; then calculate the fractional step for each handler
	ADD	r1,ws,#work_handlerTable   ; Get handler table
d118 1
a118 1
	MOV	r6,#handlerMax              ; Count
d121 3
a123 3
	LDR	r0,[r1,#handler_Address]    ; Is there a handler here?
	CMP	r0,#0
	BEQ	newSampleRateSetNext
d125 3
a127 3
	LDR	r0,[r1,#handler_SampleFrequency]
	CMP	r0,#0
	BEQ	newSampleRateSetNext                    ; No rate stored
d129 1
a129 1
	BL	sampleRateFraction
d131 1
a131 1
	STR	r0,[r1,#handler_Fraction]
d134 3
a136 3
	ADD	r1,r1,#handlerTableLen
	SUBS	r6,r6,#1
	BNE	newSampleRateSetLoop
d143 1
a143 1
	; Set or read sample rate
d145 19
a163 19
	; On entry:
	;  r0 = 0 to read
	;     > 0 for sample frequency required
	; On exit:
	;  r0 = current frequency      (provided by driver)
	;  r1 = current sample period  (calculated by shared sound)
	STMDB	sp!,{r2-r11,ws,lr}

	BL	driverSampleRate                ; Get current rate from driver
	CMP	r0,#0                            ; Failed if 0
	BEQ	sampleRateExit

	; r0  will return sample frequency.....

	; Now calculate sample period

;	LDR	r3,rateConst   \ r3.r2
;	MOV	r2,#0
;	MOV	r4,r0    \ DIV frequency
d165 1
a165 1
;	BL	div
d167 3
a169 3
	LDR	r6,rateConst
	MOV	r2,r0
	BL	clockCalc
d171 1
a171 1
	MOV	r1,r3   ; Return sample period in r1
d174 1
a174 1
	LDMIA	sp!,{r2-r11,ws,pc}
d179 6
a184 6
	; Get the fractional step required for given rate and current rate
	; On entry:
	;   r0 = Frequency required
	; On exit:
	;   r0 = Fraction in 8.24
	STMDB	sp!,{r1-r11,ws,lr}
d186 2
a187 2
	LDR	r2,[ws,#work_SampleFrequency]    ; Current frequency
	MOV	r6,r0                              ; Frequency required
d189 1
a189 1
	BL	clockCalc       ; Returns fraction in r3
d191 1
a191 1
	MOV	r0,r3            ; Return in r0
d193 1
a193 1
	LDMIA	sp!,{r1-r11,ws,pc}
d198 1
a198 1
	DCD	&3D090000
d201 18
a218 18
	; Calculate  fraction count
	; Pass rate in r6, actual rate in r2
	Push    "lr"

	MOV	r9,r2      ; Store actual rate
	MOV	r4,r2      ; actual rate ready for next calculation

	MOV	r2,#0      ; Calculate whole part
	MOV	r3,r6
	; r4=actual rate
	BL	div
	MOV	r10,r3
	                 ; Calculate fraction
        	         ; r2 = Remainder from above
	MOV	r3,#0
	; r4=actual rate
	MOV	r4,r9
	BL	div
d220 2
a221 2
	MOV	r3,r3,LSR #8 ; 24 Bit fraction
	ADD	r3,r3,r10,LSL #24 ; 8 Bit whole part
d225 2
a226 2
	; Divide r3.r2 by r4 , r3 = result, r2 = remainder
	MOV	r5,#32 ; Number of bits in divisor
d228 7
a234 7
	MOVS	r3,r3,LSL #1
	MOV	r2,r2,LSL #1
	ORRCS	r2,r2,#1
	CMPS	r2,r4
	BCC	dnext
	SBC	r2,r2,r4
	ADD	r3,r3,#1
d236 3
a238 3
	SUBS	r5,r5,#1
	BNE	dloop
	MOV	pc,lr
d240 1
a240 1
	END
@


1.2
log
@  No longer uses non-X SWIs in module code
Detail:
  A few of these were careless typos, others were already X SWIs but the
  symbol names didn't reflect the fact, and in other cases there was no code
  path to deal with error cases. All now fixed. Also fixed all the assembly
  time warnings (at least for 32-bit ROM builds).
Admin:
  No longer prevents the Raspberry Pi ROM init from completing.

Version 1.11. Tagged as 'SharedSnd-1_11'
@
text
@d65 1
a65 6
 [ debug
	SWI	XOS_WriteS
	= "New sample rate",0
	ALIGN
	SWI XOS_NewLine
 ]
@


1.1
log
@  Import of version 1.00 of SharedSound from WSS - this is a merge of
  RISC OS Ltd, ESP and Pace sources. I've added the Makefile, Mk* and
  VersionNum files.

Detail (courtesy of WSS):
  * Incorporates fixes made to 0.58c to fix the callbacks on sound
    rate changes.

  * Incorporates RISC OS Ltd changes to response to
    TaskManager_Acknowledgements service.

  * Includes 8 bit Log and PowerWave drivers.

  * Now built with Objasm, not BASIC assembler.

  * SharedSound_HandlerInfo SWI fixed to conform to spec. Also
    extended to accept r0 = 0 on entry, in which case r0 = number of
    first registered handler (or 0 for none) on exit; R1-R5 corrupted.

    Therefore the following code enumerates handlers:

    REM Get first handler number.
    SYS "SharedSound_HandlerInfo",0 TO next% ; flags%
    REM While no errors, and not finished
    WHILE (next% <> 0) AND ((flags% AND 1) = 0)
     SYS"SharedSound_HandlerInfo",next% TO next%,a%,b%,c%,d%,e%
    ENDWHILE

  * Sends Service_Sound (&54) with reason code 6 (SharedSound Starting)
    on (callback after) initialisation.

  * Sends Service_Sound (&54) with reason code 7 (SharedSound Dying)
    on finalisation.

  * Some small optimisations

  * Version bumped to 1.00 (to allow RISC OS Ltd space to make changes
    to their versions).

  * Table of helpful fill code routines now passed to handlers in R8.

  * SharedSound reinitialises correctly on lower layers reinitialising.

  * More care taken to remove outstanding callbacks on finalise.

  * Dual 26/32 bit version.

Admin:
  * Not tested by us.

  * 8-bit sound system code is known not to be ROM safe. However, it is
    currently switched out (see the doLog option in s.Gets).

  * This version *will not work* on a 32-bit system. There are at least two
    issues with it that I've spotted with a quick glance through the code -
    the lack of the module flags word, and an unconditional TEQP instruction.
    This version has been checked in nevertheless as a record of what WSS
    delivered to us.

Version 1.00. Tagged as 'SharedSnd-1_00'
@
text
@d115 1
a115 1
	STMDB	sp!,{lr}
d143 1
a143 1
	LDMIA	sp!,{pc}
d208 1
a208 1
	STMDB	sp!,{lr}
d228 1
a228 1
	LDMIA	sp!,{pc}
@

