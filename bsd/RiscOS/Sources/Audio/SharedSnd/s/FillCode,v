head	1.7;
access;
symbols
	SharedSnd-1_20:1.7
	SharedSnd-1_19:1.6
	SharedSnd-1_18:1.6
	SharedSnd-1_17:1.4
	SharedSnd-1_16:1.4
	SharedSnd-1_15:1.4
	SharedSnd-1_14:1.4
	SharedSnd-1_13:1.4
	SharedSnd-1_12:1.4
	SharedSnd-1_11:1.4
	SharedSnd-1_10:1.4
	SharedSnd-1_09:1.4
	SharedSnd-1_08:1.4
	SharedSnd-1_07:1.4
	ESP_SharedSnd-1_06_merge:1.3
	SharedSnd-1_06:1.3
	ESP_SharedSnd-1_06:1.3.0.2
	ESP_SharedSnd-1_06_bp:1.3
	SharedSnd-1_05:1.3
	SharedSnd-1_04:1.2
	SharedSnd-1_03:1.1
	SharedSnd-1_02:1.1
	SharedSnd-1_01:1.1
	SharedSnd-1_00:1.1;
locks; strict;
comment	@# @;


1.7
date	2016.06.18.16.52.49;	author jlee;	state Exp;
branches;
next	1.6;
commitid	UtNAyjiaNTWV7Yaz;

1.6
date	2016.06.18.16.39.01;	author jlee;	state Exp;
branches;
next	1.5;
commitid	ODW0ixlFy50c3Yaz;

1.5
date	2016.06.18.16.19.19;	author jlee;	state Exp;
branches;
next	1.4;
commitid	L0sIVnG3vL4sWXaz;

1.4
date	2011.12.06.00.13.40;	author jlee;	state Exp;
branches;
next	1.3;
commitid	JycXv4ushgqpP3Kv;

1.3
date	2004.06.16.14.38.42;	author srevill;	state Exp;
branches;
next	1.2;

1.2
date	2003.03.31.09.00.10;	author rsprowson;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.28.18.11.57;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.7
log
@ARMv5E, ARMv6 optimisations
Detail:
  s/FillCode - Buffer fill & mix fragments optimised to use SMULWB/T, PKH, QADD16 and QDADD where possible, resulting in new variants optimised for ARMv5E and ARMv6
  s/Handler - Remove old, unoptimised callback buffer mixing code. Add new optimisated code for ARMv6 (SHADD16)
Admin:
  Tested on Raspberry Pi, Iyonix


Version 1.20. Tagged as 'SharedSnd-1_20'
@
text
@; Copyright (c) 1995, Expressive Software Projects
; All rights reserved.
; 
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met:
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of Expressive Software Projects nor the names of its
;       contributors may be used to endorse or promote products derived from
;       this software without specific prior written permission.
; 
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
; WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
; DISCLAIMED. IN NO EVENT SHALL EXPRESSIVE SOFTWARE PROJECTS BE LIABLE FOR ANY
; DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
; ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
; 
; SharedSound provided fill code.
;

; FIXME: Note we're assuming that the buffer is aligned which isn't
;        guarenteed by the interface description below - either this
;        routine, or the interface description should be updated
fill_silence
        TST     r3,#1           ; If we are being asked to mix, then nothing to do.
        MOVNE   r1,r2           ; Pretend we filled!
        MOVNE   r0, r3          ; return the flags too!
        MOVNE   PC,R14
        CMP     R1,R2           ; check whether already complete
        MOVHS   r0, r3          ; if already complete, return flags properly
        MOVHS   PC,R14          ; Already full!
        MOV     R0,#0


   [ {FALSE}
; Old routine to fill the silence
fs_lp
        STR     R0,[R1],#4
        CMP     R1,R2
        BMI     fs_lp

   |

; slightly twiddled about version to unroll the loop a little
; => r0 = 0
;    r1-> start of buffer to fill
;    r2-> end of buffer to fill (exclusive)
; Possibly consider using more registers and STMIA although we would have
; to stack more registers
fs_lp_large
        ADD     r1,r1,#32
        CMP     r1,r2
        BHI     fs_lp_small_start
        STR     r0,[r1,#-32]
        STR     r0,[r1,#-28]
        STR     r0,[r1,#-24]
        STR     r0,[r1,#-20]
        STR     r0,[r1,#-16]
        STR     r0,[r1,#-12]
        STR     r0,[r1,#-8]
        STR     r0,[r1,#-4]
        B       fs_lp_large
; finish off any remaining bits
fs_lp_small_start
        SUB     r1,r1,#32
fs_lp_small
        CMP     R1,R2
        STRLO   R0,[R1],#4
        BLO     fs_lp_small
   ]

        ORR     R0,R3,#1        ; R0 = flags + MIX set
        MOV     PC,R14

        ; On Entry:
        ;  r1 = Pointer to buffer to fill
        ;  r2 = Pointer to byte after end of buffer to fill
        ;  r3 = flags
        ;        bit     0 = Mix
        ;       [bit     1 = Quality                                            ] Unimplemented
        ;       [bits  3-7 = Overrun count (0 = None, 1-30 = 1-30, 31 = > 30)   ] but reserved
        ;       [bit    29 = Reversed stereo                                    ] for future.
        ;        bit    30 = Use volume in R7
        ;        bit    31 = Mute if set
        ;  R4 = Pointer to base of buffer to fill from
        ;  R5 = Pointer to byte after end of buffer to fill from
        ;  R6 = fractional step as specified by SharedSound_SampleRate
        ;  R7 = LR volume (if bit 30 of R2 is set).
        ;  R9 = Fractional Accumulator
        ; [R10= Left VU value ] Possible future extensions
        ; [R11= Right VU value]
        ; On Exit:
        ;  R0 = new flags value (to be returned to return for it to return to SharedSound)
        ;  R1 = pointer to next byte to be filled
        ;  R4 = pointer to next byte in the buffer
        ;  R9 = New fractional Accumulator
        ;  R2,R3,R5,R6,R7,R8,R12 preserved

        ; Now follow many variants of fillcode.
        ; Key:  F = Fill, M = Mix.
        ;       L = Low quality (no interpolation), H (*) = high quality (interpolated)
        ;       mute = muted (increments fill buffer).
        ;       V = volume scales (otherwise assumes max volume)
        ;       R (*) = reversed
        ; (* = Not yet implemented as the bits can never be set by SharedSound)
fill_data
        Entry   "R5"
        ; How many stereo samples (4 bytes) will this fill routine use?
        ; We are never going to be asked to fill more than 256K.
        SUBS    R2,R2,R1                ; R2 = number of output bytes required.
        BMI     fill_return             ; We have already filled it!
        MOV     R2,R2,LSR#2             ; R2 = number of words.

        ; For R6 = AAAAaaaa, R2 = 0000bbbb, find R6*R2+R9
        MOV     R0,R6,LSR#16            ; R0 = AAAA
        BIC     R14,R6,R0,LSL#16        ; R14= aaaa
        MLA     R14,R2,R14,R9           ; R14= aaaa*bbbb+R9
        MUL     R0,R2,R0                ; R0 = AAAA*bbbb
        ADDS    R14,R14,R0,LSL#16       ; Add in to form lower word
        MOV     R0,R0,LSR#16            ; Throw away bottom 16 bits of top word
        ADC     R0,R0,#0                ; Allow for carry

        MOV     R14,R14,LSR#24          ; Throw away fractions
        ORR     R14,R14,R0,LSL#8        ; R14= Number of samples consumed.

        ADD     R2,R1,R2,LSL#2          ; Reconstitute R2 = End of buffer to fill.

        SUBS    R0,R5,R4                ; R0 = Number of bytes of data available.
        BMI     fill_return             ; No data! just return

        ;  r1 = Pointer to buffer to fill
        ;  r2 = Pointer to byte after end of buffer to fill
        ;  r3 = flags
        ;        bit     0 = Mix
        ;       [bit     1 = Quality                                            ] Unimplemented
        ;       [bits  3-7 = Overrun count (0 = None, 1-30 = 1-30, 31 = > 30)   ] but reserved
        ;       [bit    29 = Reversed stereo                                    ] for future.
        ;        bit    30 = Use volume in R7
        ;        bit    31 = Mute if set
        ;  R4 = Pointer to base of buffer to fill from
        ;  R5 = Pointer to byte after end of buffer to fill from
        ;  R6 = fractional step as specified by SharedSound_SampleRate
        ;  R7 = LR volume (if bit 30 of R2 is set).
        ;  R9 = Fractional Accumulator
        ;  R10= Left VU value
        ;  R11= Right VU value
        ; On Exit:
        ;  R0 = new flags value (to be returned to return for it to return to SharedSound)
        ;  R1 = pointer to next byte to be filled
        ;  R4 = pointer to next byte in the buffer
        ;  R9 = New fractional Accumulator
        ;  R2,R3,R5,R6,R7,R8,R12 preserved
        CMP     R14,R0,ASR#2            ; If R14 > R0 then we need more than we have.
        AND     R0,R3,#&C0000001
        ORRHI   R0,R0,#1<<29            ; Use the data limited cases
        ADD     PC,PC,R0,ROR#27
        DCD     0
fill_code_table
        B       ssh_FL          ; 0 = Max Vol,   No Mute, Fill
        B       sshD_FL         ; 1 = Max Vol,   No Mute, Fill, Data limited
        B       ssh_VFL         ; 2 = Vol Scale, No Mute, Fill
        B       sshD_VFL        ; 3 = Vol Scale, No Mute, Fill, Data limited
        B       ssh_Fmute       ; 4 = Max Vol,   Mute,    Fill
        B       ssh_Fmute       ; 5 = Max Vol,   Mute,    Fill, Data limited
        B       ssh_Fmute       ; 6 = Vol Scale, Mute,    Fill
        B       ssh_Fmute       ; 7 = Vol Scale, Mute,    Fill, Data limited
        B       ssh_ML          ; 8 = Max Vol,   No Mute, Mix
        B       sshD_ML         ; 9 = Max Vol,   No Mute, Mix,  Data limited
        B       ssh_VML         ; 10= Vol Scale, No Mute, Mix
        B       sshD_VML        ; 11= Vol Scale, No Mute, Mix,  Data limited
        B       ssh_Mmute       ; 12= Max Vol,   Mute,    Mix
        B       ssh_Mmute       ; 13= Max Vol,   Mute,    Mix,  Data limited
        B       ssh_Mmute       ; 14= Vol Scale, Mute,    Mix
        B       ssh_Mmute       ; 15= Vol Scale, Mute,    Mix,  Data limited

fill_return
        ORR     r0,r3,#1        ; r0 = flags on entry + MIX.
        EXIT

; --------------------------------------------------------------------------------
; OK. Of the 32 cases above, half are muted, so resolve to just one case, leaving 16 others.
; We are going to ignore the reversed cases so that leaves just 8 cases.
; We are also going to ignore oversampling, hence 4 cases. But we are still WAY too lazy to
; write (or too sensible to try to maintain) 4 sets of code. So we do it by smoke, mirrors
; and macros. We have a magic FillCode macro that generates all the different cases we need,
; by invoking submacros for the actual filling/mixing/scaling etc.
;
; The next bit is the definition of the two toplevel magic macros.
; During the following routine we tend to use:
; r1 = buffer pointer
; r2 = buffer end
; r3 = flags
; r4 = base of buffer fill ptr
; r5 = top of buffer fill ptr (stop when r5 == r4)
; r6 = fractional step
; r7 = volume
; r9 = accumulator
; r14= scratch

; This macro is called when we fill up to the end of the buffer (i.e. R1 >= R2)
        MACRO
        FillCode        $name
ssh_$name
        MakeSpace$name

ssh_lp0_$name
        RealFillCode$name

        CMP     R1,R2
        BMI     ssh_lp0_$name

        UnMakeSpace$name

        ORR     r0,r3,#1        ; r0 = flags on entry + MIX.
        EXIT

        MEND

; This macro is called when we fill up to the end of the data (i.e. R4 >= R5)
        MACRO
        FillCodeD       $name
sshD_$name
        MakeSpace$name

sshD_lp0_$name
        RealFillCode$name

        CMP     R4,R5
        BMI     sshD_lp0_$name

        UnMakeSpace$name

        ORR     r0,r3,#1        ; r0 = flags on entry + MIX.
        EXIT

        MEND

;--------------------------------------------------------------------------------
; And here we define the submacros for each of the different fill routines.
; The RealFillCodeXX macro that actually does the filling. This can use R0, R10, R11, R14
; as scratch, together with R2 and R12 if it is prepared to save them.
; If it uses these temporary registers, then the other two macros MakeSpaceXX and
; UnMakeSpaceXX must save and reload the ones it uses.
;
; MakeSpaceXX can also setup and constants needed by the fillcode.
;
; FL = Fill, Low Quality.

        MACRO
        RealFillCodeFL

        ADD     r9,r9,r6                ; accum += frac
        AND     r14,r9,#&FF000000       ; r14 = integer inc
        LDR    R0,[R4],r14,LSR#22
        BIC     r9,r9,#&FF000000        ; keep just the fractional bit
        STR    R0,[R1],#4

        MEND

        MACRO
        MakeSpaceFL
        MEND
        MACRO
        UnMakeSpaceFL
        MEND

; VFL = Volume Scale,Fill, Low Quality.

        MACRO
        MakeSpaceVFL

        MOV     r10,R7,LSR#16           ; r10 = Left Vol
        BIC     r11,r7,r10,LSL#16       ; r11 = Right Vol

        MEND

        MACRO
        RealFillCodeVFL

        ADD     r9,r9,r6                ; accum += frac
        AND     r14,r9,#&FF000000       ; r14 = integer inc
        LDR     R0,[R4],r14,LSR#22
        BIC     r9,r9,#&FF000000        ; keep just the fractional bit
    [ NoARME
        MOV     R14,R0,ASR#16
        MUL     R14,R10,R14             ; R14= LLLLxxxx = Scaled L volume
        MOV     R0,R0,LSL#16
        MOV     R0,R0,ASR#16
        MUL     R0,R11,R0               ; T3 = RRRRxxxx = Scaled R volume
        MOV     R14,R14,LSR#16
        MOV     R0,R0,LSR#16
        ORR     R0,R0,R14,LSL#16
    |
        SMULWT  R14,R10,R0              ; R14 = ssssLLLL (signed)
        SMULWB  R0,R11,R0               ; R0 = ssssRRRR
      [ NoARMv6
        MOV     R14,R14,LSL #16
        MOV     R0,R0,LSL #16
        ORR     R0,R14,R0,LSR #16
      |
        PKHBT   R0,R0,R14,LSL #16       ; R0 = LLLLRRRR
      ]
    ]
        STR     R0,[R1],#4

        MEND

        MACRO
        UnMakeSpaceVFL

        MEND

; ML = Mix, Low Quality

        MACRO
        MakeSpaceML
      [ NoARMv6
        MOV     R10,#1<<31
      ]
        MEND

        MACRO
        RealFillCodeML

        ADD     R9,R9,R6                ; accum += frac
        AND     R14,R9,#&FF000000       ; r14= integer inc
        LDR     R0,[R4],r14,LSR#22      ; R0 = AAAABBBB = Our samples
        LDR     R14,[R1]                ; R14= CCCCDDDD = Current samples
        BIC     R9,R9,#&FF000000        ; keep just the fractional bit
      [ NoARMv6
        MOV     R0,R0,ROR#16            ; R0 = BBBBAAAA
        ADDS    R11,R14,R0,LSL#16      ; T2 = eeeexxxx (where eeee = AAAA+CCCC)
        SBCVS   R11,R10,#0              ; T2 = EEEExxxx (where EEEE = Clip[AAAA+CCCC])
        ADDS    R0,R0,R14,LSL#16        ; R0 = DDDD0000+BBBB000
        SBCVS   R0,R10,#0               ; R0 = FFFF0000 (where FFFF = Clip[DDDD+CCCC])
        AND     R11,R11,R10,ASR#15      ; T2 = EEEE0000
        ORR     R0,R11,R0,LSR#16        ; R0 = EEEEFFFF
      |
        QADD16  R0,R0,R14               ; Signed saturating halfword addition
      ]
        STR     R0,[R1],#4

        MEND

        MACRO
        UnMakeSpaceML
        MEND

; VML = Volume Scale, Mix, Low Quality
; r1 = buffer pointer
; r2 = buffer end
; r3 = flags
; r4 = base of buffer fill ptr
; r5 = top of buffer fill ptr (stop when r5 == r4)
; r6 = fractional step
; r7 = volume
; r9 = accumulator
; r14= scratch
;

        MACRO
        MakeSpaceVML
    [ NoARME
        MOV     r10,R7,LSR#16           ; r10 = Left Vol
        BIC     r11,r7,r10,LSL#16       ; r11 = Right Vol
        Push    "R7,R12"
        MOV     R12,#1<<31
    |
      [ NoARMv6
        Push    "R7,R12"
        LDR     r12,=&ffff<<15
        AND     r10,r12,r7,LSR #1       ; r10 = Left Vol
        AND     r11,r12,r7,LSL #15      ; r11 = Right Vol
      |
        MOV     r10,R7,LSR#16           ; r10 = Left Vol
        BIC     r11,r7,r10,LSL#16       ; r11 = Right Vol
        Push    "R12"
      ]
    ]
        MEND

        MACRO
        RealFillCodeVML

        ADD     R9,R9,R6                ; accum += frac
        AND     R14,R9,#&FF000000       ; r14= integer inc
        LDR     R0,[R4],r14,LSR#22      ; R0 = AAAABBBB = Our samples
        BIC     R9,R9,#&FF000000        ; keep just the fractional bit
    [ NoARME
        MOV     r14,R0,ASR#16
        MUL     R7,R10,R14              ; R7 = AAAAxxxx
        LDR     R14,[R1]                ; R14= CCCCDDDD = Current samples
        MOV     R0,R0,LSL#16
        MOV     R0,R0,ASR#16
        MUL     R0,R11,R0               ; R0 = BBBBxxxx
        ADDS    R7,R14,R7               ; R7 = eeeexxxx (where eeee = AAAA+CCCC)
        SBCVS   R7,R12,#0               ; R7 = EEEExxxx (where EEEE = Clip[AAAA+CCCC])
        ADDS    R0,R0,R14,LSL#16        ; R0 = DDDD0000+BBBB000
        SBCVS   R0,R12,#0               ; R0 = FFFF0000 (where FFFF = Clip[DDDD+BBBB])
        AND     R7,R7,R12,ASR#15        ; R7 = EEEE0000
        ORR     R0,R7,R0,LSR#16         ; R0 = EEEEFFFF
    |
      [ NoARMv6
        SMULWT  R14,R10,R0              ; R14= AAAAxxxx >> 1
        LDR     R7,[R1]                 ; R7 = CCCCDDDD = Current samples
        SMULWB  R0,R11,R0               ; R0 = BBBBxxxx >> 1
        BIC     R14,R14,R12,LSR #16     ; R14= AAAA0000 >> 1 (must mask off to avoid potential overflow from interaction with low bits of R7)
        QDADD   R14,R7,R14              ; R14= EEEExxxx (where EEEE = Clip[AAAA+CCCC])
        MOV     R7,R7,LSL #16
        QDADD   R0,R7,R0                ; R0 = FFFFxxxx (where FFFF = Clip[DDDD+BBBB])
        AND     R14,R14,R12,LSL #1      ; R14= EEEE0000
        ORR     R0,R14,R0,LSR #16       ; R0 = EEEEFFFF
      |
        SMULWT  R14,R10,R0              ; R14= ssssAAAA
        LDR     R7,[R1]                 ; R7 = CCCCDDDD = Current samples
        SMULWB  R0,R11,R0               ; R0 = ssssBBBB
        PKHBT   R0,R0,R14,LSL #16       ; R0 = AAAABBBB
        QADD16  R0,R0,R7                ; R0 = EEEEFFFF
      ]
    ]
        STR     R0,[R1],#4

        MEND
        MACRO
        UnMakeSpaceVML
      [ NoARMv6
        Pull    "R7,R12"
      |
        Pull    "R12"
      ]
        MEND

; Fmute = zero fill

        MACRO
        MakeSpaceFmute
        MOV     R0,#0
        MEND
        MACRO
        RealFillCodeFmute

        ADD     R9,R9,R6                ; accum += frac
        STR     R0,[R1],#4

        MEND
        MACRO
        UnMakeSpaceFmute

        BIC     R9,R9,#&FF000000        ; keep just the fractional bit

        MEND

; Mmute = zero fill

        MACRO
        MakeSpaceMmute
        MEND
        MACRO
        RealFillCodeMmute

        ADD     R9,R9,R6                ; accum += frac
        ADD     R1,R1,#4

        MEND
        MACRO
        UnMakeSpaceMmute

        BIC     R9,R9,#&FF000000        ; keep just the fractional bit

        MEND

;--------------------------------------------------------------------------------
; And finally we invoke the macro to generate code as required.

        FillCode        FL
        FillCodeD       FL
        FillCode        ML
        FillCodeD       ML
        FillCode        VFL
        FillCodeD       VFL
        FillCode        VML
        FillCodeD       VML
        FillCode        Fmute
        FillCode        Mmute

        END
@


1.6
log
@Use Entry/EXIT, Push/Pull macros
Detail:
  s/* - Code updated to use Entry/EXIT and Push/Pull macros where possible instead of manual STM/LDM. Also add ROUTs for safety (although most routines use named local labels rather than numbered ones). A few obvious cases also fixed to reduce number of regs pushed onto stack.
  A few other changes and fixes of note:
  s/Log - Trim empty, unused installLogDriver routine when doLog is {FALSE}
  s/Module - Add a veneer to swiHandler to deal with 26bit and 26/32bit neutral cases; avoids the need for individual SWI handlers to preserve NZC
  s/SWIs:
  - Remove 26/32bit neutral SWI exit code, now handled by veneers. CLRV on most SWI exits to replace the implicit CLRV from CMP pc,pc.
  - swiHandlerVolume and swiDriverMixer were popping the wrong regs from the stack for most error cases; now fixed via the switch to Entry/EXIT
Admin:
  Tested on Raspberry Pi


Version 1.18. Tagged as 'SharedSnd-1_18'
@
text
@d292 1
d301 11
d325 1
d327 1
d338 1
d346 3
d371 3
d375 13
a387 3
        MOV     R10,#1<<31
        MOV     R11,r7,LSR#16                   ; R11= Left vol
        BIC     R7,r7,R11,LSL#16                ; R7 = Right vol
d397 1
d399 1
a399 1
        MUL     R12,R11,R14             ; R12= AAAAxxxx
d403 3
a405 3
        MUL     R0,R7,R0                ; R0 = BBBBxxxx
        ADDS    R12,R14,R12             ; T2 = eeeexxxx (where eeee = AAAA+CCCC)
        SBCVS   R12,R10,#0              ; T2 = EEEExxxx (where EEEE = Clip[AAAA+CCCC])
d407 22
a428 3
        SBCVS   R0,R10,#0               ; R0 = FFFF0000 (where FFFF = Clip[DDDD+CCCC])
        AND     R12,R12,R10,ASR#15      ; T2 = EEEE0000
        ORR     R0,R12,R0,LSR#16        ; R0 = EEEEFFFF
d434 1
d436 3
@


1.5
log
@Expand tabs
Detail:
  s/* - Expand all tabs, to avoid space/tab use inconsistencies within some files and to match general ROOL code formatting
Admin:
  Binary unchanged


Version 1.17. Not tagged
@
text
@d82 1
a82 1
        ; Just fill the buffer with 0s.
d115 1
a115 1
        STMFD   r13!,{r5,r14}
d186 1
a186 1
        LDMFD   r13!,{r5,PC}
d223 1
a223 1
        LDMFD   r13!,{r5,PC}
d242 1
a242 1
        LDMFD   r13!,{r5,PC}
d353 1
a353 1
        STMFD   r13!,{R7,R12}
d383 1
a383 1
        LDMFD   r13!,{R7,R12}
@


1.4
log
@Fix to work properly when built into ROM images
Detail:
  Makefile - Rewritten to use assembler makefile fragments instead of C ones. The component is listed as assembler in ModuleDB, so using the C fragments was causing an object file to be linked into the ROM instead of a module.
  MkRam,fd7 - Made to work with new makefile
  s/FillCode, s/Handler, s/Memory, s/Module, s/Vars - Removed dependency on relocation code. It looks like it was only the pointers in FILLCODE_table_start that were being relocated. The fillcode table is now stored in the workspace instead of within the module.
Admin:
  Tested in OMAP3 & Tungsten ROMs.
  Some of the disabled switches may still rely on the removed relocation code.


Version 1.07. Tagged as 'SharedSnd-1_07'
@
text
@d34 1
a34 1
	MOVNE	r1,r2		; Pretend we filled!
d324 1
a324 1
	MOV	R0,R0,ROR#16		; R0 = BBBBAAAA
@


1.3
log
@  New FillCode from Robin Watts
Detail:
  This version of SharedSound does not get us up to the stuff in the
  current 1.07 version which is in Select, but it does address some
  issues with the 1.04 version which were spotted quite some time ago.
Admin:
  It seems to work on my Iyonix.

Version 1.05. Tagged as 'SharedSnd-1_05'
@
text
@a27 5
; Table of entry points passed to handlers.
FILLCODE_table_start
        DCD     0                               ; flags
        DCD     fill_silence
        DCD     fill_data
@


1.2
log
@Fix from John Ballance - R2 got corrupted in the fill with silence routine
which later lead to a data abort.

Version 1.04. Tagged as 'SharedSnd-1_04'
@
text
@d30 17
a46 3
	DCD	0				; flags
	DCD	fill_silence
	DCD	fill_data
d48 2
a49 6
fill_silence
	TST	r3,#1		; If we are being asked to mix, then nothing to do.
	MOVNE	PC,R14
	CMP	R2,R1
	MOVMI	PC,R14		; Already full!
	MOV	R0,#0
d51 68
a118 37
	STR	R0,[R1],#4
	CMP	R1,R2
	BMI	fs_lp
	ORR	R0,R3,#1	; R0 = flags + MIX set
	MOV	PC,R14
	; Just fill the buffer with 0s.
	; On Entry:
	;  r1 = Pointer to buffer to fill
	;  r2 = Pointer to byte after end of buffer to fill
	;  r3 = flags
	;	 bit     0 = Mix
	;	[bit     1 = Quality						] Unimplemented
	;	[bits  3-7 = Overrun count (0 = None, 1-30 = 1-30, 31 = > 30)	] but reserved
	;	[bit    29 = Reversed stereo					] for future.
	;        bit    30 = Use volume in R7
	;        bit    31 = Mute if set
	;  R4 = Pointer to base of buffer to fill from
	;  R5 = Pointer to byte after end of buffer to fill from
	;  R6 = fractional step as specified by SharedSound_SampleRate
	;  R7 = LR volume (if bit 30 of R2 is set).
	;  R9 = Fractional Accumulator
	; [R10= Left VU value ] Possible future extensions
	; [R11= Right VU value]
	; On Exit:
	;  R0 = new flags value (to be returned to return for it to return to SharedSound)
	;  R1 = pointer to next byte to be filled
	;  R4 = pointer to next byte in the buffer
	;  R9 = New fractional Accumulator
	;  R2,R3,R5,R6,R7,R8,R12 preserved

	; Now follow many variants of fillcode.
	; Key:	F = Fill, M = Mix.
	;	L = Low quality (no interpolation), H (*) = high quality (interpolated)
	;	mute = muted (increments fill buffer).
	;	V = volume scales (otherwise assumes max volume)
	;	R (*) = reversed
	; (* = Not yet implemented as the bits can never be set by SharedSound)
d120 51
a170 51
	STMFD	r13!,{r5,r14}
	; How many stereo samples (4 bytes) will this fill routine use?
	; We are never going to be asked to fill more than 256K.
	SUBS	R2,R2,R1		; R2 = number of output bytes required.
	BMI	fill_return		; We have already filled it!
	MOV	R2,R2,LSR#2		; R2 = number of words.

	; For R6 = AAAAaaaa, R2 = 0000bbbb, find R6*R2+R9
	MOV	R0,R6,LSR#16		; R0 = AAAA
	BIC	R14,R6,R0,LSL#16	; R14= aaaa
	MLA	R14,R2,R14,R9		; R14= aaaa*bbbb+R9
	MUL	R0,R2,R0		; R0 = AAAA*bbbb
	ADDS	R14,R14,R0,LSL#16	; Add in to form lower word
	MOV	R0,R0,LSR#16		; Throw away bottom 16 bits of top word
	ADC	R0,R0,#0		; Allow for carry

	MOV	R14,R14,LSR#24		; Throw away fractions
	ORR	R14,R14,R0,LSL#8	; R14= Number of samples consumed.

	ADD	R2,R1,R2,LSL#2		; Reconstitute R2 = End of buffer to fill.

	SUBS	R0,R5,R4		; R0 = Number of bytes of data available.
	BMI	fill_return		; No data! just return

	;  r1 = Pointer to buffer to fill
	;  r2 = Pointer to byte after end of buffer to fill
	;  r3 = flags
	;	 bit     0 = Mix
	;	[bit     1 = Quality						] Unimplemented
	;	[bits  3-7 = Overrun count (0 = None, 1-30 = 1-30, 31 = > 30)	] but reserved
	;	[bit    29 = Reversed stereo					] for future.
	;        bit    30 = Use volume in R7
	;        bit    31 = Mute if set
	;  R4 = Pointer to base of buffer to fill from
	;  R5 = Pointer to byte after end of buffer to fill from
	;  R6 = fractional step as specified by SharedSound_SampleRate
	;  R7 = LR volume (if bit 30 of R2 is set).
	;  R9 = Fractional Accumulator
	;  R10= Left VU value
	;  R11= Right VU value
	; On Exit:
	;  R0 = new flags value (to be returned to return for it to return to SharedSound)
	;  R1 = pointer to next byte to be filled
	;  R4 = pointer to next byte in the buffer
	;  R9 = New fractional Accumulator
	;  R2,R3,R5,R6,R7,R8,R12 preserved
	CMP	R14,R0,ASR#2		; If R14 > R0 then we need more than we have.
	AND	R0,R3,#&C0000001
	ORRHI	R0,R0,#1<<29		; Use the data limited cases
	ADD	PC,PC,R0,ROR#27
	DCD	0
d172 16
a187 16
	B	ssh_FL		; 0 = Max Vol,   No Mute, Fill
	B	sshD_FL		; 1 = Max Vol,   No Mute, Fill, Data limited
	B	ssh_VFL		; 2 = Vol Scale, No Mute, Fill
	B	sshD_VFL	; 3 = Vol Scale, No Mute, Fill, Data limited
	B	ssh_Fmute	; 4 = Max Vol,   Mute,    Fill
	B	ssh_Fmute	; 5 = Max Vol,   Mute,    Fill, Data limited
	B	ssh_Fmute	; 6 = Vol Scale, Mute,    Fill
	B	ssh_Fmute	; 7 = Vol Scale, Mute,    Fill, Data limited
	B	ssh_ML		; 8 = Max Vol,   No Mute, Mix
	B	sshD_ML		; 9 = Max Vol,   No Mute, Mix,  Data limited
	B	ssh_VML		; 10= Vol Scale, No Mute, Mix
	B	sshD_VML	; 11= Vol Scale, No Mute, Mix,  Data limited
	B	ssh_Mmute	; 12= Max Vol,   Mute,    Mix
	B	ssh_Mmute	; 13= Max Vol,   Mute,    Mix,  Data limited
	B	ssh_Mmute	; 14= Vol Scale, Mute,    Mix
	B	ssh_Mmute	; 15= Vol Scale, Mute,    Mix,  Data limited
d190 2
a191 2
	ORR	r0,r3,#1	; r0 = flags on entry + MIX.
	LDMFD	r13!,{r5,PC}
d214 2
a215 2
	MACRO
	FillCode	$name
d217 1
a217 1
	MakeSpace$name
d220 1
a220 1
	RealFillCode$name
d222 2
a223 2
        CMP	R1,R2
        BMI	ssh_lp0_$name
d225 1
a225 1
	UnMakeSpace$name
d227 2
a228 2
	ORR	r0,r3,#1	; r0 = flags on entry + MIX.
	LDMFD	r13!,{r5,PC}
d230 1
a230 1
	MEND
d233 2
a234 2
	MACRO
	FillCodeD	$name
d236 1
a236 1
	MakeSpace$name
d239 1
a239 1
	RealFillCode$name
d241 2
a242 2
        CMP	R4,R5
        BMI	sshD_lp0_$name
d244 1
a244 1
	UnMakeSpace$name
d246 2
a247 2
	ORR	r0,r3,#1	; r0 = flags on entry + MIX.
	LDMFD	r13!,{r5,PC}
d249 1
a249 1
	MEND
d262 2
a263 2
	MACRO
	RealFillCodeFL
d265 14
a278 16
	ADD	r9,r9,r6		; accum += frac
	AND	r14,r9,#&FF000000	; r14 = integer inc
	ADD	R4,R4,R14,LSR#22
        ;LDR	R0,[R4],r14,LSR#22
	BIC	r9,r9,#&FF000000	; keep just the fractional bit
	ADD	R1,R1,#4
        ;STR	R0,[R1],#4

	MEND

	MACRO
	MakeSpaceFL
	MEND
	MACRO
	UnMakeSpaceFL
	MEND
d282 2
a283 2
	MACRO
	MakeSpaceVFL
d285 2
a286 2
	MOV	r10,R7,LSR#16		; r10 = Left Vol
	BIC	r11,r7,r10,LSL#16	; r11 = Right Vol
d288 1
a288 1
	MEND
d290 16
a305 16
	MACRO
	RealFillCodeVFL

	ADD	r9,r9,r6		; accum += frac
	AND	r14,r9,#&FF000000	; r14 = integer inc
        LDR	R0,[R4],r14,LSR#22
	BIC	r9,r9,#&FF000000	; keep just the fractional bit
	MOV	R14,R0,ASR#16
	MUL	R14,R10,R14		; R14= LLLLxxxx = Scaled L volume
	MOV	R0,R0,LSL#16
	MOV	R0,R0,ASR#16
	MUL	R0,R11,R0		; T3 = RRRRxxxx = Scaled R volume
	MOV	R14,R14,LSR#16
	MOV	R0,R0,LSR#16
	ORR	R0,R0,R14,LSL#16
        STR	R0,[R1],#4
d307 1
a307 1
	MEND
d309 2
a310 2
	MACRO
	UnMakeSpaceVFL
d312 1
a312 1
	MEND
d316 27
a342 26
	MACRO
	MakeSpaceML
	MOV	R10,#1<<31
	MEND

	MACRO
	RealFillCodeML

	ADD	R9,R9,R6		; accum += frac
	AND	R14,R9,#&FF000000	; r14= integer inc
        LDR	R0,[R4],r14,LSR#22	; R0 = AAAABBBB = Our samples
	LDR	R14,[R1]		; R14= CCCCDDDD = Current samples
	BIC	R9,R9,#&FF000000	; keep just the fractional bit
	ADDS	R11,R14,R11,LSL#16	; T2 = eeeexxxx (where eeee = AAAA+CCCC)
	SBCVS	R11,R10,#0		; T2 = EEEExxxx (where EEEE = Clip[AAAA+CCCC])
	ADDS	R0,R0,R14,LSL#16	; R0 = DDDD0000+BBBB000
	SBCVS	R0,R10,#0		; R0 = FFFF0000 (where FFFF = Clip[DDDD+CCCC])
	AND	R11,R11,R10,ASR#15	; T2 = EEEE0000
	ORR	R0,R11,R0,LSR#16	; R0 = EEEEFFFF
        STR	R0,[R1],#4

	MEND

	MACRO
	UnMakeSpaceML
	MEND
d356 34
a389 34
	MACRO
	MakeSpaceVML
 	STMFD	r13!,{R12}
	MOV	R10,#1<<31
	MOV	R11,r7,LSR#16			; R11= Left vol
	BIC	R7,r7,R11,LSL#16		; R7 = Right vol
	MEND

	MACRO
	RealFillCodeVML

	ADD	R9,R9,R6		; accum += frac
	AND	R14,R9,#&FF000000	; r14= integer inc
        LDR	R0,[R4],r14,LSR#22	; R0 = AAAABBBB = Our samples
	BIC	R9,R9,#&FF000000	; keep just the fractional bit
	MOV	r14,R0,ASR#16
	MUL	R12,R11,R14		; R12= AAAAxxxx
	LDR	R14,[R1]		; R14= CCCCDDDD = Current samples
	MOV	R0,R0,LSL#16
	MOV	R0,R0,ASR#16
        MUL	R0,R7,R0		; R0 = BBBBxxxx
	ADDS	R12,R14,R12		; T2 = eeeexxxx (where eeee = AAAA+CCCC)
	SBCVS	R12,R10,#0		; T2 = EEEExxxx (where EEEE = Clip[AAAA+CCCC])
	ADDS	R0,R0,R14,LSL#16	; R0 = DDDD0000+BBBB000
	SBCVS	R0,R10,#0		; R0 = FFFF0000 (where FFFF = Clip[DDDD+CCCC])
	AND	R12,R12,R10,ASR#15	; T2 = EEEE0000
	ORR	R0,R12,R0,LSR#16	; R0 = EEEEFFFF
        STR	R0,[R1],#4

	MEND
	MACRO
	UnMakeSpaceVML
 	LDMFD	r13!,{R12}
	MEND
d393 13
a405 13
	MACRO
	MakeSpaceFmute
	MOV	R0,#0
	MEND
	MACRO
	RealFillCodeFmute

	ADD	R9,R9,R6		; accum += frac
	STR	R0,[R1],#4

	MEND
	MACRO
	UnMakeSpaceFmute
d407 1
a407 1
	BIC	R9,R9,#&FF000000	; keep just the fractional bit
d409 1
a409 1
	MEND
d413 12
a424 12
	MACRO
	MakeSpaceMmute
	MEND
	MACRO
	RealFillCodeMmute

	ADD	R9,R9,R6		; accum += frac
	ADD	R1,R1,#4

	MEND
	MACRO
	UnMakeSpaceMmute
d426 1
a426 1
	BIC	R9,R9,#&FF000000	; keep just the fractional bit
d428 1
a428 1
	MEND
d433 10
a442 10
	FillCode	FL
	FillCodeD	FL
	FillCode	ML
	FillCodeD	ML
	FillCode	VFL
	FillCodeD	VFL
	FillCode	VML
	FillCodeD	VML
	FillCode	Fmute
	FillCode	Mmute
d444 1
a444 1
	END
@


1.1
log
@  Import of version 1.00 of SharedSound from WSS - this is a merge of
  RISC OS Ltd, ESP and Pace sources. I've added the Makefile, Mk* and
  VersionNum files.

Detail (courtesy of WSS):
  * Incorporates fixes made to 0.58c to fix the callbacks on sound
    rate changes.

  * Incorporates RISC OS Ltd changes to response to
    TaskManager_Acknowledgements service.

  * Includes 8 bit Log and PowerWave drivers.

  * Now built with Objasm, not BASIC assembler.

  * SharedSound_HandlerInfo SWI fixed to conform to spec. Also
    extended to accept r0 = 0 on entry, in which case r0 = number of
    first registered handler (or 0 for none) on exit; R1-R5 corrupted.

    Therefore the following code enumerates handlers:

    REM Get first handler number.
    SYS "SharedSound_HandlerInfo",0 TO next% ; flags%
    REM While no errors, and not finished
    WHILE (next% <> 0) AND ((flags% AND 1) = 0)
     SYS"SharedSound_HandlerInfo",next% TO next%,a%,b%,c%,d%,e%
    ENDWHILE

  * Sends Service_Sound (&54) with reason code 6 (SharedSound Starting)
    on (callback after) initialisation.

  * Sends Service_Sound (&54) with reason code 7 (SharedSound Dying)
    on finalisation.

  * Some small optimisations

  * Version bumped to 1.00 (to allow RISC OS Ltd space to make changes
    to their versions).

  * Table of helpful fill code routines now passed to handlers in R8.

  * SharedSound reinitialises correctly on lower layers reinitialising.

  * More care taken to remove outstanding callbacks on finalise.

  * Dual 26/32 bit version.

Admin:
  * Not tested by us.

  * 8-bit sound system code is known not to be ROM safe. However, it is
    currently switched out (see the doLog option in s.Gets).

  * This version *will not work* on a 32-bit system. There are at least two
    issues with it that I've spotted with a quick glance through the code -
    the lack of the module flags word, and an unconditional TEQP instruction.
    This version has been checked in nevertheless as a record of what WSS
    delivered to us.

Version 1.00. Tagged as 'SharedSnd-1_00'
@
text
@d37 1
a37 1
	SUBS	R2,R2,R1
@

