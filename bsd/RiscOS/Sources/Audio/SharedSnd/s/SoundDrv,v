head	1.7;
access;
symbols
	SharedSnd-1_20:1.7
	SharedSnd-1_19:1.7
	SharedSnd-1_18:1.7
	SharedSnd-1_17:1.5
	SharedSnd-1_16:1.5
	SharedSnd-1_15:1.5
	SharedSnd-1_14:1.4
	SharedSnd-1_13:1.3
	SharedSnd-1_12:1.3
	SharedSnd-1_11:1.3
	SharedSnd-1_10:1.2
	SharedSnd-1_09:1.2
	SharedSnd-1_08:1.2
	SharedSnd-1_07:1.2
	ESP_SharedSnd-1_06_merge:1.1.2.1
	SharedSnd-1_06:1.2
	ESP_SharedSnd-1_06:1.1.0.2
	ESP_SharedSnd-1_06_bp:1.1
	SharedSnd-1_05:1.1
	SharedSnd-1_04:1.1
	SharedSnd-1_03:1.1
	SharedSnd-1_02:1.1
	SharedSnd-1_01:1.1
	SharedSnd-1_00:1.1;
locks; strict;
comment	@# @;


1.7
date	2016.06.18.16.39.01;	author jlee;	state Exp;
branches;
next	1.6;
commitid	ODW0ixlFy50c3Yaz;

1.6
date	2016.06.18.16.19.19;	author jlee;	state Exp;
branches;
next	1.5;
commitid	L0sIVnG3vL4sWXaz;

1.5
date	2013.09.07.09.58.38;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	DDb7J4xWmm0Dsu4x;

1.4
date	2013.09.07.09.48.59;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	xd8cpTeM2vojpu4x;

1.3
date	2012.05.13.12.13.48;	author bavison;	state Exp;
branches;
next	1.2;
commitid	ikRUfBzwYcXxHy4w;

1.2
date	2011.08.15.23.10.49;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.28.18.11.58;	author bavison;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2011.08.15.14.11.20;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Use Entry/EXIT, Push/Pull macros
Detail:
  s/* - Code updated to use Entry/EXIT and Push/Pull macros where possible instead of manual STM/LDM. Also add ROUTs for safety (although most routines use named local labels rather than numbered ones). A few obvious cases also fixed to reduce number of regs pushed onto stack.
  A few other changes and fixes of note:
  s/Log - Trim empty, unused installLogDriver routine when doLog is {FALSE}
  s/Module - Add a veneer to swiHandler to deal with 26bit and 26/32bit neutral cases; avoids the need for individual SWI handlers to preserve NZC
  s/SWIs:
  - Remove 26/32bit neutral SWI exit code, now handled by veneers. CLRV on most SWI exits to replace the implicit CLRV from CMP pc,pc.
  - swiHandlerVolume and swiDriverMixer were popping the wrong regs from the stack for most error cases; now fixed via the switch to Entry/EXIT
Admin:
  Tested on Raspberry Pi


Version 1.18. Tagged as 'SharedSnd-1_18'
@
text
@; Copyright (c) 1995, Expressive Software Projects
; All rights reserved.
; 
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met:
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of Expressive Software Projects nor the names of its
;       contributors may be used to endorse or promote products derived from
;       this software without specific prior written permission.
; 
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
; WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
; DISCLAIMED. IN NO EVENT SHALL EXPRESSIVE SOFTWARE PROJECTS BE LIABLE FOR ANY
; DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
; ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
; 

 ; -------------------------------- Sound driver routines ------------------------

SoundDriverStart ROUT
        ; Start the SharedSound SoundDriver
        ; ws = Driver block
        Entry   "r0-r11,ws"

        MOV     r0,#0
        STR     r0,[ws,#work_RecordOn]

        ; Build a device table, and a type table
        MOV     r0,#1
        STR     r0,[ws,#work_RecordDeviceTableCount]
        STR     r0,[ws,#work_RecordTypeTableTypes]

        MOV     r0,#2                   ; 2 channels, L+R
        STR     r0,[ws,#work_RecordTypeTableChannels]

        MOV     r0,#?work_RecordTypeTableName
        ADR     r1,typeNameToken
        ADD     r2,ws,#work_RecordTypeTableName
        BL      msgLookupToken

        MOV     r0,#?work_RecordDeviceTableName
        ADR     r1,deviceNameToken
        ADD     r2,ws,#work_RecordDeviceTableName
        BL      msgLookupToken

        ; Install
        ADR     r0,SoundDriverCallTable
        MOV     r1,ws
        MOV     r2,#0
        ADRL    r3,title

                ;    r0 = Call table address
                ;    r1 = ws Parameter
                ;    r2 = Flags
                ;    r3 = Name

        SWI     XSoundDriver_Install

                ;    r0 = Driver number
                ;    r1 = Address to call with data
                ;    r2 = ws Parameter

        STR     r0,[ws,#work_RecordHandle]  ; Driver number from SoundDriver
        STR     r1,[ws,#work_RecordHandlerAddress]
        STR     r2,[ws,#work_RecordHandlerParameter]

        EXIT

deviceNameToken
        DCB     "DrvDev",0
typeNameToken
        DCB     "DrvTyp",0
        ALIGN

 ;-----------

SoundDriverRemove ROUT
        ; ws = Driver block

        Entry   "r0-r11,ws"

        LDR     r0,[ws,#work_RecordHandle]  ; Driver number

        SWI     XSoundDriver_Remove

        EXIT

 ; -----------------------

SoundDriverCallTable
        B       SoundDriver_Start
        B       SoundDriver_Stop
        B       SoundDriver_Pause
        B       SoundDriver_Volume
        B       SoundDriver_Device
        B       SoundDriver_SampleRate
        B       SoundDriver_SampleType
        B       SoundDriver_Gain

 ; ----------

SoundDriver_Start ROUT
        Entry   "r0"

        MOV     r0,#1
        STR     r0,[ws,#work_RecordOn]

        EXIT

 ; -------

SoundDriver_Stop ROUT
        Entry   "r0"

        MOV     r0,#0
        STR     r0,[ws,#work_RecordOn]

        EXIT

 ; -------

SoundDriver_Pause ROUT
        MOV     pc, lr

 ; -------

SoundDriver_Volume ROUT
        ; Read or write current input volume
        ; On entry:
        ;    r0 = Function code, 0 = Read, 1 = Write
        ;    r1 = Left Volume
        ;    r2 = Right volume
        ; On exit:
        ;    r1 = Left volume
        ;    r2 = Right volume

        MOV     r1,#&FF
        MOV     r2,#&FF

        MOV     pc, lr

 ; -------

SoundDriver_Device ROUT
        ; Read or write device
        ; On entry:
        ;    r0 = Function code, 0 = Read, 1 = Write, 2 = Info
        ; If r0 = 0,1 Then
        ;    r1 = Left Device number
        ;    r2 = Right Device number
        ; If r0 = 2 Then
        ;    r1 = Address of left device table
        ;    r2 = Address of right device table

        CMP     r0,#2
        ADDEQ   r1,ws,#work_RecordDeviceTable
        ADDEQ   r2,ws,#work_RecordDeviceTable
        BEQ     SoundDriver_Device_Exit

        MOV     r1,#0  ; Only one device
        MOV     r2,#0

SoundDriver_Device_Exit
        MOV     pc, lr

 ; -------

SoundDriver_SampleRate ROUT
        ; Get rate
        ; On entry:
        ;    r0 = Function code, 0 = Read, 1 = Write, 2 = Test
        ;    r1 = Rate
        ; On exit:
        ;    r1 = Nearest rate
        Entry   "r0,r2-r11,ws"

        CMP     r0,#0
        BEQ     SoundDriver_SampleRate_Read

        CMP     r0,#1
        BEQ     SoundDriver_SampleRate_Write

        CMP     r0,#2
        BNE     SoundDriver_SampleRate_Read

        ; Test involves setting the new one and then resetting to the old
        LDR     r2,[ws,#work_SampleFrequency]

        MOV     r0,r1
        BL      newSampleRate

        LDR     r1,[ws,#work_SampleFrequency]  ; Nearest available

        MOV     r0,r2
        BL      newSampleRate

        B       SoundDriver_SampleRate_Exit

SoundDriver_SampleRate_Write

        MOV     r0,r1
        BL      newSampleRate

SoundDriver_SampleRate_Read

        LDR     r1,[ws,#work_SampleFrequency]

SoundDriver_SampleRate_Exit

        EXIT



 ; --------

SoundDriver_SampleType ROUT
        ; On entry:
        ;    r0 = Function code, 0 = Read, 1 = Write, 2 = Info
        ;  If r0 = 0,1 then
        ;    r1 = Sample channels
        ;    r2 = Sample data type
        ;  if r0 = 2 then
        ;    r1 = -1 to read number of types
        ;       = Value from 0 to n to get name of type
        ; On exit:
        ;  IF r0 = 0,1 then
        ;    r1 = Current channels
        ;    r2 = Current Sample data type
        ;  if r0 = 2 then
        ;    r1 = Pointer to type table
        CMP     r0,#2   ; Info
        ADDEQ   r1,ws,#work_RecordTypeTable
        BEQ     SoundDriver_SampleType_Exit

        ; Cannot change channels or type
        MOV     r1,#2
        MOV     r2,#0

SoundDriver_SampleType_Exit
        MOV     pc, lr

 ; -------

SoundDriver_Gain ROUT

        ; On entry:
        ;    r0 = Function code, 0 = Read, 1 = Write, 2 = Info
        ;    r1 = Device number
        ;    r2 = Left Gain flag
        ;    r3 = Right gain flag
        ; On exit:
        ;  If r0= 0,1 then
        ;    r2,r3 = current flags
        ;  If r0 = 2  then
        ;    r2,r3 > 0 if gain available on this device (value - db's gain)

        ; No gain available
        MOV     r2,#0
        MOV     r3,#0

        MOV     pc, lr

        END
@


1.6
log
@Expand tabs
Detail:
  s/* - Expand all tabs, to avoid space/tab use inconsistencies within some files and to match general ROOL code formatting
Admin:
  Binary unchanged


Version 1.17. Not tagged
@
text
@d29 1
a29 1
SoundDriverStart
d32 1
a32 1
        STMDB   sp!,{r0-r11,ws,lr}
d76 1
a76 1
        LDMIA   sp!,{r0-r11,ws,pc}
d86 1
a86 1
SoundDriverRemove
d89 1
a89 1
        STMDB   sp!,{r0-r11,ws,lr}
d95 1
a95 1
        LDMIA   sp!,{r0-r11,ws,pc}
d111 2
a112 2
SoundDriver_Start
        STMDB   sp!,{r0-r11,ws,lr}
d117 1
a117 1
        LDMIA   sp!,{r0-r11,ws,pc}
d121 2
a122 2
SoundDriver_Stop
        STMDB   sp!,{r0-r11,ws,lr}
d127 1
a127 1
        LDMIA   sp!,{r0-r11,ws,pc}
d131 2
a132 5
SoundDriver_Pause
        STMDB   sp!,{r0-r11,ws,lr}


        LDMIA   sp!,{r0-r11,ws,pc}
d136 1
a136 1
SoundDriver_Volume
a145 2
        STMDB   sp!,{r0,r3-r11,ws,lr}

d149 1
a149 1
        LDMIA   sp!,{r0,r3-r11,ws,pc}
d153 1
a153 1
SoundDriver_Device
a162 1
        STMDB   sp!,{r0,r3-r11,ws,lr}
d173 1
a173 1
        LDMIA   sp!,{r0,r3-r11,ws,pc}
d177 1
a177 1
SoundDriver_SampleRate
d184 1
a184 1
        STMDB   sp!,{r0,r2-r11,ws,lr}
d219 1
a219 1
        LDMIA   sp!,{r0,r2-r11,ws,pc}
d225 1
a225 1
SoundDriver_SampleType
a239 2
        STMDB   sp!,{r0,r3-r11,ws,lr}

d249 1
a249 3


        LDMIA   sp!,{r0,r3-r11,ws,pc}
d253 1
a253 1
SoundDriver_Gain
a265 2
        STMDB   sp!,{r0,r1,r4-r11,ws,lr}

d270 1
a270 1
        LDMIA sp!,{r0,r1,r4-r11,ws,pc}
@


1.5
log
@Internationalised
Errors are now looked up via MessageTrans.
The driver names (registered via InstallDriver or to SoundDriver_Install) are now also looked up.
Note, the SharedSound_DriverInfo SWI used to return r2 as the pointer to a pointer to the name, the documentation seems vague as to what the intent was, but it seems more likely that a pointer to the name was what was intended. The name string is buffered (because it needs looking up for internationalisation anyway).

Tested briefly, inspecting the workspace for name lookups and sending a fake Service_SoundDriver service call. Two errors deliberatly triggered to check error text.

Version 1.15. Tagged as 'SharedSnd-1_15'
@
text
@d30 3
a32 3
	; Start the SharedSound SoundDriver
	; ws = Driver block
	STMDB	sp!,{r0-r11,ws,lr}
d34 2
a35 2
	MOV	r0,#0
	STR	r0,[ws,#work_RecordOn]
d37 1
a37 1
	; Build a device table, and a type table
d40 1
a40 1
	STR	r0,[ws,#work_RecordTypeTableTypes]
d42 2
a43 2
	MOV	r0,#2                   ; 2 channels, L+R
	STR	r0,[ws,#work_RecordTypeTableChannels]
d45 15
a59 15
	MOV	r0,#?work_RecordTypeTableName
	ADR	r1,typeNameToken
	ADD	r2,ws,#work_RecordTypeTableName
	BL	msgLookupToken

	MOV	r0,#?work_RecordDeviceTableName
	ADR	r1,deviceNameToken
	ADD	r2,ws,#work_RecordDeviceTableName
	BL	msgLookupToken

	; Install
	ADR	r0,SoundDriverCallTable
	MOV	r1,ws
	MOV	r2,#0
	ADRL	r3,title
d66 1
a66 1
	SWI	XSoundDriver_Install
d72 3
a74 3
	STR	r0,[ws,#work_RecordHandle]  ; Driver number from SoundDriver
	STR	r1,[ws,#work_RecordHandlerAddress]
	STR	r2,[ws,#work_RecordHandlerParameter]
d76 1
a76 1
	LDMIA	sp!,{r0-r11,ws,pc}
d79 1
a79 1
	DCB	"DrvDev",0
d81 2
a82 2
	DCB	"DrvTyp",0
	ALIGN
d87 1
a87 1
	; ws = Driver block
d89 1
a89 1
	STMDB	sp!,{r0-r11,ws,lr}
d91 1
a91 1
	LDR	r0,[ws,#work_RecordHandle]  ; Driver number
d93 1
a93 1
	SWI	XSoundDriver_Remove
d95 1
a95 1
	LDMIA	sp!,{r0-r11,ws,pc}
d100 8
a107 8
	B	SoundDriver_Start
	B	SoundDriver_Stop
	B	SoundDriver_Pause
	B	SoundDriver_Volume
	B	SoundDriver_Device
	B	SoundDriver_SampleRate
	B	SoundDriver_SampleType
	B	SoundDriver_Gain
d112 1
a112 1
	STMDB	sp!,{r0-r11,ws,lr}
d114 2
a115 2
	MOV	r0,#1
	STR	r0,[ws,#work_RecordOn]
d117 1
a117 1
	LDMIA	sp!,{r0-r11,ws,pc}
d122 1
a122 1
	STMDB	sp!,{r0-r11,ws,lr}
d124 2
a125 2
	MOV	r0,#0
	STR	r0,[ws,#work_RecordOn]
d127 1
a127 1
	LDMIA	sp!,{r0-r11,ws,pc}
d132 1
a132 1
	STMDB	sp!,{r0-r11,ws,lr}
d135 1
a135 1
	LDMIA	sp!,{r0-r11,ws,pc}
d140 8
a147 8
	; Read or write current input volume
	; On entry:
	;    r0 = Function code, 0 = Read, 1 = Write
	;    r1 = Left Volume
	;    r2 = Right volume
	; On exit:
	;    r1 = Left volume
	;    r2 = Right volume
d149 1
a149 1
	STMDB	sp!,{r0,r3-r11,ws,lr}
d151 2
a152 2
	MOV	r1,#&FF
	MOV	r2,#&FF
d154 1
a154 1
	LDMIA	sp!,{r0,r3-r11,ws,pc}
d159 15
a173 15
	; Read or write device
	; On entry:
	;    r0 = Function code, 0 = Read, 1 = Write, 2 = Info
	; If r0 = 0,1 Then
	;    r1 = Left Device number
	;    r2 = Right Device number
	; If r0 = 2 Then
	;    r1 = Address of left device table
	;    r2 = Address of right device table
	STMDB	sp!,{r0,r3-r11,ws,lr}

	CMP	r0,#2
	ADDEQ	r1,ws,#work_RecordDeviceTable
	ADDEQ	r2,ws,#work_RecordDeviceTable
	BEQ	SoundDriver_Device_Exit
d175 2
a176 2
	MOV	r1,#0  ; Only one device
	MOV	r2,#0
d179 1
a179 1
	LDMIA	sp!,{r0,r3-r11,ws,pc}
d184 7
a190 7
	; Get rate
	; On entry:
	;    r0 = Function code, 0 = Read, 1 = Write, 2 = Test
	;    r1 = Rate
	; On exit:
	;    r1 = Nearest rate
	STMDB	sp!,{r0,r2-r11,ws,lr}
d192 2
a193 2
	CMP	r0,#0
	BEQ	SoundDriver_SampleRate_Read
d195 2
a196 2
	CMP	r0,#1
	BEQ	SoundDriver_SampleRate_Write
d198 2
a199 2
	CMP	r0,#2
	BNE	SoundDriver_SampleRate_Read
d201 2
a202 2
	; Test involves setting the new one and then resetting to the old
	LDR	r2,[ws,#work_SampleFrequency]
d204 2
a205 2
	MOV	r0,r1
	BL	newSampleRate
d207 1
a207 1
	LDR	r1,[ws,#work_SampleFrequency]  ; Nearest available
d209 2
a210 2
	MOV	r0,r2
	BL	newSampleRate
d212 1
a212 1
	B	SoundDriver_SampleRate_Exit
d216 2
a217 2
	MOV	r0,r1
	BL	newSampleRate
d221 1
a221 1
	LDR	r1,[ws,#work_SampleFrequency]
d225 1
a225 1
	LDMIA	sp!,{r0,r2-r11,ws,pc}
d232 23
a254 23
	; On entry:
	;    r0 = Function code, 0 = Read, 1 = Write, 2 = Info
	;  If r0 = 0,1 then
	;    r1 = Sample channels
	;    r2 = Sample data type
	;  if r0 = 2 then
	;    r1 = -1 to read number of types
	;       = Value from 0 to n to get name of type
	; On exit:
	;  IF r0 = 0,1 then
	;    r1 = Current channels
	;    r2 = Current Sample data type
	;  if r0 = 2 then
	;    r1 = Pointer to type table
	STMDB	sp!,{r0,r3-r11,ws,lr}

	CMP	r0,#2   ; Info
	ADDEQ	r1,ws,#work_RecordTypeTable
	BEQ	SoundDriver_SampleType_Exit

	; Cannot change channels or type
	MOV	r1,#2
	MOV	r2,#0
d259 1
a259 1
	LDMIA	sp!,{r0,r3-r11,ws,pc}
d265 16
a280 16
	; On entry:
	;    r0 = Function code, 0 = Read, 1 = Write, 2 = Info
	;    r1 = Device number
	;    r2 = Left Gain flag
	;    r3 = Right gain flag
	; On exit:
	;  If r0= 0,1 then
	;    r2,r3 = current flags
	;  If r0 = 2  then
	;    r2,r3 > 0 if gain available on this device (value - db's gain)

	STMDB	sp!,{r0,r1,r4-r11,ws,lr}

	; No gain available
	MOV	r2,#0
	MOV	r3,#0
d282 1
a282 1
	LDMIA sp!,{r0,r1,r4-r11,ws,pc}
d284 1
a284 1
	END
@


1.4
log
@Signed pointer comparison fix
In SWI InstallDriver reason codes > 2 are interpreted to mean a pointer to an install driver block, but this used a signed comparison so registering blocks in the top half of memory would fail.
SWIS.s:
 Comparison changed to process 0/1/2 and > 2 correctly
SoundDrv.s & Handler.s:
 Eliminated ADR range function by just using ADRL
Module.s:
 Zero length command table replaced by a 0 in the command entry of the module header
Memory.s:
 Signed loop exit changed for unsigned one (not relevant since the workspace is < 2G)
Drivers.s:
 SWI name moved inside doDMI switch

Version 1.14. Tagged as 'SharedSnd-1_14'
@
text
@d37 19
a57 1

d59 1
a59 1
	ADR	r3,SoundDriverName
d78 6
a98 6
SoundDriverName
	= "SharedSound",0
	ALIGN

 ; --------------

d171 2
a172 2
	ADREQ	r1,deviceTable
	ADREQ	r2,deviceTable
a182 8
deviceTable
	DCD	1

	= "Main Output",0
	ALIGN

 ; -------

d249 1
a249 1
	ADREQ	r1,typeTable
a262 9
typeTable
	DCD	2               ; Channels

	DCD	1               ; Types
	= "Linear 16 bit",0
	ALIGN

 ; -------

@


1.3
log
@  No longer uses non-X SWIs in module code
Detail:
  A few of these were careless typos, others were already X SWIs but the
  symbol names didn't reflect the fact, and in other cases there was no code
  path to deal with error cases. All now fixed. Also fixed all the assembly
  time warnings (at least for 32-bit ROM builds).
Admin:
  No longer prevents the Raspberry Pi ROM init from completing.

Version 1.11. Tagged as 'SharedSnd-1_11'
@
text
@a28 7
get_SoundDriverStart_R0

	ADR	r0,SoundDriverStart
	MOV	pc,lr

 ; -----

@


1.2
log
@  Selective merge of ESP's version 1.06 (14 May 2002) of SharedSound.
Detail:
  Changelog not provided by ESP. I have made an additional change to use
  the value of SoundSystemNIL from Hdr:Sound to test if SoundChannels is not
  installed - this constant changed in RISC OS 5 for 32-bitting reasons.
Admin:
  Builds, and briefly tested. Coincidentally, this is also our version 1.06.

Version 1.06. Tagged as 'SharedSnd-1_06'
@
text
@d55 1
a55 1
	SWI	SoundDriver_Install
d76 1
a76 1
	SWI	SoundDriver_Remove
@


1.1
log
@  Import of version 1.00 of SharedSound from WSS - this is a merge of
  RISC OS Ltd, ESP and Pace sources. I've added the Makefile, Mk* and
  VersionNum files.

Detail (courtesy of WSS):
  * Incorporates fixes made to 0.58c to fix the callbacks on sound
    rate changes.

  * Incorporates RISC OS Ltd changes to response to
    TaskManager_Acknowledgements service.

  * Includes 8 bit Log and PowerWave drivers.

  * Now built with Objasm, not BASIC assembler.

  * SharedSound_HandlerInfo SWI fixed to conform to spec. Also
    extended to accept r0 = 0 on entry, in which case r0 = number of
    first registered handler (or 0 for none) on exit; R1-R5 corrupted.

    Therefore the following code enumerates handlers:

    REM Get first handler number.
    SYS "SharedSound_HandlerInfo",0 TO next% ; flags%
    REM While no errors, and not finished
    WHILE (next% <> 0) AND ((flags% AND 1) = 0)
     SYS"SharedSound_HandlerInfo",next% TO next%,a%,b%,c%,d%,e%
    ENDWHILE

  * Sends Service_Sound (&54) with reason code 6 (SharedSound Starting)
    on (callback after) initialisation.

  * Sends Service_Sound (&54) with reason code 7 (SharedSound Dying)
    on finalisation.

  * Some small optimisations

  * Version bumped to 1.00 (to allow RISC OS Ltd space to make changes
    to their versions).

  * Table of helpful fill code routines now passed to handlers in R8.

  * SharedSound reinitialises correctly on lower layers reinitialising.

  * More care taken to remove outstanding callbacks on finalise.

  * Dual 26/32 bit version.

Admin:
  * Not tested by us.

  * 8-bit sound system code is known not to be ROM safe. However, it is
    currently switched out (see the doLog option in s.Gets).

  * This version *will not work* on a 32-bit system. There are at least two
    issues with it that I've spotted with a quick glance through the code -
    the lack of the module flags word, and an unconditional TEQP instruction.
    This version has been checked in nevertheless as a record of what WSS
    delivered to us.

Version 1.00. Tagged as 'SharedSnd-1_00'
@
text
@a0 27
; Copyright (c) 1995, Expressive Software Projects
; All rights reserved.
; 
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met:
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of Expressive Software Projects nor the names of its
;       contributors may be used to endorse or promote products derived from
;       this software without specific prior written permission.
; 
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
; WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
; DISCLAIMED. IN NO EVENT SHALL EXPRESSIVE SOFTWARE PROJECTS BE LIABLE FOR ANY
; DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
; ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
; 
	GBLL debug
debug	SETL {FALSE}
@


1.1.2.1
log
@Import of latest sources from ESP.
This represents ESP's version 1.06 (14 May 2002). The files are exactly as
received, but they are not expected to build as they are against the public
headers.
@
text
@d26 2
@

