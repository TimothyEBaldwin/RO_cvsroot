head	1.7;
access;
symbols
	SharedSnd-1_20:1.7
	SharedSnd-1_19:1.7
	SharedSnd-1_18:1.7
	SharedSnd-1_17:1.5
	SharedSnd-1_16:1.5
	SharedSnd-1_15:1.5
	SharedSnd-1_14:1.4
	SharedSnd-1_13:1.4
	SharedSnd-1_12:1.3
	SharedSnd-1_11:1.3
	SharedSnd-1_10:1.2
	SharedSnd-1_09:1.2
	SharedSnd-1_08:1.2
	SharedSnd-1_07:1.2
	ESP_SharedSnd-1_06_merge:1.2
	SharedSnd-1_06:1.2
	ESP_SharedSnd-1_06:1.2.0.2
	ESP_SharedSnd-1_06_bp:1.2
	SharedSnd-1_05:1.2
	SharedSnd-1_04:1.2
	SharedSnd-1_03:1.2
	SharedSnd-1_02:1.2
	SharedSnd-1_01:1.2
	SharedSnd-1_00:1.1;
locks; strict;
comment	@# @;


1.7
date	2016.06.18.16.39.01;	author jlee;	state Exp;
branches;
next	1.6;
commitid	ODW0ixlFy50c3Yaz;

1.6
date	2016.06.18.16.19.19;	author jlee;	state Exp;
branches;
next	1.5;
commitid	L0sIVnG3vL4sWXaz;

1.5
date	2013.09.07.09.58.38;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	DDb7J4xWmm0Dsu4x;

1.4
date	2013.09.04.07.14.42;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	2RDI391I6q1nE54x;

1.3
date	2012.05.13.12.13.48;	author bavison;	state Exp;
branches;
next	1.2;
commitid	ikRUfBzwYcXxHy4w;

1.2
date	2001.06.28.20.21.55;	author bavison;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.28.18.11.58;	author bavison;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Use Entry/EXIT, Push/Pull macros
Detail:
  s/* - Code updated to use Entry/EXIT and Push/Pull macros where possible instead of manual STM/LDM. Also add ROUTs for safety (although most routines use named local labels rather than numbered ones). A few obvious cases also fixed to reduce number of regs pushed onto stack.
  A few other changes and fixes of note:
  s/Log - Trim empty, unused installLogDriver routine when doLog is {FALSE}
  s/Module - Add a veneer to swiHandler to deal with 26bit and 26/32bit neutral cases; avoids the need for individual SWI handlers to preserve NZC
  s/SWIs:
  - Remove 26/32bit neutral SWI exit code, now handled by veneers. CLRV on most SWI exits to replace the implicit CLRV from CMP pc,pc.
  - swiHandlerVolume and swiDriverMixer were popping the wrong regs from the stack for most error cases; now fixed via the switch to Entry/EXIT
Admin:
  Tested on Raspberry Pi


Version 1.18. Tagged as 'SharedSnd-1_18'
@
text
@; Copyright (c) 1995, Expressive Software Projects
; All rights reserved.
; 
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met:
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of Expressive Software Projects nor the names of its
;       contributors may be used to endorse or promote products derived from
;       this software without specific prior written permission.
; 
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
; WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
; DISCLAIMED. IN NO EVENT SHALL EXPRESSIVE SOFTWARE PROJECTS BE LIABLE FOR ANY
; DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
; ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
; 
; ------------------------- Linear driver --------------------------

; ---------
 [ doDMI
installDMIDriver ROUT
        ; Set up the registers and table for
        ; PowerWAVE_LinearHandler and call installDriver
        Entry   , 32

        MOV     r0,#32
        ADR     r1,DMIDriverToken
        MOV     r2,sp
        BL      msgLookupToken
        MOV     r3,sp                           ; Driver name

        ADD     R0,R12,#work_DriverEntryTable  ; Get table address

        ADR     R1,DMIDriverInstall           ; Install entry
        STR     R1,[R0,#driverEntry_Install]

        ADR     R1,DMIDriverRemove            ; Remove entry
        STR     R1,[R0,#driverEntry_Remove]

        ADR     R1,DMIDriverSampleRate        ; Sample rate entry
        STR     R1,[R0,#driverEntry_SampleRate]

        MOV     R1,#0                             ; No volume entry
        STR     R1,[R0,#driverEntry_Volume]

        MOV     R1,#0
        STR     R1,[R0,#driverEntry_Mixer]       ; No mixer entry


        LDR     R1,[R12,#work_privateWord]       ; Parameter

        MOV     R2,#0                             ; Flags

        Debug   gn,"Install DMI driver....."
        Debug   gn, " Table =",r0
        Debug   gn, " Parameter =",r1
        Debug   gn, " Flags =",r2
        DebugS  gn, " Name =",r3

        BL      installDriver

        EXIT

DMIDriverToken
        DCB     "NmPow",0
        ALIGN

; ------

DMIDriverInstall ROUT
        ; Install driver using PowerWAVE_LinearHandler
        ;  R0  = Handler address
        ;  R1  = Parameter to pass
        ;  R12 = parameter for driver
        ;  R14 already on stack
        Push    "R1-R12"

        MOV     R5,R0                   ; Temorary store R0 and R1
        MOV     R6,R1

        MOV     R0,#0                   ; Get current handler to see if already installed
        SWI     XPowerWAVE_LinearHandler

        Debug   gn," Current handler =",r1

        CMP     R1,R5                   ; Same handler?
        CMPEQ   R2,R6                   ; Same parameter?

        BEQ     DMIDriverInstallExit ; Jump out 'cos already there

        Debug   gn, " Install new handler =",r5

        ; Now install new driver
        MOV     R0,#1                   ; Function code install
        MOV     R1,R5                   ; Address
        MOV     R2,R6                   ; Parameter
        SWI     XPowerWAVE_LinearHandler

        MOV     R0,R5                   ; Restore R0 if successful
        MOVVS   R0,#0                   ; Or 0 if error

DMIDriverInstallExit

        Pull    "R1-R12,PC"

; -----------

DMIDriverRemove ROUT
        ; Remove driver using PowerWAVE_LinearHandler
        ;  R14 already on stack

        Push    "R0-R2"

        ; To remove handler set new handler to 0
        MOV     R0,#1       ; Function code install
        MOV     R1,#0       ; Null handler
        MOV     R2,#0
        SWI     XPowerWAVE_LinearHandler

        Pull    "R0-R2,PC"

; -----------

DMIDriverSampleRate ROUT
        ; Choose rate and/or return current rate
        ;  R0 = 0 to read
        ;     > 0 to set to R0 = frequency
        ; On exit:
        ;  R0 = current frequency
        Push    "R1-R12"

        CMP     R0,#0
        BEQ     DMIDriverSampleRateRead

        ; Set the rate to R0
        ; Find the nearest
        MOV     R4,R0              ; R4 = rate required

        MOV     R0,#0              ; Read number of rates available
        SWI     XPowerWAVE_SampleRate  ; R1 = number of rates available

        MOV     R5,R1              ; R5 = Upper limit

DMIDriverSampleRateLoop
        MOV     R0,#2              ; Convert from index to rate
        SWI     XPowerWAVE_SampleRate  ; R2 = rate
        CMP     R2,R4
        BLT     DMIDriverSampleRateClosest  ; Best rate is between R1 and R5

        CMP     R1,#1              ; Are there any more rates
        MOVNE   R5,R1              ; Change upper limit
        MOVNE   R6,R2              ; Store upper rate
        SUBNE   R1,R1,#1           ; decrement index
        BNE     DMIDriverSampleRateLoop  ; Try again

DMIDriverSampleRateClosest   ; Check for nearest between R1 and R5
        CMP     R1,R5                      ; No range to check
        BEQ     DMIDriverSampleRateSet

        ; R2 = lower rate, R1 = index
        ; R6 = upper rate, R5 = index
        SUB     R2,R4,R2
        SUB     R6,R6,R4

        CMP     R2,R6       ; Who is nearest
        MOVGT   R1,R5       ; If nearest to R6 then set index to R5

DMIDriverSampleRateSet
        ; Chosen index is R1

        MOV     R0,#3              ; Select rate from index in R1
        SWI     XPowerWAVE_SampleRate

DMIDriverSampleRateRead
        MOV     R0,#1
        SWI     XPowerWAVE_SampleRate  ; Frequency returned in R2

        MOV     R0,R2               ; Return it in R0

        Pull    "R1-R12,PC"

; -----------

DMIDriverName
        = "PowerWAVE Linear Handler",0
        ALIGN
 ]
        END
@


1.6
log
@Expand tabs
Detail:
  s/* - Expand all tabs, to avoid space/tab use inconsistencies within some files and to match general ROOL code formatting
Admin:
  Binary unchanged


Version 1.17. Not tagged
@
text
@d30 1
a30 1
installDMIDriver
d33 1
a33 2
        Push    "lr"
        SUB     sp,sp,#32
d71 1
a71 2
        ADD     sp,sp,#32
        Pull    "PC"
d79 1
a79 1
DMIDriverInstall
d85 1
a85 1
        STMDB R13!,{R1-R12}
d113 1
a113 1
        LDMIA   R13!,{R1-R12,PC}
d117 1
a117 1
DMIDriverRemove
d121 1
a121 1
        STMDB   R13!,{R0-R2}
d129 1
a129 1
        LDMIA   R13!,{R0-R2,PC}
d133 1
a133 1
DMIDriverSampleRate
d139 1
a139 1
        STMDB   R13!,{R1-R12}
d189 1
a189 1
        LDMIA   R13!,{R1-R12,PC}
@


1.5
log
@Internationalised
Errors are now looked up via MessageTrans.
The driver names (registered via InstallDriver or to SoundDriver_Install) are now also looked up.
Note, the SharedSound_DriverInfo SWI used to return r2 as the pointer to a pointer to the name, the documentation seems vague as to what the intent was, but it seems more likely that a pointer to the name was what was intended. The name string is buffered (because it needs looking up for internationalisation anyway).

Tested briefly, inspecting the workspace for name lookups and sending a fake Service_SoundDriver service call. Two errors deliberatly triggered to check error text.

Version 1.15. Tagged as 'SharedSnd-1_15'
@
text
@d31 4
a34 4
	; Set up the registers and table for
	; PowerWAVE_LinearHandler and call installDriver
	Push    "lr"
	SUB	sp,sp,#32
d36 5
a40 5
	MOV	r0,#32
	ADR	r1,DMIDriverToken
	MOV	r2,sp
	BL	msgLookupToken
	MOV	r3,sp				; Driver name
d42 1
a42 1
	ADD	R0,R12,#work_DriverEntryTable  ; Get table address
d44 2
a45 2
	ADR	R1,DMIDriverInstall           ; Install entry
	STR	R1,[R0,#driverEntry_Install]
d47 2
a48 2
	ADR	R1,DMIDriverRemove            ; Remove entry
	STR	R1,[R0,#driverEntry_Remove]
d50 2
a51 2
	ADR	R1,DMIDriverSampleRate        ; Sample rate entry
	STR	R1,[R0,#driverEntry_SampleRate]
d53 2
a54 2
	MOV	R1,#0                             ; No volume entry
	STR	R1,[R0,#driverEntry_Volume]
d56 2
a57 2
	MOV	R1,#0
	STR	R1,[R0,#driverEntry_Mixer]       ; No mixer entry
d60 1
a60 1
	LDR	R1,[R12,#work_privateWord]       ; Parameter
d62 1
a62 1
	MOV	R2,#0                             ; Flags
d70 1
a70 1
	BL	installDriver
d72 1
a72 1
	ADD	sp,sp,#32
d76 2
a77 2
	DCB	"NmPow",0
	ALIGN
d82 6
a87 6
	; Install driver using PowerWAVE_LinearHandler
	;  R0  = Handler address
	;  R1  = Parameter to pass
	;  R12 = parameter for driver
	;  R14 already on stack
	STMDB R13!,{R1-R12}
d89 2
a90 2
	MOV	R5,R0                   ; Temorary store R0 and R1
	MOV	R6,R1
d92 2
a93 2
	MOV	R0,#0                   ; Get current handler to see if already installed
	SWI	XPowerWAVE_LinearHandler
d97 2
a98 2
	CMP	R1,R5                   ; Same handler?
	CMPEQ	R2,R6                   ; Same parameter?
d100 1
a100 1
	BEQ	DMIDriverInstallExit ; Jump out 'cos already there
d104 5
a108 5
	; Now install new driver
	MOV	R0,#1                   ; Function code install
	MOV	R1,R5                   ; Address
	MOV	R2,R6                   ; Parameter
	SWI	XPowerWAVE_LinearHandler
d110 2
a111 2
	MOV	R0,R5                   ; Restore R0 if successful
	MOVVS	R0,#0                   ; Or 0 if error
d115 1
a115 1
	LDMIA	R13!,{R1-R12,PC}
d120 2
a121 2
	; Remove driver using PowerWAVE_LinearHandler
	;  R14 already on stack
d123 1
a123 1
	STMDB	R13!,{R0-R2}
d125 5
a129 5
	; To remove handler set new handler to 0
	MOV	R0,#1       ; Function code install
	MOV	R1,#0       ; Null handler
	MOV	R2,#0
	SWI	XPowerWAVE_LinearHandler
d131 1
a131 1
	LDMIA	R13!,{R0-R2,PC}
d136 13
a148 13
	; Choose rate and/or return current rate
	;  R0 = 0 to read
	;     > 0 to set to R0 = frequency
	; On exit:
	;  R0 = current frequency
	STMDB	R13!,{R1-R12}

	CMP	R0,#0
	BEQ	DMIDriverSampleRateRead

	; Set the rate to R0
	; Find the nearest
	MOV	R4,R0              ; R4 = rate required
d150 2
a151 2
	MOV	R0,#0              ; Read number of rates available
	SWI	XPowerWAVE_SampleRate  ; R1 = number of rates available
d153 1
a153 1
	MOV	R5,R1              ; R5 = Upper limit
d156 10
a165 10
	MOV	R0,#2              ; Convert from index to rate
	SWI	XPowerWAVE_SampleRate  ; R2 = rate
	CMP	R2,R4
	BLT	DMIDriverSampleRateClosest  ; Best rate is between R1 and R5

	CMP	R1,#1              ; Are there any more rates
	MOVNE	R5,R1              ; Change upper limit
	MOVNE	R6,R2              ; Store upper rate
	SUBNE	R1,R1,#1           ; decrement index
	BNE	DMIDriverSampleRateLoop  ; Try again
d168 2
a169 2
	CMP	R1,R5                      ; No range to check
	BEQ	DMIDriverSampleRateSet
d171 4
a174 4
	; R2 = lower rate, R1 = index
	; R6 = upper rate, R5 = index
	SUB	R2,R4,R2
	SUB	R6,R6,R4
d176 2
a177 2
	CMP	R2,R6       ; Who is nearest
	MOVGT	R1,R5       ; If nearest to R6 then set index to R5
d180 1
a180 1
	; Chosen index is R1
d182 2
a183 2
	MOV	R0,#3              ; Select rate from index in R1
	SWI	XPowerWAVE_SampleRate
d186 2
a187 2
	MOV	R0,#1
	SWI	XPowerWAVE_SampleRate  ; Frequency returned in R2
d189 1
a189 1
	MOV	R0,R2               ; Return it in R0
d191 1
a191 1
	LDMIA	R13!,{R1-R12,PC}
d196 2
a197 2
	= "PowerWAVE Linear Handler",0
	ALIGN
d199 1
a199 1
	END
@


1.4
log
@Changed to use NdrDebug instead of local debug functions
Changed GET of filenames to use <name>.<extension> form.
Built, but not tested.

Version 1.13. Tagged as 'SharedSnd-1_13'
@
text
@d33 8
a40 1
	Push    "R14"
a63 2
	ADR	R3,DMIDriverName              ; Driver name

d72 1
d75 4
@


1.3
log
@  No longer uses non-X SWIs in module code
Detail:
  A few of these were careless typos, others were already X SWIs but the
  symbol names didn't reflect the fact, and in other cases there was no code
  path to deal with error cases. All now fixed. Also fixed all the assembly
  time warnings (at least for 32-bit ROM builds).
Admin:
  No longer prevents the Raspberry Pi ROM init from completing.

Version 1.11. Tagged as 'SharedSnd-1_11'
@
text
@d59 5
a63 30
 [ debug
	SWI	XOS_WriteS
	= "Install DMI driver.....",0
	ALIGN
	SWI	XOS_NewLine

	SWI	XOS_WriteS
	= " Table = ",0
	ALIGN
	MOV	R10,R0
	BL	printR10

	SWI	XOS_WriteS
	= " Parameter = ",0
	ALIGN
	MOV	R10,R1
	BL	printR10

	SWI	XOS_WriteS
	= " Flags = ",0
	ALIGN
	MOV	R10,R2
	BL	printR10

	SWI	XOS_WriteS
	= " Name = ",0
	ALIGN
	MOV	R10,R3
	BL	printR10
 ]
d85 1
a85 7
 [ debug
	SWI	XOS_WriteS
	= " Current handler = ",0
	ALIGN
	MOV	R10,R1
	BL	printR10
 ]
d92 1
a92 7
 [ debug
	SWI	XOS_WriteS
	= " Install new handler = ",0
	ALIGN
	MOV	R10,R5
	BL	printR10
 ]
@


1.2
log
@  Module scrutinised for problems, and many found and fixed.
Detail:
  * Module flags word and header entry reinstated.
  * Many exits from SWIs had lost their 32-bit compatibility.
  * Unconditional TEQP made conditional, and an MSR replaced with an MRS.
  * A few unnecessary mode checks and alternate returns simplified because
    transient callbacks and 8-bit fill code have never needed to preserve
    processor flags.
  * Driver mixer calling bug fixed again.
  * Spelling and grammatical errors in comments and error messages re-fixed.
  * Other insignificant stuff.
Admin:
  Still untested, but worth trying in a 32-bit build now.

Version 1.01. Tagged as 'SharedSnd-1_01'
@
text
@d33 1
a33 1
	STMDB	R13!,{R14}
d92 1
a92 1
	LDMIA	R13!,{PC}
d178 1
a178 1
	SWI	PowerWAVE_SampleRate  ; R1 = number of rates available
d184 1
a184 1
	SWI	PowerWAVE_SampleRate  ; R2 = rate
d210 1
a210 1
	SWI	PowerWAVE_SampleRate
d214 1
a214 1
	SWI	PowerWAVE_SampleRate  ; Frequency returned in R2
@


1.1
log
@  Import of version 1.00 of SharedSound from WSS - this is a merge of
  RISC OS Ltd, ESP and Pace sources. I've added the Makefile, Mk* and
  VersionNum files.

Detail (courtesy of WSS):
  * Incorporates fixes made to 0.58c to fix the callbacks on sound
    rate changes.

  * Incorporates RISC OS Ltd changes to response to
    TaskManager_Acknowledgements service.

  * Includes 8 bit Log and PowerWave drivers.

  * Now built with Objasm, not BASIC assembler.

  * SharedSound_HandlerInfo SWI fixed to conform to spec. Also
    extended to accept r0 = 0 on entry, in which case r0 = number of
    first registered handler (or 0 for none) on exit; R1-R5 corrupted.

    Therefore the following code enumerates handlers:

    REM Get first handler number.
    SYS "SharedSound_HandlerInfo",0 TO next% ; flags%
    REM While no errors, and not finished
    WHILE (next% <> 0) AND ((flags% AND 1) = 0)
     SYS"SharedSound_HandlerInfo",next% TO next%,a%,b%,c%,d%,e%
    ENDWHILE

  * Sends Service_Sound (&54) with reason code 6 (SharedSound Starting)
    on (callback after) initialisation.

  * Sends Service_Sound (&54) with reason code 7 (SharedSound Dying)
    on finalisation.

  * Some small optimisations

  * Version bumped to 1.00 (to allow RISC OS Ltd space to make changes
    to their versions).

  * Table of helpful fill code routines now passed to handlers in R8.

  * SharedSound reinitialises correctly on lower layers reinitialising.

  * More care taken to remove outstanding callbacks on finalise.

  * Dual 26/32 bit version.

Admin:
  * Not tested by us.

  * 8-bit sound system code is known not to be ROM safe. However, it is
    currently switched out (see the doLog option in s.Gets).

  * This version *will not work* on a 32-bit system. There are at least two
    issues with it that I've spotted with a quick glance through the code -
    the lack of the module flags word, and an unconditional TEQP instruction.
    This version has been checked in nevertheless as a record of what WSS
    delivered to us.

Version 1.00. Tagged as 'SharedSnd-1_00'
@
text
@d92 1
a92 1
	LDMIA	R13!,{PC}^
d158 1
a158 1
	LDMIA	R13!,{R0-R2,PC}^
@

