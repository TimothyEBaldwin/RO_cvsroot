head	1.5;
access;
symbols
	SharedSnd-0_49:1.4
	bavison_SharedSnd-0_48:1.3
	SharedSnd-0_48:1.2
	Spin_merge:1.1.2.2
	afrost_NC2_Generic:1.1.2.2
	afrost_Funai01-33:1.1.2.2
	smiddle_0_43:1.1.2.1
	Spinner:1.1.0.2;
locks; strict;
comment	@# @;


1.5
date	2001.06.28.18.11.57;	author bavison;	state dead;
branches;
next	1.4;

1.4
date	2001.01.16.15.28.02;	author bavison;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.15.14.04.16;	author bavison;	state Exp;
branches;
next	1.2;

1.2
date	98.11.02.16.36.11;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	97.11.06.14.18.05;	author smiddle;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	97.11.06.14.18.05;	author smiddle;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	97.11.06.14.44.06;	author smiddle;	state Exp;
branches;
next	;


desc
@Files for new SharedSound build
@


1.5
log
@  Import of version 1.00 of SharedSound from WSS - this is a merge of
  RISC OS Ltd, ESP and Pace sources. I've added the Makefile, Mk* and
  VersionNum files.

Detail (courtesy of WSS):
  * Incorporates fixes made to 0.58c to fix the callbacks on sound
    rate changes.

  * Incorporates RISC OS Ltd changes to response to
    TaskManager_Acknowledgements service.

  * Includes 8 bit Log and PowerWave drivers.

  * Now built with Objasm, not BASIC assembler.

  * SharedSound_HandlerInfo SWI fixed to conform to spec. Also
    extended to accept r0 = 0 on entry, in which case r0 = number of
    first registered handler (or 0 for none) on exit; R1-R5 corrupted.

    Therefore the following code enumerates handlers:

    REM Get first handler number.
    SYS "SharedSound_HandlerInfo",0 TO next% ; flags%
    REM While no errors, and not finished
    WHILE (next% <> 0) AND ((flags% AND 1) = 0)
     SYS"SharedSound_HandlerInfo",next% TO next%,a%,b%,c%,d%,e%
    ENDWHILE

  * Sends Service_Sound (&54) with reason code 6 (SharedSound Starting)
    on (callback after) initialisation.

  * Sends Service_Sound (&54) with reason code 7 (SharedSound Dying)
    on finalisation.

  * Some small optimisations

  * Version bumped to 1.00 (to allow RISC OS Ltd space to make changes
    to their versions).

  * Table of helpful fill code routines now passed to handlers in R8.

  * SharedSound reinitialises correctly on lower layers reinitialising.

  * More care taken to remove outstanding callbacks on finalise.

  * Dual 26/32 bit version.

Admin:
  * Not tested by us.

  * 8-bit sound system code is known not to be ROM safe. However, it is
    currently switched out (see the doLog option in s.Gets).

  * This version *will not work* on a 32-bit system. There are at least two
    issues with it that I've spotted with a quick glance through the code -
    the lack of the module flags word, and an unconditional TEQP instruction.
    This version has been checked in nevertheless as a record of what WSS
    delivered to us.

Version 1.00. Tagged as 'SharedSnd-1_00'
@
text
@/* Copyright (c) 1995, Expressive Software Projects
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Expressive Software Projects nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL EXPRESSIVE SOFTWARE PROJECTS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
DEFPROCLinear
LOCAL er$
er$="Linear"
PRINT "PROCLinear"
[OPT I%

\ ------------------------- Linear driver --------------------------

\ ---------
.installLinearDriver%      \ Set up the registers and table for
                           \ Sound_LinearHandler and call installDriver
    STMDB R13!,{R14}

    ADD   R0,R12,#work_DriverEntryTable%  \ Get table address

    ADR   R1,linearDriverInstall%           \ Install entry
    STR   R1,[R0,#driverEntry_Install%]

    ADR   R1,linearDriverRemove%            \ Remove entry
    STR   R1,[R0,#driverEntry_Remove%]

    ADR   R1,linearDriverSampleRate%        \ Sample rate entry
    STR   R1,[R0,#driverEntry_SampleRate%]

    MOV   R1,#0                             \ No volume entry
    STR   R1,[R0,#driverEntry_Volume%]

    MOV   R1,#0
    STR   R1,[R0,#driverEntry_Mixer%]       \ No mixer entry


    LDR   R1,[R12,#work_privateWord%]       \ Parameter

    MOV   R2,#0                             \ Flags

    ADR   R3,linearDriverName%              \ Driver name

]
IF debug% THEN
[OPT I%
    SWI "XOS_WriteS"
    EQUS "Install linear driver....."+CHR$(0):ALIGN
    SWI "XOS_NewLine"
    SWI "XOS_WriteS"
    EQUS " Table = "+CHR$(0):ALIGN
    MOV  R10,R0
    BL   printR10
    SWI "XOS_WriteS"
    EQUS " Parameter = "+CHR$(0):ALIGN
    MOV  R10,R1
    BL   printR10
    SWI "XOS_WriteS"
    EQUS " Flags = "+CHR$(0):ALIGN
    MOV  R10,R2
    BL   printR10
    SWI "XOS_WriteS"
    EQUS " Name = "+CHR$(0):ALIGN
    MOV  R10,R3
    BL   printR10
]
ENDIF
[OPT I%

    BL    installDriver%

    LDMIA R13!,{PC}

\ ------

.linearDriverInstall%   \ Install driver using Sound_LinearHandler
                        \ R0  = Handler address
                        \ R1  = Parameter to pass
                        \ R12 = parameter for driver
                        \ R14 already on stack
    STMDB R13!,{R1-R12}

    MOV   R5,R0                   \ Temorary store R0 and R1
    MOV   R6,R1

    MOV   R0,#0                   \ Get current handler to see if already installed
    SWI   XSound_LinearHandler%

    CMP   R1,R5                   \ Same handler?
    CMPEQ R2,R6                   \ Same parameter?

    BEQ   linearDriverInstallExit% \ Jump out 'cos already there

    \ Now install new driver

    MOV   R0,#1                   \ Function code install
    MOV   R1,R5                   \ Address
    MOV   R2,R6                   \ Parameter
    SWI   XSound_LinearHandler%

    MOV   R0,R5                   \ Restore R0 if successful
    MOVVS R0,#0                   \ Or 0 if error

.linearDriverInstallExit%

    LDMIA R13!,{R1-R12,PC}

\ -----------

.linearDriverRemove%  \ Remove driver using Sound_LinearHandler
                      \ R14 already on stack

    STMDB R13!,{R0-R2}

    \ To remove handler set new handler to 0

    MOV   R0,#1       \ Function code install
    MOV   R1,#0       \ Null handler
    MOV   R2,#0
    SWI   XSound_LinearHandler%

    LDMIA R13!,{R0-R2,PC}

\ -----------

.linearDriverSampleRate%  \ Choose rate and/or return current rate
                          \ R0 = 0 to read
                          \    > 0 to set to R0 = frequency
                          \ On exit:
                          \ R0 = current frequency
    STMDB R13!,{R1-R12}

    CMP   R0,#0
    BEQ   linearDriverSampleRateRead%

    \ Set the rate to R0

    \ Find the nearest

     MOV   R4,R0              \ R4 = rate required

     MOV   R0,#0              \ Read number of rates available
     SWI   Sound_SampleRate%  \ R1 = number of rates available

     MOV   R5,R1              \ R5 = Upper limit

.linearDriverSampleRateLoop%

     MOV   R0,#2              \ Convert from index to rate
     SWI   Sound_SampleRate%  \ R2 = rate
     CMP   R2,R4
     BLT   linearDriverSampleRateClosest%  \ Best rate is between R1 and R5

     CMP   R1,#1              \ Are there any more rates
     MOVNE R5,R1              \ Change upper limit
     MOVNE R6,R2              \ Store upper rate
     SUBNE R1,R1,#1           \ decrement index
     BNE   linearDriverSampleRateLoop%  \ Try again

.linearDriverSampleRateClosest%   \ Check for nearest between R1 and R5

     CMP   R1,R5                      \ No range to check
     BEQ   linearDriverSampleRateSet%

     \ R2 = lower rate, R1 = index
     \ R6 = upper rate, R5 = index

     SUB   R2,R4,R2
     SUB   R6,R6,R4

     CMP   R2,R6       \ Who is nearest
     MOVGT R1,R5       \ If nearest to R6 then set index to R5

.linearDriverSampleRateSet%

     \ Chosen index is R1

     MOV   R0,#3              \ Select rate from index in R1
     SWI   Sound_SampleRate%

.linearDriverSampleRateRead%

    MOV   R0,#1
    SWI   Sound_SampleRate%  \ Frequency returned in R2

    MOV   R0,R2               \ Return it in R0

    LDMIA R13!,{R1-R12,PC}

\ -----------

.linearDriverName% EQUS "Sound Linear Handler"
                   EQUB 0
                   ALIGN
]
ENDPROC
@


1.4
log
@  See Detail.
Detail:
  * 32-bit compatible
  * srccommitted (and gets version number from VersionNum, even though it's
    written in BASIC)
  * added install rule and MkInstall file to install module in correct place
    within an ARMovie installation
Admin:
  Not tested.

Version 0.49. Tagged as 'SharedSnd-0_49'
@
text
@@


1.3
log
@Changed things so that the detokenised BASIC source (in the c directory) has
no line numbers present (LISTO 8). The detokenised source's raison d'etre is
to allow easier CVS diffs, but line numbers would defeat this purpose whenever
the change involves inserting more than a handful of line numbers.

No other changes - this version is committed and tagged purely as a reference
point for future updates. Tag used is 'bavison_SharedSnd-0_48'.
@
text
@d91 1
a91 1
    LDMIA R13!,{PC}^
d125 1
a125 1
    LDMIA R13!,{R1-R12,PC}^
d141 1
a141 1
    LDMIA R13!,{R0-R2,PC}^
d207 1
a207 1
    LDMIA R13!,{R1-R12,PC}^
@


1.2
log
@Spinner branch merged
@
text
@d26 190
a215 190
   10DEFPROCLinear
   20LOCAL er$
   30er$="Linear"
   40PRINT "PROCLinear"
   50[OPT I%
   60
   70\ ------------------------- Linear driver --------------------------
   80
   90\ ---------
  100.installLinearDriver%      \ Set up the registers and table for
  110                           \ Sound_LinearHandler and call installDriver
  120    STMDB R13!,{R14}
  130
  140    ADD   R0,R12,#work_DriverEntryTable%  \ Get table address
  150
  160    ADR   R1,linearDriverInstall%           \ Install entry
  170    STR   R1,[R0,#driverEntry_Install%]
  180
  190    ADR   R1,linearDriverRemove%            \ Remove entry
  200    STR   R1,[R0,#driverEntry_Remove%]
  210
  220    ADR   R1,linearDriverSampleRate%        \ Sample rate entry
  230    STR   R1,[R0,#driverEntry_SampleRate%]
  240
  250    MOV   R1,#0                             \ No volume entry
  260    STR   R1,[R0,#driverEntry_Volume%]
  270
  280    MOV   R1,#0
  290    STR   R1,[R0,#driverEntry_Mixer%]       \ No mixer entry
  300
  310
  320    LDR   R1,[R12,#work_privateWord%]       \ Parameter
  330
  340    MOV   R2,#0                             \ Flags
  350
  360    ADR   R3,linearDriverName%              \ Driver name
  370
  380]
  390IF debug% THEN
  400[OPT I%
  410    SWI "XOS_WriteS"
  420    EQUS "Install linear driver....."+CHR$(0):ALIGN
  430    SWI "XOS_NewLine"
  440    SWI "XOS_WriteS"
  450    EQUS " Table = "+CHR$(0):ALIGN
  460    MOV  R10,R0
  470    BL   printR10
  480    SWI "XOS_WriteS"
  490    EQUS " Parameter = "+CHR$(0):ALIGN
  500    MOV  R10,R1
  510    BL   printR10
  520    SWI "XOS_WriteS"
  530    EQUS " Flags = "+CHR$(0):ALIGN
  540    MOV  R10,R2
  550    BL   printR10
  560    SWI "XOS_WriteS"
  570    EQUS " Name = "+CHR$(0):ALIGN
  580    MOV  R10,R3
  590    BL   printR10
  600]
  610ENDIF
  620[OPT I%
  630
  640    BL    installDriver%
  650
  660    LDMIA R13!,{PC}^
  670
  680\ ------
  690
  700.linearDriverInstall%   \ Install driver using Sound_LinearHandler
  710                        \ R0  = Handler address
  720                        \ R1  = Parameter to pass
  730                        \ R12 = parameter for driver
  740                        \ R14 already on stack
  750    STMDB R13!,{R1-R12}
  760
  770    MOV   R5,R0                   \ Temorary store R0 and R1
  780    MOV   R6,R1
  790
  800    MOV   R0,#0                   \ Get current handler to see if already installed
  810    SWI   XSound_LinearHandler%
  820
  830    CMP   R1,R5                   \ Same handler?
  840    CMPEQ R2,R6                   \ Same parameter?
  850
  860    BEQ   linearDriverInstallExit% \ Jump out 'cos already there
  870
  880    \ Now install new driver
  890
  900    MOV   R0,#1                   \ Function code install
  910    MOV   R1,R5                   \ Address
  920    MOV   R2,R6                   \ Parameter
  930    SWI   XSound_LinearHandler%
  940
  950    MOV   R0,R5                   \ Restore R0 if successful
  960    MOVVS R0,#0                   \ Or 0 if error
  970
  980.linearDriverInstallExit%
  990
 1000    LDMIA R13!,{R1-R12,PC}^
 1010
 1020\ -----------
 1030
 1040.linearDriverRemove%  \ Remove driver using Sound_LinearHandler
 1050                      \ R14 already on stack
 1060
 1070    STMDB R13!,{R0-R2}
 1080
 1090    \ To remove handler set new handler to 0
 1100
 1110    MOV   R0,#1       \ Function code install
 1120    MOV   R1,#0       \ Null handler
 1130    MOV   R2,#0
 1140    SWI   XSound_LinearHandler%
 1150
 1160    LDMIA R13!,{R0-R2,PC}^
 1170
 1180\ -----------
 1190
 1200.linearDriverSampleRate%  \ Choose rate and/or return current rate
 1210                          \ R0 = 0 to read
 1220                          \    > 0 to set to R0 = frequency
 1230                          \ On exit:
 1240                          \ R0 = current frequency
 1250    STMDB R13!,{R1-R12}
 1260
 1270    CMP   R0,#0
 1280    BEQ   linearDriverSampleRateRead%
 1290
 1300    \ Set the rate to R0
 1310
 1320    \ Find the nearest
 1330
 1340     MOV   R4,R0              \ R4 = rate required
 1350
 1360     MOV   R0,#0              \ Read number of rates available
 1370     SWI   Sound_SampleRate%  \ R1 = number of rates available
 1380
 1390     MOV   R5,R1              \ R5 = Upper limit
 1400
 1410.linearDriverSampleRateLoop%
 1420
 1430     MOV   R0,#2              \ Convert from index to rate
 1440     SWI   Sound_SampleRate%  \ R2 = rate
 1450     CMP   R2,R4
 1460     BLT   linearDriverSampleRateClosest%  \ Best rate is between R1 and R5
 1470
 1480     CMP   R1,#1              \ Are there any more rates
 1490     MOVNE R5,R1              \ Change upper limit
 1500     MOVNE R6,R2              \ Store upper rate
 1510     SUBNE R1,R1,#1           \ decrement index
 1520     BNE   linearDriverSampleRateLoop%  \ Try again
 1530
 1540.linearDriverSampleRateClosest%   \ Check for nearest between R1 and R5
 1550
 1560     CMP   R1,R5                      \ No range to check
 1570     BEQ   linearDriverSampleRateSet%
 1580
 1590     \ R2 = lower rate, R1 = index
 1600     \ R6 = upper rate, R5 = index
 1610
 1620     SUB   R2,R4,R2
 1630     SUB   R6,R6,R4
 1640
 1650     CMP   R2,R6       \ Who is nearest
 1660     MOVGT R1,R5       \ If nearest to R6 then set index to R5
 1670
 1680.linearDriverSampleRateSet%
 1690
 1700     \ Chosen index is R1
 1710
 1720     MOV   R0,#3              \ Select rate from index in R1
 1730     SWI   Sound_SampleRate%
 1740
 1750.linearDriverSampleRateRead%
 1760
 1770    MOV   R0,#1
 1780    SWI   Sound_SampleRate%  \ Frequency returned in R2
 1790
 1800    MOV   R0,R2               \ Return it in R0
 1810
 1820    LDMIA R13!,{R1-R12,PC}^
 1830
 1840\ -----------
 1850
 1860.linearDriverName% EQUS "Sound Linear Handler"
 1870                   EQUB 0
 1880                   ALIGN
 1890]
 1900ENDPROC
@


1.1
log
@file Linear was initially added on branch Spinner.
@
text
@d1 215
@


1.1.2.1
log
@New layout SharedSound with text files rather than BASIC files.
@
text
@a0 158
/* Copyright (c) 1995, Expressive Software Projects
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Expressive Software Projects nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL EXPRESSIVE SOFTWARE PROJECTS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
   10DEFPROCLinear
   20LOCAL er$
   30er$="Linear"
   40PRINT "PROCLinear"
   50[OPT I%
   70\ ------------------------- Linear driver --------------------------
   90\ ---------
  100.installLinearDriver%      \ Set up the registers and table for
  110                           \ Sound_LinearHandler and call installDriver
  120    STMDB R13!,{R14}
  140    ADD   R0,R12,#work_DriverEntryTable%  \ Get table address
  160    ADR   R1,linearDriverInstall%           \ Install entry
  170    STR   R1,[R0,#driverEntry_Install%]
  190    ADR   R1,linearDriverRemove%            \ Remove entry
  200    STR   R1,[R0,#driverEntry_Remove%]
  220    ADR   R1,linearDriverSampleRate%        \ Sample rate entry
  230    STR   R1,[R0,#driverEntry_SampleRate%]
  250    MOV   R1,#0                             \ No volume entry
  260    STR   R1,[R0,#driverEntry_Volume%]
  280    MOV   R1,#0
  290    STR   R1,[R0,#driverEntry_Mixer%]       \ No mixer entry
  320    LDR   R1,[R12,#work_privateWord%]       \ Parameter
  340    MOV   R2,#0                             \ Flags
  360    ADR   R3,linearDriverName%              \ Driver name
  380]
  390IF debug% THEN
  400[OPT I%
  410    SWI "XOS_WriteS"
  420    EQUS "Install linear driver....."+CHR$(0):ALIGN
  430    SWI "XOS_NewLine"
  440    SWI "XOS_WriteS"
  450    EQUS " Table = "+CHR$(0):ALIGN
  460    MOV  R10,R0
  470    BL   printR10
  480    SWI "XOS_WriteS"
  490    EQUS " Parameter = "+CHR$(0):ALIGN
  500    MOV  R10,R1
  510    BL   printR10
  520    SWI "XOS_WriteS"
  530    EQUS " Flags = "+CHR$(0):ALIGN
  540    MOV  R10,R2
  550    BL   printR10
  560    SWI "XOS_WriteS"
  570    EQUS " Name = "+CHR$(0):ALIGN
  580    MOV  R10,R3
  590    BL   printR10
  600]
  610ENDIF
  620[OPT I%
  640    BL    installDriver%
  660    LDMIA R13!,{PC}^
  680\ ------
  700.linearDriverInstall%   \ Install driver using Sound_LinearHandler
  710                        \ R0  = Handler address
  720                        \ R1  = Parameter to pass
  730                        \ R12 = parameter for driver
  740                        \ R14 already on stack
  750    STMDB R13!,{R1-R12}
  770    MOV   R5,R0                   \ Temorary store R0 and R1
  780    MOV   R6,R1
  800    MOV   R0,#0                   \ Get current handler to see if already installed
  810    SWI   XSound_LinearHandler%
  830    CMP   R1,R5                   \ Same handler?
  840    CMPEQ R2,R6                   \ Same parameter?
  860    BEQ   linearDriverInstallExit% \ Jump out 'cos already there
  880    \ Now install new driver
  900    MOV   R0,#1                   \ Function code install
  910    MOV   R1,R5                   \ Address
  920    MOV   R2,R6                   \ Parameter
  930    SWI   XSound_LinearHandler%
  950    MOV   R0,R5                   \ Restore R0 if successful
  960    MOVVS R0,#0                   \ Or 0 if error
  980.linearDriverInstallExit%
 1000    LDMIA R13!,{R1-R12,PC}^
 1020\ -----------
 1040.linearDriverRemove%  \ Remove driver using Sound_LinearHandler
 1050                      \ R14 already on stack
 1070    STMDB R13!,{R0-R2}
 1090    \ To remove handler set new handler to 0
 1110    MOV   R0,#1       \ Function code install
 1120    MOV   R1,#0       \ Null handler
 1130    MOV   R2,#0
 1140    SWI   XSound_LinearHandler%
 1160    LDMIA R13!,{R0-R2,PC}^
 1180\ -----------
 1200.linearDriverSampleRate%  \ Choose rate and/or return current rate
 1210                          \ R0 = 0 to read
 1220                          \    > 0 to set to R0 = frequency
 1230                          \ On exit:
 1240                          \ R0 = current frequency
 1250    STMDB R13!,{R1-R12}
 1270    CMP   R0,#0
 1280    BEQ   linearDriverSampleRateRead%
 1300    \ Set the rate to R0
 1320    \ Find the nearest
 1340     MOV   R4,R0              \ R4 = rate required
 1360     MOV   R0,#0              \ Read number of rates available
 1370     SWI   Sound_SampleRate%  \ R1 = number of rates available
 1390     MOV   R5,R1              \ R5 = Upper limit
 1410.linearDriverSampleRateLoop%
 1430     MOV   R0,#2              \ Convert from index to rate
 1440     SWI   Sound_SampleRate%  \ R2 = rate
 1450     CMP   R2,R4
 1460     BLT   linearDriverSampleRateClosest%  \ Best rate is between R1 and R5
 1480     CMP   R1,#1              \ Are there any more rates
 1490     MOVNE R5,R1              \ Change upper limit
 1500     MOVNE R6,R2              \ Store upper rate
 1510     SUBNE R1,R1,#1           \ decrement index
 1520     BNE   linearDriverSampleRateLoop%  \ Try again
 1540.linearDriverSampleRateClosest%   \ Check for nearest between R1 and R5
 1560     CMP   R1,R5                      \ No range to check
 1570     BEQ   linearDriverSampleRateSet%
 1590     \ R2 = lower rate, R1 = index
 1600     \ R6 = upper rate, R5 = index
 1620     SUB   R2,R4,R2
 1630     SUB   R6,R6,R4
 1650     CMP   R2,R6       \ Who is nearest
 1660     MOVGT R1,R5       \ If nearest to R6 then set index to R5
 1680.linearDriverSampleRateSet%
 1700     \ Chosen index is R1
 1720     MOV   R0,#3              \ Select rate from index in R1
 1730     SWI   Sound_SampleRate%
 1750.linearDriverSampleRateRead%
 1770    MOV   R0,#1
 1780    SWI   Sound_SampleRate%  \ Frequency returned in R2
 1800    MOV   R0,R2               \ Return it in R0
 1820    LDMIA R13!,{R1-R12,PC}^
 1840\ -----------
 1860.linearDriverName% EQUS "Sound Linear Handler"
 1870                   EQUB 0
 1880                   ALIGN
 1890]
 1900ENDPROC
@


1.1.2.2
log
@New version: useful changes are bug fixed in removing callback
handlers (affects turning off the MIDI synth), and maintains number of
channels configured when callback buffers not supplied (stops volume
of RealAudio playback from fluctuating when MIDI Synth can't make its
mind up whether to created buffers or not.
Other changes adds CBAI and 8bit log output support (disabled) and
debugging code.
@
text
@a30 1
   60
a31 1
   80
a35 1
  130
a36 1
  150
a38 1
  180
a40 1
  210
a42 1
  240
a44 1
  270
a46 2
  300
  310
a47 1
  330
a48 1
  350
a49 1
  370
a74 1
  630
a75 1
  650
a76 1
  670
a77 1
  690
a83 1
  760
a85 1
  790
a87 1
  820
a89 1
  850
a90 1
  870
a91 1
  890
a95 1
  940
a97 1
  970
a98 1
  990
a99 1
 1010
a100 1
 1030
a102 1
 1060
a103 1
 1080
a104 1
 1100
a108 1
 1150
a109 1
 1170
a110 1
 1190
a116 1
 1260
a118 1
 1290
a119 1
 1310
a120 1
 1330
a121 1
 1350
a123 1
 1380
a124 1
 1400
a125 1
 1420
a129 1
 1470
a134 1
 1530
a135 1
 1550
a137 1
 1580
a139 1
 1610
a141 1
 1640
a143 1
 1670
a144 1
 1690
a145 1
 1710
a147 1
 1740
a148 1
 1760
a150 1
 1790
a151 1
 1810
a152 1
 1830
a153 1
 1850
@
