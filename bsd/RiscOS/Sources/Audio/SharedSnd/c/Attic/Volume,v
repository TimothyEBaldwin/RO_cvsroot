head	1.4;
access;
symbols
	SharedSnd-0_49:1.3
	bavison_SharedSnd-0_48:1.3
	SharedSnd-0_48:1.2
	Spin_merge:1.1.2.2
	afrost_NC2_Generic:1.1.2.2
	afrost_Funai01-33:1.1.2.2
	smiddle_0_43:1.1.2.1
	Spinner:1.1.0.2;
locks; strict;
comment	@# @;


1.4
date	2001.06.28.18.11.57;	author bavison;	state dead;
branches;
next	1.3;

1.3
date	2001.01.15.14.04.16;	author bavison;	state Exp;
branches;
next	1.2;

1.2
date	98.11.02.16.36.19;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	97.11.06.14.18.15;	author smiddle;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	97.11.06.14.18.17;	author smiddle;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	97.11.06.14.44.12;	author smiddle;	state Exp;
branches;
next	;


desc
@Files for new SharedSound build
@


1.4
log
@  Import of version 1.00 of SharedSound from WSS - this is a merge of
  RISC OS Ltd, ESP and Pace sources. I've added the Makefile, Mk* and
  VersionNum files.

Detail (courtesy of WSS):
  * Incorporates fixes made to 0.58c to fix the callbacks on sound
    rate changes.

  * Incorporates RISC OS Ltd changes to response to
    TaskManager_Acknowledgements service.

  * Includes 8 bit Log and PowerWave drivers.

  * Now built with Objasm, not BASIC assembler.

  * SharedSound_HandlerInfo SWI fixed to conform to spec. Also
    extended to accept r0 = 0 on entry, in which case r0 = number of
    first registered handler (or 0 for none) on exit; R1-R5 corrupted.

    Therefore the following code enumerates handlers:

    REM Get first handler number.
    SYS "SharedSound_HandlerInfo",0 TO next% ; flags%
    REM While no errors, and not finished
    WHILE (next% <> 0) AND ((flags% AND 1) = 0)
     SYS"SharedSound_HandlerInfo",next% TO next%,a%,b%,c%,d%,e%
    ENDWHILE

  * Sends Service_Sound (&54) with reason code 6 (SharedSound Starting)
    on (callback after) initialisation.

  * Sends Service_Sound (&54) with reason code 7 (SharedSound Dying)
    on finalisation.

  * Some small optimisations

  * Version bumped to 1.00 (to allow RISC OS Ltd space to make changes
    to their versions).

  * Table of helpful fill code routines now passed to handlers in R8.

  * SharedSound reinitialises correctly on lower layers reinitialising.

  * More care taken to remove outstanding callbacks on finalise.

  * Dual 26/32 bit version.

Admin:
  * Not tested by us.

  * 8-bit sound system code is known not to be ROM safe. However, it is
    currently switched out (see the doLog option in s.Gets).

  * This version *will not work* on a 32-bit system. There are at least two
    issues with it that I've spotted with a quick glance through the code -
    the lack of the module flags word, and an unconditional TEQP instruction.
    This version has been checked in nevertheless as a record of what WSS
    delivered to us.

Version 1.00. Tagged as 'SharedSnd-1_00'
@
text
@/* Copyright (c) 1995, Expressive Software Projects
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Expressive Software Projects nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL EXPRESSIVE SOFTWARE PROJECTS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
DEFPROCVolume
LOCAL er$,debug%
er$="Volume"
debug%=FALSE
PRINT "PROCVolume"
[OPT I%

\ -------------------------------- Volume routines ------------------------


.scaleAllHandlerVolumes%  \ Set the actual volumes for all handlers
                          \ typically called after driver volume has changed
                          \ should also be called when System volume has changed

   STMDB R13!,{R0-R12,R14}

   ADD   R0,R12,#work_handlerTable%   \ Get handler table
   MOV   R6,#handlerMax%              \ Count

.scaleAllHandlerVolumesLoop%

   LDR   R1,[R0,#handler_Address%]    \ Is there a driver here?
   CMP   R1,#0
   BLNE  scaleHandlerVolume%

   ADD   R0,R0,#handlerTableLen%
   SUBS  R6,R6,#1
   BNE   scaleAllHandlerVolumesLoop%

   LDMIA R13!,{R0-R12,PC}

\ ----------

.scaleHandlerVolume%  \ Using all available volume info
                      \ set up the real volume for the handler
                      \ as passed to fill routine
                      \ On entry R0 = handler table

   STMDB R13!,{R0-R5,R14}

   LDR   R4,[R0,#handler_Volume%]

   \ Scale according to R0 = Driver volume (if driver cannot use it)
   \                    R4 = Handler volume

   MOV   R5,R0         \ Store handler address

   \ Get the driver scaled volume

   ADD   R0,R12,#work_driverTable%
   LDR   R1,[R0,#driver_Address%]
   CMP   R1,#0                        \ Check driver exists
   BEQ   scaleHandlerVolumeStore%     \ Don't change volume if no driver

   LDR   R0,[R0,#driver_VolumeScaled%]   \ Driver scaled volume
]
IF debug% THEN
[OPT I%
    SWI "XOS_WriteS"
    EQUS "Driver volume = "+CHR$(0):ALIGN
    MOV  R10,R0
    BL   printR10
]
ENDIF
[OPT I%

   MOV   R1,#0
   SUB   R1,R1,#1
   CMP   R0,R1                   \ No driver scaling required

   BEQ   scaleHandlerVolumeStore%

   \     R0 = LR, R4 = LR, Scale accordingly....

   MOV   R1,R0,LSR #16  \ R1 = L1
   MOV   R0,R0,LSL #16
   MOV   R0,R0,LSR #16  \ R0 = R1

   MOV   R3,R4,LSR #16  \ R3 = L2
   MOV   R4,R4,LSL #16
   MOV   R4,R4,LSR #16  \ R4 = R2

   MUL   R2,R0,R4
   MOV   R2,R2,LSR #16  \ R2 = R

   MUL   R0,R1,R3
   MOV   R0,R0,LSR #16  \ R0 = L

   ADD   R4,R2,R0,LSL #16 \ R4 = LLRR

.scaleHandlerVolumeStore%

]
IF debug% THEN
[OPT I%
    SWI "XOS_WriteS"
    EQUS "Scaled volume = "+CHR$(0):ALIGN
    MOV  R10,R4
    BL   printR10
]
ENDIF
[OPT I%


   STR   R4,[R5,#handler_VolumeScaled%]

   LDMIA R13!,{R0-R5,PC}



]
ENDPROC
@


1.3
log
@Changed things so that the detokenised BASIC source (in the c directory) has
no line numbers present (LISTO 8). The detokenised source's raison d'etre is
to allow easier CVS diffs, but line numbers would defeat this purpose whenever
the change involves inserting more than a handful of line numbers.

No other changes - this version is committed and tagged purely as a reference
point for future updates. Tag used is 'bavison_SharedSnd-0_48'.
@
text
@@


1.2
log
@Spinner branch merged
@
text
@d26 112
a137 112
   10DEFPROCVolume
   20LOCAL er$,debug%
   30er$="Volume"
   40debug%=FALSE
   50PRINT "PROCVolume"
   60[OPT I%
   70
   80\ -------------------------------- Volume routines ------------------------
   90
  100
  110.scaleAllHandlerVolumes%  \ Set the actual volumes for all handlers
  120                          \ typically called after driver volume has changed
  130                          \ should also be called when System volume has changed
  140
  150   STMDB R13!,{R0-R12,R14}
  160
  170   ADD   R0,R12,#work_handlerTable%   \ Get handler table
  180   MOV   R6,#handlerMax%              \ Count
  190
  200.scaleAllHandlerVolumesLoop%
  210
  220   LDR   R1,[R0,#handler_Address%]    \ Is there a driver here?
  230   CMP   R1,#0
  240   BLNE  scaleHandlerVolume%
  250
  260   ADD   R0,R0,#handlerTableLen%
  270   SUBS  R6,R6,#1
  280   BNE   scaleAllHandlerVolumesLoop%
  290
  300   LDMIA R13!,{R0-R12,PC}
  310
  320\ ----------
  330
  340.scaleHandlerVolume%  \ Using all available volume info
  350                      \ set up the real volume for the handler
  360                      \ as passed to fill routine
  370                      \ On entry R0 = handler table
  380
  390   STMDB R13!,{R0-R5,R14}
  400
  410   LDR   R4,[R0,#handler_Volume%]
  420
  430   \ Scale according to R0 = Driver volume (if driver cannot use it)
  440   \                    R4 = Handler volume
  450
  460   MOV   R5,R0         \ Store handler address
  470
  480   \ Get the driver scaled volume
  490
  500   ADD   R0,R12,#work_driverTable%
  510   LDR   R1,[R0,#driver_Address%]
  520   CMP   R1,#0                        \ Check driver exists
  530   BEQ   scaleHandlerVolumeStore%     \ Don't change volume if no driver
  540
  550   LDR   R0,[R0,#driver_VolumeScaled%]   \ Driver scaled volume
  560]
  570IF debug% THEN
  580[OPT I%
  590    SWI "XOS_WriteS"
  600    EQUS "Driver volume = "+CHR$(0):ALIGN
  610    MOV  R10,R0
  620    BL   printR10
  630]
  640ENDIF
  650[OPT I%
  660
  670   MOV   R1,#0
  680   SUB   R1,R1,#1
  690   CMP   R0,R1                   \ No driver scaling required
  700
  710   BEQ   scaleHandlerVolumeStore%
  720
  730   \     R0 = LR, R4 = LR, Scale accordingly....
  740
  750   MOV   R1,R0,LSR #16  \ R1 = L1
  760   MOV   R0,R0,LSL #16
  770   MOV   R0,R0,LSR #16  \ R0 = R1
  780
  790   MOV   R3,R4,LSR #16  \ R3 = L2
  800   MOV   R4,R4,LSL #16
  810   MOV   R4,R4,LSR #16  \ R4 = R2
  820
  830   MUL   R2,R0,R4
  840   MOV   R2,R2,LSR #16  \ R2 = R
  850
  860   MUL   R0,R1,R3
  870   MOV   R0,R0,LSR #16  \ R0 = L
  880
  890   ADD   R4,R2,R0,LSL #16 \ R4 = LLRR
  900
  910.scaleHandlerVolumeStore%
  920
  930]
  940IF debug% THEN
  950[OPT I%
  960    SWI "XOS_WriteS"
  970    EQUS "Scaled volume = "+CHR$(0):ALIGN
  980    MOV  R10,R4
  990    BL   printR10
 1000]
 1010ENDIF
 1020[OPT I%
 1030
 1040
 1050   STR   R4,[R5,#handler_VolumeScaled%]
 1060
 1070   LDMIA R13!,{R0-R5,PC}
 1080
 1090
 1100
 1110]
 1120ENDPROC
@


1.1
log
@file Volume was initially added on branch Spinner.
@
text
@d1 137
@


1.1.2.1
log
@New layout SharedSound with text files rather than BASIC files.
@
text
@a0 103
/* Copyright (c) 1995, Expressive Software Projects
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Expressive Software Projects nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL EXPRESSIVE SOFTWARE PROJECTS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
   10DEFPROCVolume
   20LOCAL er$,debug%
   30er$="Volume"
   40debug%=FALSE
   50PRINT "PROCVolume"
   60[OPT I%
   80\ -------------------------------- Volume routines ------------------------
  110.scaleAllHandlerVolumes%  \ Set the actual volumes for all handlers
  120                          \ typically called after driver volume has changed
  130                          \ should also be called when System volume has changed
  150   STMDB R13!,{R0-R12,R14}
  170   ADD   R0,R12,#work_handlerTable%   \ Get handler table
  180   MOV   R6,#handlerMax%              \ Count
  200.scaleAllHandlerVolumesLoop%
  220   LDR   R1,[R0,#handler_Address%]    \ Is there a driver here?
  230   CMP   R1,#0
  240   BLNE  scaleHandlerVolume%
  260   ADD   R0,R0,#handlerTableLen%
  270   SUBS  R6,R6,#1
  280   BNE   scaleAllHandlerVolumesLoop%
  300   LDMIA R13!,{R0-R12,PC}
  320\ ----------
  340.scaleHandlerVolume%  \ Using all available volume info
  350                      \ set up the real volume for the handler
  360                      \ as passed to fill routine
  370                      \ On entry R0 = handler table
  390   STMDB R13!,{R0-R5,R14}
  410   LDR   R4,[R0,#handler_Volume%]
  430   \ Scale according to R0 = Driver volume (if driver cannot use it)
  440   \                    R4 = Handler volume
  460   MOV   R5,R0         \ Store handler address
  480   \ Get the driver scaled volume
  500   ADD   R0,R12,#work_driverTable%
  510   LDR   R1,[R0,#driver_Address%]
  520   CMP   R1,#0                        \ Check driver exists
  530   BEQ   scaleHandlerVolumeStore%     \ Don't change volume if no driver
  550   LDR   R0,[R0,#driver_VolumeScaled%]   \ Driver scaled volume
  560]
  570IF debug% THEN
  580[OPT I%
  590    SWI "XOS_WriteS"
  600    EQUS "Driver volume = "+CHR$(0):ALIGN
  610    MOV  R10,R0
  620    BL   printR10
  630]
  640ENDIF
  650[OPT I%
  670   MOV   R1,#0
  680   SUB   R1,R1,#1
  690   CMP   R0,R1                   \ No driver scaling required
  710   BEQ   scaleHandlerVolumeStore%
  730   \     R0 = LR, R4 = LR, Scale accordingly....
  750   MOV   R1,R0,LSR #16  \ R1 = L1
  760   MOV   R0,R0,LSL #16
  770   MOV   R0,R0,LSR #16  \ R0 = R1
  790   MOV   R3,R4,LSR #16  \ R3 = L2
  800   MOV   R4,R4,LSL #16
  810   MOV   R4,R4,LSR #16  \ R4 = R2
  830   MUL   R2,R0,R4
  840   MOV   R2,R2,LSR #16  \ R2 = R
  860   MUL   R0,R1,R3
  870   MOV   R0,R0,LSR #16  \ R0 = L
  890   ADD   R4,R2,R0,LSL #16 \ R4 = LLRR
  910.scaleHandlerVolumeStore%
  930]
  940IF debug% THEN
  950[OPT I%
  960    SWI "XOS_WriteS"
  970    EQUS "Scaled volume = "+CHR$(0):ALIGN
  980    MOV  R10,R4
  990    BL   printR10
 1000]
 1010ENDIF
 1020[OPT I%
 1050   STR   R4,[R5,#handler_VolumeScaled%]
 1070   LDMIA R13!,{R0-R5,PC}
 1110]
 1120ENDPROC
@


1.1.2.2
log
@New version: useful changes are bug fixed in removing callback
handlers (affects turning off the MIDI synth), and maintains number of
channels configured when callback buffers not supplied (stops volume
of RealAudio playback from fluctuating when MIDI Synth can't make its
mind up whether to created buffers or not.
Other changes adds CBAI and 8bit log output support (disabled) and
debugging code.
@
text
@a31 1
   70
a32 2
   90
  100
a35 1
  140
a36 1
  160
a38 1
  190
a39 1
  210
a42 1
  250
a45 1
  290
a46 1
  310
a47 1
  330
a51 1
  380
a52 1
  400
a53 1
  420
a55 1
  450
a56 1
  470
a57 1
  490
a61 1
  540
a72 1
  660
a75 1
  700
a76 1
  720
a77 1
  740
a80 1
  780
a83 1
  820
a85 1
  850
a87 1
  880
a88 1
  900
a89 1
  920
a99 2
 1030
 1040
a100 1
 1060
a101 3
 1080
 1090
 1100
@
