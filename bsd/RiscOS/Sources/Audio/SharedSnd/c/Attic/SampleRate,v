head	1.5;
access;
symbols
	SharedSnd-0_49:1.4
	bavison_SharedSnd-0_48:1.3
	SharedSnd-0_48:1.2
	Spin_merge:1.1.2.2
	afrost_NC2_Generic:1.1.2.2
	afrost_Funai01-33:1.1.2.2
	smiddle_0_43:1.1.2.1
	Spinner:1.1.0.2;
locks; strict;
comment	@# @;


1.5
date	2001.06.28.18.11.57;	author bavison;	state dead;
branches;
next	1.4;

1.4
date	2001.01.16.15.28.02;	author bavison;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.15.14.04.16;	author bavison;	state Exp;
branches;
next	1.2;

1.2
date	98.11.02.16.36.16;	author kbracey;	state Exp;
branches;
next	1.1;

1.1
date	97.11.06.14.18.10;	author smiddle;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	97.11.06.14.18.11;	author smiddle;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	97.11.06.14.44.10;	author smiddle;	state Exp;
branches;
next	;


desc
@Files for new SharedSound build
@


1.5
log
@  Import of version 1.00 of SharedSound from WSS - this is a merge of
  RISC OS Ltd, ESP and Pace sources. I've added the Makefile, Mk* and
  VersionNum files.

Detail (courtesy of WSS):
  * Incorporates fixes made to 0.58c to fix the callbacks on sound
    rate changes.

  * Incorporates RISC OS Ltd changes to response to
    TaskManager_Acknowledgements service.

  * Includes 8 bit Log and PowerWave drivers.

  * Now built with Objasm, not BASIC assembler.

  * SharedSound_HandlerInfo SWI fixed to conform to spec. Also
    extended to accept r0 = 0 on entry, in which case r0 = number of
    first registered handler (or 0 for none) on exit; R1-R5 corrupted.

    Therefore the following code enumerates handlers:

    REM Get first handler number.
    SYS "SharedSound_HandlerInfo",0 TO next% ; flags%
    REM While no errors, and not finished
    WHILE (next% <> 0) AND ((flags% AND 1) = 0)
     SYS"SharedSound_HandlerInfo",next% TO next%,a%,b%,c%,d%,e%
    ENDWHILE

  * Sends Service_Sound (&54) with reason code 6 (SharedSound Starting)
    on (callback after) initialisation.

  * Sends Service_Sound (&54) with reason code 7 (SharedSound Dying)
    on finalisation.

  * Some small optimisations

  * Version bumped to 1.00 (to allow RISC OS Ltd space to make changes
    to their versions).

  * Table of helpful fill code routines now passed to handlers in R8.

  * SharedSound reinitialises correctly on lower layers reinitialising.

  * More care taken to remove outstanding callbacks on finalise.

  * Dual 26/32 bit version.

Admin:
  * Not tested by us.

  * 8-bit sound system code is known not to be ROM safe. However, it is
    currently switched out (see the doLog option in s.Gets).

  * This version *will not work* on a 32-bit system. There are at least two
    issues with it that I've spotted with a quick glance through the code -
    the lack of the module flags word, and an unconditional TEQP instruction.
    This version has been checked in nevertheless as a record of what WSS
    delivered to us.

Version 1.00. Tagged as 'SharedSnd-1_00'
@
text
@/* Copyright (c) 1995, Expressive Software Projects
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Expressive Software Projects nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL EXPRESSIVE SOFTWARE PROJECTS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
DEFPROCSampleRate
LOCAL er$
er$="Sample Rate"
PRINT "PROCSampleRate"
[OPT I%

\ ------------------------------- Sample rate routines ----------------------

.newRate%  \ Used from handler routine to sort out details
           \ R0 = New frequency

   STMDB R13!,{R0-R12,R14}

   \ Need new sample period in R1

    LDR   R6,rateConst%
    MOV   R2,R0
    BL    clockCalc%

    MOV   R1,R3   \ Return sample period in R1


\   LDR   R3,rateConst%   \ R3.R2
\   MOV   R2,#0
\   MOV   R4,R0    \ DIV frequency
\
\   BL    div      \ R3 = Sample period
\
\   MOV   R1,R3

   BL    newSampleRateSet%

   LDMIA R13!,{R0-R12,PC}



\ ------------------



.newSampleRate% \ The sample rate has changed,  sort it out
                \ On entry R0 = 0 to read, >0 to set new rate = R0

   STMDB R13!,{R0-R12,R14}

]
IF debug% THEN
[OPT I%
    SWI "XOS_WriteS"
    EQUS "New sample rate"+CHR$(0):ALIGN
    SWI "XOS_NewLine"
]
ENDIF
[OPT I%

   BL    sampleRate%  \ Returns R0 = frequency, R1 = period

   LDR   R2,[R12,#work_SampleFrequency%] \ Has the rate changed?
   CMP   R0,R2
   BEQ   newSampleRateExit%  \ Nothing to do

   BL    stopSound%        \ Stop play and wait for fill to finish

   STR   R0,[R12,#work_SampleFrequency%]  \ Store frequency
   STR   R1,[R12,#work_SamplePeriod%]     \ Store sample period

   \     then calculate the fractional step for each handler

   ADD   R1,R12,#work_handlerTable%   \ Get handler table

   MOV   R6,#handlerMax%              \ Count

.newSampleRateLoop%

   LDR   R0,[R1,#handler_Address%]    \ Is there a handler here?
   CMP   R0,#0
   BEQ   newSampleRateNext%

   LDR   R0,[R1,#handler_SampleFrequency%]
   CMP   R0,#0
   BEQ   newSampleRateNext%                    \ No rate stored

   BL    sampleRateFraction%

   STR   R0,[R1,#handler_Fraction%]

.newSampleRateNext%

   ADD   R1,R1,#handlerTableLen%
   SUBS  R6,R6,#1
   BNE   newSampleRateLoop%

   BL    startSound%       \ Start sound again

.newSampleRateExit%

    LDMIA R13!,{R0-R12,PC}

\ ---------

.newSampleRateSet%

    STMDB R13!,{R14}

   STR   R0,[R12,#work_SampleFrequency%]  \ Store frequency
   STR   R1,[R12,#work_SamplePeriod%]     \ Store sample period

   \     then calculate the fractional step for each handler

   ADD   R1,R12,#work_handlerTable%   \ Get handler table

   MOV   R6,#handlerMax%              \ Count

.newSampleRateSetLoop%

   LDR   R0,[R1,#handler_Address%]    \ Is there a handler here?
   CMP   R0,#0
   BEQ   newSampleRateSetNext%

   LDR   R0,[R1,#handler_SampleFrequency%]
   CMP   R0,#0
   BEQ   newSampleRateSetNext%                    \ No rate stored

   BL    sampleRateFraction%

   STR   R0,[R1,#handler_Fraction%]

.newSampleRateSetNext%

   ADD   R1,R1,#handlerTableLen%
   SUBS  R6,R6,#1
   BNE   newSampleRateSetLoop%

   LDMIA R13!,{PC}


\ ---------

.sampleRate%        \ Set or read sample rate

                    \ On entry:
                    \ R0 = 0 to read
                    \    > 0 for sample frequency required
                    \ On exit:
                    \ R0 = current frequency      (provided by driver)
                    \ R1 = current sample period  (calculated by shared sound)

    STMDB R13!,{R2-R12,R14}

    BL    driverSampleRate%                \ Get current rate from driver
    CMP   R0,#0                            \ Failed if 0
    BEQ   sampleRateExit%

    \ R0  will return sample frequency.....

    \ Now calculate sample period

\    LDR   R3,rateConst%   \ R3.R2
\    MOV   R2,#0
\    MOV   R4,R0    \ DIV frequency
\
\    BL    div

    LDR   R6,rateConst%
    MOV   R2,R0
    BL    clockCalc%

    MOV   R1,R3   \ Return sample period in R1

.sampleRateExit%

    LDMIA R13!,{R2-R12,PC}

\----------

.sampleRateFraction%    \ Get the fractional step required for given rate and current rate
                        \ On entry:
                        \   R0 = Frequency required
                        \ On exit:
                        \   R0 = Fraction in 8.24
    STMDB R13!,{R1-R12,R14}

    LDR   R2,[R12,#work_SampleFrequency%]    \ Current frequency
    MOV   R6,R0                              \ Frequency required

    BL    clockCalc%       \ Returns fraction in R3

    MOV   R0,R3            \ Return in R0

    LDMIA R13!,{R1-R12,PC}

\ ------------------

.rateConst%   EQUD &3D090000
\

.clockCalc% \ Calculate  fraction count
            \ Pass rate in R6, actual rate in R2
  STMDB R13!,{R14}

  MOV R9,R2      \ Store actual rate
  MOV R4,R2      \ actual rate ready for next calculation

  MOV R2,#0      \ Calculate whole part
  MOV R3,R6
  \ R4=actual rate
  BL div
  MOV R10,R3
                \ Calculate fraction
                \ R2 = Remainder from above
  MOV R3,#0
  \ R4=actual rate
  MOV R4,R9
  BL div

  MOV R3,R3,LSR #8 \ 24 Bit fraction
  ADD R3,R3,R10,LSL #24 \ 8 Bit whole part

  LDMIA R13!,{PC}
\
.div \ Divide R3.R2 by R4 , R3 = result, R2 = remainder
  MOV R5,#32 \ Number of bits in divisor
.dloop
  MOVS  R3,R3,LSL #1
  MOV   R2,R2,LSL #1
  ORRCS R2,R2,#1
  CMPS  R2,R4
  BCC   dnext
  SBC   R2,R2,R4
  ADD   R3,R3,#1
.dnext
  SUBS  R5,R5,#1
  BNE dloop
  MOV PC,R14
\
]
ENDPROC
@


1.4
log
@  See Detail.
Detail:
  * 32-bit compatible
  * srccommitted (and gets version number from VersionNum, even though it's
    written in BASIC)
  * added install rule and MkInstall file to install module in correct place
    within an ARMovie installation
Admin:
  Not tested.

Version 0.49. Tagged as 'SharedSnd-0_49'
@
text
@@


1.3
log
@Changed things so that the detokenised BASIC source (in the c directory) has
no line numbers present (LISTO 8). The detokenised source's raison d'etre is
to allow easier CVS diffs, but line numbers would defeat this purpose whenever
the change involves inserting more than a handful of line numbers.

No other changes - this version is committed and tagged purely as a reference
point for future updates. Tag used is 'bavison_SharedSnd-0_48'.
@
text
@d244 1
a244 1
  LDMIA R13!,{PC}^
@


1.2
log
@Spinner branch merged
@
text
@d26 237
a262 237
   10DEFPROCSampleRate
   20LOCAL er$
   30er$="Sample Rate"
   40PRINT "PROCSampleRate"
   50[OPT I%
   60
   70\ ------------------------------- Sample rate routines ----------------------
   80
   90.newRate%  \ Used from handler routine to sort out details
  100           \ R0 = New frequency
  110
  120   STMDB R13!,{R0-R12,R14}
  130
  140   \ Need new sample period in R1
  150
  160    LDR   R6,rateConst%
  170    MOV   R2,R0
  180    BL    clockCalc%
  190
  200    MOV   R1,R3   \ Return sample period in R1
  210
  220
  230\   LDR   R3,rateConst%   \ R3.R2
  240\   MOV   R2,#0
  250\   MOV   R4,R0    \ DIV frequency
  260\
  270\   BL    div      \ R3 = Sample period
  280\
  290\   MOV   R1,R3
  300
  310   BL    newSampleRateSet%
  320
  330   LDMIA R13!,{R0-R12,PC}
  340
  350
  360
  370\ ------------------
  380
  390
  400
  410.newSampleRate% \ The sample rate has changed,  sort it out
  420                \ On entry R0 = 0 to read, >0 to set new rate = R0
  430
  440   STMDB R13!,{R0-R12,R14}
  450
  460]
  470IF debug% THEN
  480[OPT I%
  490    SWI "XOS_WriteS"
  500    EQUS "New sample rate"+CHR$(0):ALIGN
  510    SWI "XOS_NewLine"
  520]
  530ENDIF
  540[OPT I%
  550
  560   BL    sampleRate%  \ Returns R0 = frequency, R1 = period
  570
  580   LDR   R2,[R12,#work_SampleFrequency%] \ Has the rate changed?
  590   CMP   R0,R2
  600   BEQ   newSampleRateExit%  \ Nothing to do
  610
  620   BL    stopSound%        \ Stop play and wait for fill to finish
  630
  640   STR   R0,[R12,#work_SampleFrequency%]  \ Store frequency
  650   STR   R1,[R12,#work_SamplePeriod%]     \ Store sample period
  660
  670   \     then calculate the fractional step for each handler
  680
  690   ADD   R1,R12,#work_handlerTable%   \ Get handler table
  700
  710   MOV   R6,#handlerMax%              \ Count
  720
  730.newSampleRateLoop%
  740
  750   LDR   R0,[R1,#handler_Address%]    \ Is there a handler here?
  760   CMP   R0,#0
  770   BEQ   newSampleRateNext%
  780
  790   LDR   R0,[R1,#handler_SampleFrequency%]
  800   CMP   R0,#0
  810   BEQ   newSampleRateNext%                    \ No rate stored
  820
  830   BL    sampleRateFraction%
  840
  850   STR   R0,[R1,#handler_Fraction%]
  860
  870.newSampleRateNext%
  880
  890   ADD   R1,R1,#handlerTableLen%
  900   SUBS  R6,R6,#1
  910   BNE   newSampleRateLoop%
  920
  930   BL    startSound%       \ Start sound again
  940
  950.newSampleRateExit%
  960
  970    LDMIA R13!,{R0-R12,PC}
  980
  990\ ---------
 1000
 1010.newSampleRateSet%
 1020
 1030    STMDB R13!,{R14}
 1040
 1050   STR   R0,[R12,#work_SampleFrequency%]  \ Store frequency
 1060   STR   R1,[R12,#work_SamplePeriod%]     \ Store sample period
 1070
 1080   \     then calculate the fractional step for each handler
 1090
 1100   ADD   R1,R12,#work_handlerTable%   \ Get handler table
 1110
 1120   MOV   R6,#handlerMax%              \ Count
 1130
 1140.newSampleRateSetLoop%
 1150
 1160   LDR   R0,[R1,#handler_Address%]    \ Is there a handler here?
 1170   CMP   R0,#0
 1180   BEQ   newSampleRateSetNext%
 1190
 1200   LDR   R0,[R1,#handler_SampleFrequency%]
 1210   CMP   R0,#0
 1220   BEQ   newSampleRateSetNext%                    \ No rate stored
 1230
 1240   BL    sampleRateFraction%
 1250
 1260   STR   R0,[R1,#handler_Fraction%]
 1270
 1280.newSampleRateSetNext%
 1290
 1300   ADD   R1,R1,#handlerTableLen%
 1310   SUBS  R6,R6,#1
 1320   BNE   newSampleRateSetLoop%
 1330
 1340   LDMIA R13!,{PC}
 1350
 1360
 1370\ ---------
 1380
 1390.sampleRate%        \ Set or read sample rate
 1400
 1410                    \ On entry:
 1420                    \ R0 = 0 to read
 1430                    \    > 0 for sample frequency required
 1440                    \ On exit:
 1450                    \ R0 = current frequency      (provided by driver)
 1460                    \ R1 = current sample period  (calculated by shared sound)
 1470
 1480    STMDB R13!,{R2-R12,R14}
 1490
 1500    BL    driverSampleRate%                \ Get current rate from driver
 1510    CMP   R0,#0                            \ Failed if 0
 1520    BEQ   sampleRateExit%
 1530
 1540    \ R0  will return sample frequency.....
 1550
 1560    \ Now calculate sample period
 1570
 1580\    LDR   R3,rateConst%   \ R3.R2
 1590\    MOV   R2,#0
 1600\    MOV   R4,R0    \ DIV frequency
 1610\
 1620\    BL    div
 1630
 1640    LDR   R6,rateConst%
 1650    MOV   R2,R0
 1660    BL    clockCalc%
 1670
 1680    MOV   R1,R3   \ Return sample period in R1
 1690
 1700.sampleRateExit%
 1710
 1720    LDMIA R13!,{R2-R12,PC}
 1730
 1740\----------
 1750
 1760.sampleRateFraction%    \ Get the fractional step required for given rate and current rate
 1770                        \ On entry:
 1780                        \   R0 = Frequency required
 1790                        \ On exit:
 1800                        \   R0 = Fraction in 8.24
 1810    STMDB R13!,{R1-R12,R14}
 1820
 1830    LDR   R2,[R12,#work_SampleFrequency%]    \ Current frequency
 1840    MOV   R6,R0                              \ Frequency required
 1850
 1860    BL    clockCalc%       \ Returns fraction in R3
 1870
 1880    MOV   R0,R3            \ Return in R0
 1890
 1900    LDMIA R13!,{R1-R12,PC}
 1910
 1920\ ------------------
 1930
 1940.rateConst%   EQUD &3D090000
 1950\
 1960
 1970.clockCalc% \ Calculate  fraction count
 1980            \ Pass rate in R6, actual rate in R2
 1990  STMDB R13!,{R14}
 2000
 2010  MOV R9,R2      \ Store actual rate
 2020  MOV R4,R2      \ actual rate ready for next calculation
 2030
 2040  MOV R2,#0      \ Calculate whole part
 2050  MOV R3,R6
 2060  \ R4=actual rate
 2070  BL div
 2080  MOV R10,R3
 2090                \ Calculate fraction
 2100                \ R2 = Remainder from above
 2110  MOV R3,#0
 2120  \ R4=actual rate
 2130  MOV R4,R9
 2140  BL div
 2150
 2160  MOV R3,R3,LSR #8 \ 24 Bit fraction
 2170  ADD R3,R3,R10,LSL #24 \ 8 Bit whole part
 2180
 2190  LDMIA R13!,{PC}^
 2200\
 2210.div \ Divide R3.R2 by R4 , R3 = result, R2 = remainder
 2220  MOV R5,#32 \ Number of bits in divisor
 2230.dloop
 2240  MOVS  R3,R3,LSL #1
 2250  MOV   R2,R2,LSL #1
 2260  ORRCS R2,R2,#1
 2270  CMPS  R2,R4
 2280  BCC   dnext
 2290  SBC   R2,R2,R4
 2300  ADD   R3,R3,#1
 2310.dnext
 2320  SUBS  R5,R5,#1
 2330  BNE dloop
 2340  MOV PC,R14
 2350\
 2360]
 2370ENDPROC
@


1.1
log
@file SampleRate was initially added on branch Spinner.
@
text
@d1 262
@


1.1.2.1
log
@New layout SharedSound with text files rather than BASIC files.
@
text
@a0 177
/* Copyright (c) 1995, Expressive Software Projects
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Expressive Software Projects nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL EXPRESSIVE SOFTWARE PROJECTS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
   10DEFPROCSampleRate
   20LOCAL er$
   30er$="Sample Rate"
   40PRINT "PROCSampleRate"
   50[OPT I%
   70\ ------------------------------- Sample rate routines ----------------------
   90.newRate%  \ Used from handler routine to sort out details
  100           \ R0 = New frequency
  120   STMDB R13!,{R0-R12,R14}
  140   \ Need new sample period in R1
  160    LDR   R6,rateConst%
  170    MOV   R2,R0
  180    BL    clockCalc%
  200    MOV   R1,R3   \ Return sample period in R1
  230\   LDR   R3,rateConst%   \ R3.R2
  240\   MOV   R2,#0
  250\   MOV   R4,R0    \ DIV frequency
  260\
  270\   BL    div      \ R3 = Sample period
  280\
  290\   MOV   R1,R3
  310   BL    newSampleRateSet%
  330   LDMIA R13!,{R0-R12,PC}
  370\ ------------------
  410.newSampleRate% \ The sample rate has changed,  sort it out
  420                \ On entry R0 = 0 to read, >0 to set new rate = R0
  440   STMDB R13!,{R0-R12,R14}
  460   BL    sampleRate%  \ Returns R0 = frequency, R1 = period
  480   LDR   R2,[R12,#work_SampleFrequency%] \ Has the rate changed?
  490   CMP   R0,R2
  500   BEQ   newSampleRateExit%  \ Nothing to do
  520   BL    stopSound%        \ Stop play and wait for fill to finish
  540   STR   R0,[R12,#work_SampleFrequency%]  \ Store frequency
  550   STR   R1,[R12,#work_SamplePeriod%]     \ Store sample period
  570   \     then calculate the fractional step for each handler
  590   ADD   R1,R12,#work_handlerTable%   \ Get handler table
  610   MOV   R6,#handlerMax%              \ Count
  630.newSampleRateLoop%
  650   LDR   R0,[R1,#handler_Address%]    \ Is there a handler here?
  660   CMP   R0,#0
  670   BEQ   newSampleRateNext%
  690   LDR   R0,[R1,#handler_SampleFrequency%]
  700   CMP   R0,#0
  710   BEQ   newSampleRateNext%                    \ No rate stored
  730   BL    sampleRateFraction%
  750   STR   R0,[R1,#handler_Fraction%]
  770.newSampleRateNext%
  790   ADD   R1,R1,#handlerTableLen%
  800   SUBS  R6,R6,#1
  810   BNE   newSampleRateLoop%
  830   BL    startSound%       \ Start sound again
  850.newSampleRateExit%
  870    LDMIA R13!,{R0-R12,PC}
  890\ ---------
  910.newSampleRateSet%
  930    STMDB R13!,{R14}
  950   STR   R0,[R12,#work_SampleFrequency%]  \ Store frequency
  960   STR   R1,[R12,#work_SamplePeriod%]     \ Store sample period
  980   \     then calculate the fractional step for each handler
 1000   ADD   R1,R12,#work_handlerTable%   \ Get handler table
 1020   MOV   R6,#handlerMax%              \ Count
 1040.newSampleRateSetLoop%
 1060   LDR   R0,[R1,#handler_Address%]    \ Is there a handler here?
 1070   CMP   R0,#0
 1080   BEQ   newSampleRateSetNext%
 1100   LDR   R0,[R1,#handler_SampleFrequency%]
 1110   CMP   R0,#0
 1120   BEQ   newSampleRateSetNext%                    \ No rate stored
 1140   BL    sampleRateFraction%
 1160   STR   R0,[R1,#handler_Fraction%]
 1180.newSampleRateSetNext%
 1200   ADD   R1,R1,#handlerTableLen%
 1210   SUBS  R6,R6,#1
 1220   BNE   newSampleRateSetLoop%
 1240   LDMIA R13!,{PC}
 1270\ ---------
 1290.sampleRate%        \ Set or read sample rate
 1310                    \ On entry:
 1320                    \ R0 = 0 to read
 1330                    \    > 0 for sample frequency required
 1340                    \ On exit:
 1350                    \ R0 = current frequency      (provided by driver)
 1360                    \ R1 = current sample period  (calculated by shared sound)
 1380    STMDB R13!,{R2-R12,R14}
 1400    BL    driverSampleRate%                \ Get current rate from driver
 1410    CMP   R0,#0                            \ Failed if 0
 1420    BEQ   sampleRateExit%
 1440    \ R0  will return sample frequency.....
 1460    \ Now calculate sample period
 1480\    LDR   R3,rateConst%   \ R3.R2
 1490\    MOV   R2,#0
 1500\    MOV   R4,R0    \ DIV frequency
 1510\
 1520\    BL    div
 1540    LDR   R6,rateConst%
 1550    MOV   R2,R0
 1560    BL    clockCalc%
 1580    MOV   R1,R3   \ Return sample period in R1
 1600.sampleRateExit%
 1620    LDMIA R13!,{R2-R12,PC}
 1640\----------
 1660.sampleRateFraction%    \ Get the fractional step required for given rate and current rate
 1670                        \ On entry:
 1680                        \   R0 = Frequency required
 1690                        \ On exit:
 1700                        \   R0 = Fraction in 8.24
 1710    STMDB R13!,{R1-R12,R14}
 1730    LDR   R2,[R12,#work_SampleFrequency%]    \ Current frequency
 1740    MOV   R6,R0                              \ Frequency required
 1760    BL    clockCalc%       \ Returns fraction in R3
 1780    MOV   R0,R3            \ Return in R0
 1800    LDMIA R13!,{R1-R12,PC}
 1820\ ------------------
 1840.rateConst%   EQUD &3D090000
 1850\
 1870.clockCalc% \ Calculate  fraction count
 1880            \ Pass rate in R6, actual rate in R2
 1890  STMDB R13!,{R14}
 1910  MOV R9,R2      \ Store actual rate
 1920  MOV R4,R2      \ actual rate ready for next calculation
 1940  MOV R2,#0      \ Calculate whole part
 1950  MOV R3,R6
 1960  \ R4=actual rate
 1970  BL div
 1980  MOV R10,R3
 1990                \ Calculate fraction
 2000                \ R2 = Remainder from above
 2010  MOV R3,#0
 2020  \ R4=actual rate
 2030  MOV R4,R9
 2040  BL div
 2060  MOV R3,R3,LSR #8 \ 24 Bit fraction
 2070  ADD R3,R3,R10,LSL #24 \ 8 Bit whole part
 2090  LDMIA R13!,{PC}^
 2100\
 2110.div \ Divide R3.R2 by R4 , R3 = result, R2 = remainder
 2120  MOV R5,#32 \ Number of bits in divisor
 2130.dloop
 2140  MOVS  R3,R3,LSL #1
 2150  MOV   R2,R2,LSL #1
 2160  ORRCS R2,R2,#1
 2170  CMPS  R2,R4
 2180  BCC   dnext
 2190  SBC   R2,R2,R4
 2200  ADD   R3,R3,#1
 2210.dnext
 2220  SUBS  R5,R5,#1
 2230  BNE dloop
 2240  MOV PC,R14
 2250\
 2260]
 2270ENDPROC
@


1.1.2.2
log
@New version: useful changes are bug fixed in removing callback
handlers (affects turning off the MIDI synth), and maintains number of
channels configured when callback buffers not supplied (stops volume
of RealAudio playback from fluctuating when MIDI Synth can't make its
mind up whether to created buffers or not.
Other changes adds CBAI and 8bit log output support (disabled) and
debugging code.
@
text
@a30 1
   60
a31 1
   80
a33 1
  110
a34 1
  130
a35 1
  150
a38 1
  190
a39 2
  210
  220
a46 1
  300
a47 1
  320
a48 3
  340
  350
  360
a49 3
  380
  390
  400
a51 1
  430
d53 125
a177 193
  450
  460]
  470IF debug% THEN
  480[OPT I%
  490    SWI "XOS_WriteS"
  500    EQUS "New sample rate"+CHR$(0):ALIGN
  510    SWI "XOS_NewLine"
  520]
  530ENDIF
  540[OPT I%
  550
  560   BL    sampleRate%  \ Returns R0 = frequency, R1 = period
  570
  580   LDR   R2,[R12,#work_SampleFrequency%] \ Has the rate changed?
  590   CMP   R0,R2
  600   BEQ   newSampleRateExit%  \ Nothing to do
  610
  620   BL    stopSound%        \ Stop play and wait for fill to finish
  630
  640   STR   R0,[R12,#work_SampleFrequency%]  \ Store frequency
  650   STR   R1,[R12,#work_SamplePeriod%]     \ Store sample period
  660
  670   \     then calculate the fractional step for each handler
  680
  690   ADD   R1,R12,#work_handlerTable%   \ Get handler table
  700
  710   MOV   R6,#handlerMax%              \ Count
  720
  730.newSampleRateLoop%
  740
  750   LDR   R0,[R1,#handler_Address%]    \ Is there a handler here?
  760   CMP   R0,#0
  770   BEQ   newSampleRateNext%
  780
  790   LDR   R0,[R1,#handler_SampleFrequency%]
  800   CMP   R0,#0
  810   BEQ   newSampleRateNext%                    \ No rate stored
  820
  830   BL    sampleRateFraction%
  840
  850   STR   R0,[R1,#handler_Fraction%]
  860
  870.newSampleRateNext%
  880
  890   ADD   R1,R1,#handlerTableLen%
  900   SUBS  R6,R6,#1
  910   BNE   newSampleRateLoop%
  920
  930   BL    startSound%       \ Start sound again
  940
  950.newSampleRateExit%
  960
  970    LDMIA R13!,{R0-R12,PC}
  980
  990\ ---------
 1000
 1010.newSampleRateSet%
 1020
 1030    STMDB R13!,{R14}
 1040
 1050   STR   R0,[R12,#work_SampleFrequency%]  \ Store frequency
 1060   STR   R1,[R12,#work_SamplePeriod%]     \ Store sample period
 1070
 1080   \     then calculate the fractional step for each handler
 1090
 1100   ADD   R1,R12,#work_handlerTable%   \ Get handler table
 1110
 1120   MOV   R6,#handlerMax%              \ Count
 1130
 1140.newSampleRateSetLoop%
 1150
 1160   LDR   R0,[R1,#handler_Address%]    \ Is there a handler here?
 1170   CMP   R0,#0
 1180   BEQ   newSampleRateSetNext%
 1190
 1200   LDR   R0,[R1,#handler_SampleFrequency%]
 1210   CMP   R0,#0
 1220   BEQ   newSampleRateSetNext%                    \ No rate stored
 1230
 1240   BL    sampleRateFraction%
 1250
 1260   STR   R0,[R1,#handler_Fraction%]
 1270
 1280.newSampleRateSetNext%
 1290
 1300   ADD   R1,R1,#handlerTableLen%
 1310   SUBS  R6,R6,#1
 1320   BNE   newSampleRateSetLoop%
 1330
 1340   LDMIA R13!,{PC}
 1350
 1360
 1370\ ---------
 1380
 1390.sampleRate%        \ Set or read sample rate
 1400
 1410                    \ On entry:
 1420                    \ R0 = 0 to read
 1430                    \    > 0 for sample frequency required
 1440                    \ On exit:
 1450                    \ R0 = current frequency      (provided by driver)
 1460                    \ R1 = current sample period  (calculated by shared sound)
 1470
 1480    STMDB R13!,{R2-R12,R14}
 1490
 1500    BL    driverSampleRate%                \ Get current rate from driver
 1510    CMP   R0,#0                            \ Failed if 0
 1520    BEQ   sampleRateExit%
 1530
 1540    \ R0  will return sample frequency.....
 1550
 1560    \ Now calculate sample period
 1570
 1580\    LDR   R3,rateConst%   \ R3.R2
 1590\    MOV   R2,#0
 1600\    MOV   R4,R0    \ DIV frequency
 1610\
 1620\    BL    div
 1630
 1640    LDR   R6,rateConst%
 1650    MOV   R2,R0
 1660    BL    clockCalc%
 1670
 1680    MOV   R1,R3   \ Return sample period in R1
 1690
 1700.sampleRateExit%
 1710
 1720    LDMIA R13!,{R2-R12,PC}
 1730
 1740\----------
 1750
 1760.sampleRateFraction%    \ Get the fractional step required for given rate and current rate
 1770                        \ On entry:
 1780                        \   R0 = Frequency required
 1790                        \ On exit:
 1800                        \   R0 = Fraction in 8.24
 1810    STMDB R13!,{R1-R12,R14}
 1820
 1830    LDR   R2,[R12,#work_SampleFrequency%]    \ Current frequency
 1840    MOV   R6,R0                              \ Frequency required
 1850
 1860    BL    clockCalc%       \ Returns fraction in R3
 1870
 1880    MOV   R0,R3            \ Return in R0
 1890
 1900    LDMIA R13!,{R1-R12,PC}
 1910
 1920\ ------------------
 1930
 1940.rateConst%   EQUD &3D090000
 1950\
 1960
 1970.clockCalc% \ Calculate  fraction count
 1980            \ Pass rate in R6, actual rate in R2
 1990  STMDB R13!,{R14}
 2000
 2010  MOV R9,R2      \ Store actual rate
 2020  MOV R4,R2      \ actual rate ready for next calculation
 2030
 2040  MOV R2,#0      \ Calculate whole part
 2050  MOV R3,R6
 2060  \ R4=actual rate
 2070  BL div
 2080  MOV R10,R3
 2090                \ Calculate fraction
 2100                \ R2 = Remainder from above
 2110  MOV R3,#0
 2120  \ R4=actual rate
 2130  MOV R4,R9
 2140  BL div
 2150
 2160  MOV R3,R3,LSR #8 \ 24 Bit fraction
 2170  ADD R3,R3,R10,LSL #24 \ 8 Bit whole part
 2180
 2190  LDMIA R13!,{PC}^
 2200\
 2210.div \ Divide R3.R2 by R4 , R3 = result, R2 = remainder
 2220  MOV R5,#32 \ Number of bits in divisor
 2230.dloop
 2240  MOVS  R3,R3,LSL #1
 2250  MOV   R2,R2,LSL #1
 2260  ORRCS R2,R2,#1
 2270  CMPS  R2,R4
 2280  BCC   dnext
 2290  SBC   R2,R2,R4
 2300  ADD   R3,R3,#1
 2310.dnext
 2320  SUBS  R5,R5,#1
 2330  BNE dloop
 2340  MOV PC,R14
 2350\
 2360]
 2370ENDPROC
@
