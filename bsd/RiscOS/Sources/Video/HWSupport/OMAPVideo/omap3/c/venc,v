head	1.3;
access;
symbols
	OMAPVideo-0_41:1.3
	OMAPVideo-0_40:1.2
	OMAPVideo-0_39:1.2
	OMAPVideo-0_38:1.2
	OMAPVideo-0_37:1.2
	OMAPVideo-0_36:1.2
	OMAPVideo-0_35:1.1
	OMAPVideo-0_34:1.1;
locks; strict;
comment	@# @;


1.3
date	2018.05.31.21.49.02;	author jlee;	state Exp;
branches;
next	1.2;
commitid	qHkabDo5zjgySuEA;

1.2
date	2015.05.31.18.21.35;	author jlee;	state Exp;
branches;
next	1.1;
commitid	G8GT764JNtMBXCny;

1.1
date	2015.05.17.17.50.20;	author jlee;	state Exp;
branches;
next	;
commitid	J3i0xRSaySaJePly;


desc
@@


1.3
log
@Big refactor, introduce GraphicsV overlay API support
Detail:
  This change introduces initial support for the GraphicsV overlay API.
  RGB & YUV overlays are supported, along with rotation and scaling.
  Vertical flipping isn't supported yet, and there are still a number of bugs to track down, along with some potential improvements.
  The code has also been refactored significantly, in an attempt to protect all critical state with spinlocks/mutexes (as appropriate), and to reduce the number of globals so that it's easier to see what's touching what. Previously very little locking was performed, which could lead to issues if VSyncs or synclost interrupts occurred during certain operations. Now, the data should be structured in such a way that this shouldn't cause problems.
  Notable things:
  * State which needs to be writable from interrupt handlers is protected by spinlocks
  * State which needs to be readable from interrupt handlers is protected by reader-writer spinlocks
  * State which doesn't need to be accessed from interrupt handlers is unprotected (mutexes can be introduced in the future to make the code SMP-safe)
  * Using non-alpha screen modes for the desktop will currently result in only "basic" overlays being supported (i.e. overlays which appear ontop of the desktop). In some cases this could be improved by falling back to a software pointer, but for now the only way to get Z-Order overlays is to use a screen mode with an alpha channel.
  * Memory allocation for overlays is abstracted via the buffer interface (h/buffer). This has three implementations: basic buffers for untransformed overlays, VRFB-transformed buffers for OMAP3, and TILER-transformed buffers for OMAP4.
  * Ultimately all overlay memory is allocated as physically contiguous pages within a PMP - although since TILER contains its own MMU this isn't strictly necessary on OMAP4
  * Overlay memory is mapped as write-through cacheable for CPU access; experimentation with different cache policies has yet to be performed. However a potential future optimisation would be to perform lazy unmapping of overlay buffers, reducing the map/unmap overhead in well-behaved code which only maps buffers when they're needed
Admin:
  Tested on BB-xM, Pandaboard


Version 0.41. Tagged as 'OMAPVideo-0_41'
@
text
@/*
 * Copyright (c) 2010, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include <stddef.h>
#include <string.h>

#include "Global/RISCOS.h"
#include "Global/HALEntries.h"
#include "swis.h"

#include "venc.h"
#include "regs.h"
#include "dispc.h"
#include "vars.h"
#include "consts.h"
#include "globals.h"

#include "DebugLib/DebugLib.h"

/* Current TV-out configuration */
static tvcfg_t tvcfg = { .type = TVOUT_NONE };

/* Actual TV-out state */
static tvcfg_t tvstate = { .type = TVOUT_NONE };
static bool tv_power_is_on = false;

static const venc_regs_t template_ntsc_601 =
{
	.f_control				= 0,
	.vidout_ctrl				= 1,
	.sync_ctrl				= 0x8040,
	.llen					= 0x359,
	.flens					= 0x20C,
	.hfltr_ctrl				= 0,
	.cc_carr_wss_carr			= 0x043F2631,
	.c_phase				= 0,
	.gain_u					= 0x102,
	.gain_v					= 0x16C,
	.gain_y					= 0x12F,
	.black_level				= 0x43,
	.blank_level				= 0x38,
	.x_color				= 0x7,
	.m_control				= 0x1,
	.bstamp_wss_data			= 0x38,
	.s_carr					= 0x21F07C1F,
	.line21					= 0,
	.ln_sel					= 0x01310011,
	.l21_wc_ctl				= 0x0000F003,
	.htrigger_vtrigger			= 0,

	.savid_eavid				= 0x069300F4,
	.flen_fal				= 0x0016020C,
	.lal_phase_reset			= 0x00060107,
	.hs_int_start_stop_x			= 0x008E0350,
	.hs_ext_start_stop_x			= 0x000F0359,
	.vs_int_start_x				= 0x01A00000,
	.vs_int_stop_x_vs_int_start_y		= 0x020701A0,
	.vs_int_stop_y_vs_ext_start_x		= 0x01AC0024,
	.vs_ext_stop_x_vs_ext_start_y		= 0x020D01AC,
	.vs_ext_stop_y				= 0x00000006,
	.avid_start_stop_x			= 0x03480078,
	.avid_start_stop_y			= 0x02060024,
	.fid_int_start_x_fid_int_start_y	= 0x0001008A,
	.fid_int_offset_y_fid_ext_start_x	= 0x01AC0106,
	.fid_ext_start_y_fid_ext_offset_y	= 0x01060006,
	.tvdetgp_int_start_stop_x		= 0x00140001,
	.tvdetgp_int_start_stop_y		= 0x00010001,
	.gen_ctrl				= 0x00F90000,
};

static const venc_regs_t template_pal_601 =
{
	.f_control				= 0,
	.vidout_ctrl				= 1,
	/* sync_ctrl - NOTE - FREE isn't set in the TRM listing, but it gets the
	 * testcard to work for me. But for some reason FREE isn't needed when
	 * the testcard is off (and the same seems to be true of NTSC output - the
	 * testcard only works with it on, but actual video output works regardless
	 */
	.sync_ctrl				= 0x8040,
	.llen					= 0x35F,
	.flens					= 0x270,
	.hfltr_ctrl				= 0,
	.cc_carr_wss_carr			= 0x2F7225ED,
	.c_phase				= 0,
	.gain_u					= 0x111,
	.gain_v					= 0x181,
	.gain_y					= 0x140,
	.black_level				= 0x3B,
	.blank_level				= 0x3B,
	.x_color				= 0x7,
	.m_control				= 0x2,
	.bstamp_wss_data			= 0x3F,
	.s_carr					= 0x2A098ACB,
	.line21					= 0,
	.ln_sel					= 0x01290015,
	.l21_wc_ctl				= 0x0000F603,
	.htrigger_vtrigger			= 0,

	.savid_eavid				= 0x06A70108,
	.flen_fal				= 0x00180270,
	.lal_phase_reset			= 0x00040135,
	.hs_int_start_stop_x			= 0x00880358,
	.hs_ext_start_stop_x			= 0x000F035F,
	.vs_int_start_x				= 0x01A70000,
	.vs_int_stop_x_vs_int_start_y		= 0x000001A7,
	.vs_int_stop_y_vs_ext_start_x		= 0x01AF0000,
	.vs_ext_stop_x_vs_ext_start_y		= 0x000101AF,
	.vs_ext_stop_y				= 0x00000025,
	.avid_start_stop_x			= 0x03530083,
	.avid_start_stop_y			= 0x026C002E,
	.fid_int_start_x_fid_int_start_y	= 0x0001008A,
	.fid_int_offset_y_fid_ext_start_x	= 0x002E0138,
	.fid_ext_start_y_fid_ext_offset_y	= 0x01380001,
	.tvdetgp_int_start_stop_x		= 0x00140001,
	.tvdetgp_int_start_stop_y		= 0x00010001,
	.gen_ctrl				= 0x00FF0000,
};

static const venc_regs_t *venc_templates[TVMODE_MAX] = {
	&template_ntsc_601, /* As per TRM */
	&template_pal_601, /* As per TRM. Broken? */
};

void venc_configure(tvmode mode,tvouttype type,bool showtestcard)
{
	tvcfg.mode = mode;
	tvcfg.type = type;
	tvcfg.testcard = showtestcard;
}

void venc_prepmode(modelocked_head_t *state,pixelformat format)
{
	/* Calculate an offset we can apply to the overlays in order to keep them centered
	   We take the border+porch timing values of the requested mode into account, to allow *TV to be used to fine-tune the position */
	const venc_regs_t *template = venc_templates[tvcfg.mode];
	int w = (REG_EXTRACT(template->avid_start_stop_x,VENC_AVID_START_STOP_X_AVID_STOP_X)-REG_EXTRACT(template->avid_start_stop_x,VENC_AVID_START_STOP_X_AVID_START_X)); 
	int h = (REG_EXTRACT(template->avid_start_stop_y,VENC_AVID_START_STOP_Y_AVID_STOP_Y)-REG_EXTRACT(template->avid_start_stop_y,VENC_AVID_START_STOP_Y_AVID_START_Y));

	int mode_w = state->mode.hbp+state->mode.width+state->mode.hfp;
	int mode_h = state->mode.vbp+state->mode.height+state->mode.vfp;
	state->x = (w-mode_w)/2 + state->mode.hbp;
	state->y = (h-mode_h)/2 + state->mode.vbp;
	/* Try and avoid gaps at the edge of the screen caused by buffer alignment restrictions */
	if (state->x < 0)
	{
		state->x &= ~buffer_alignment_pixels[format];
	}

	/* Make sure the width & height values in the timings reflect the actual display size, since that's what we rely on for overlay clipping */
	state->mode.width = w;
	state->mode.height = h/2;
	state->interlaced = true;

	/* Setting enabled to false here is a bit odd, but it's somewhat necessary since we don't have a general way of powering down heads yet (and doing it here avoids introducing modelocked locks from venc_setmode or similar) */
	state->enabled = (tvcfg.type != TVOUT_NONE);
}

void venc_setmode(void)
{
	bool ok;
	{
		const irqlocked_t *irqlocked = irqlocked_lock();
		/* Avoid pointless updates
		   Note that we can check the blank state & tv_power_is_on, but not the modelocked_head_t enable state, since the core setmode code deliberately sets enabled to false during mode changes (to avoid the core interacting with the head during the mode change) */
		ok = !memcmp(&tvcfg,&tvstate,sizeof(tvcfg_t)) && !irqlocked->heads[TARGET_TV].blanked && tv_power_is_on;
		irqlocked_unlock();
	}

	if (ok)
	{
		/* But at the least we do want to update the overlays */
		if(tvcfg.type != TVOUT_NONE)
		{
			int irqs;
			if(!begin_quick_hardware_update(&irqs))
			{
				/* TODO - Mark as pending! */
				return;
			}
			/* Apply features */
			const features_t *features = features_read_lock();
			omap3_apply_features(features);
			features_read_unlock();
			/* Update transparency settings*/
			omap3_flush_transparency_cfg(true);
			end_quick_hardware_update(irqs);
		}
		return;
	}
	dprintf(("","venc_setmode: Mode %d type %d testcard %d\n",tvcfg.mode,tvcfg.type,tvcfg.testcard));
	tvstate = tvcfg;
	if(tvcfg.type == TVOUT_NONE)
	{
		venc_disable();
		return;
	}
	/* Enable, as per flow in spruf98d 15.5.8.3 (p2336) */
	int irqs;
	if(!begin_slow_hardware_update(&irqs))
	{
		/* TODO - Mark as pending! */
		return;
	}
	/* Enable TV-out power if necessary */
	if(!tv_power_is_on && (hwconfig->mysize > offsetof(boardconfig_t,tvpower_func)) && (hwconfig->tvpower_func))
	{
		(hwconfig->tvpower_func)(dev,true);
	}
	tv_power_is_on = true;
	/* 1. Initialise the video encoder and the display controller configuration registers */
	/* TODO - Need to set DISPC_CONTROL_HT, DISPC_DIVISOR? */
	/* 0. Disable digital output! */
	int timeout;
	if (dispc->control & DISPC_CONTROL_DIGITALENABLE)
	{
		dispc->irqstatus = DISPC_IRQ_EVSYNC_EVEN | DISPC_IRQ_EVSYNC_ODD;
		dispc->control &= ~DISPC_CONTROL_DIGITALENABLE;
		/* Wait for current frame to finish */
		timeout=10000000;
		while(!(dispc->irqstatus & (DISPC_IRQ_EVSYNC_EVEN | DISPC_IRQ_EVSYNC_ODD)) && --timeout) {};
		if(!timeout)
		{
			dprintf(("","venc_setmode: Timeout waiting for EVSYNC (disable)\n"));
		}
	}
	/* X. Enable clocks first */
	dss->control |= DSS_CONTROL_VENC_CLOCK_4X_ENABLE | DSS_CONTROL_DAC_DEMEN | DSS_CONTROL_DAC_POWERDN_BGZ;
	/* 1. Soft reset */
	venc->f_control = VENC_F_CONTROL_RESET;
	timeout=1000000;
	while((venc->f_control & VENC_F_CONTROL_RESET) && --timeout) {};
	if(!timeout)
	{
		dprintf(("","venc_setmode: Timeout waiting for VENC_F_CONTROL_RESET clear\n"));
	}
	/* 2. Save IRQ state */
	uint32_t irqenable = dispc->irqenable;
	dispc->irqenable = 0;
	/* 15.5.8.2 SVideo/Composite selection in DSS_CONTROL */
	if(tvcfg.type == TVOUT_COMPOSITE)
		dss->control &= ~DSS_CONTROL_VENC_OUT_SEL;
	else
		dss->control |= DSS_CONTROL_VENC_OUT_SEL;
	/* 3. Program registers as per table 15-69 */
	const venc_regs_t *template = venc_templates[tvcfg.mode];
	const uint32_t *temp = (const uint32_t *) template;
	uint32_t *dest = (uint32_t *) venc;
	for(uint32_t offset=0;offset<sizeof(venc_regs_t);offset+=4)
	{
		/* Skip padding, revision ID, status register, VENC_F_CONTROL, VENC_SYNC_CTRL, VENC_OUTPUT_CONTROL */
		if((offset != offsetof(venc_regs_t,_pad1))
		&& (offset != offsetof(venc_regs_t,_pad2))
		&& (offset != offsetof(venc_regs_t,_pad3))
		&& (offset != offsetof(venc_regs_t,_pad4))
		&& (offset != offsetof(venc_regs_t,_pad5))
		&& (offset != offsetof(venc_regs_t,_pad6))
		&& (offset != offsetof(venc_regs_t,_pad7))
		&& (offset != offsetof(venc_regs_t,_pad8))
		&& (offset != offsetof(venc_regs_t,rev_id))
		&& (offset != offsetof(venc_regs_t,status))
		&& (offset != offsetof(venc_regs_t,f_control))
		&& (offset != offsetof(venc_regs_t,sync_ctrl))
		&& (offset != offsetof(venc_regs_t,output_control)))
		{
			dest[offset>>2] = temp[offset>>2];
		}
	}
	/* Program VENC_OUTPUT_CONTROL with correct value for SVideo/composite */
	if(tvcfg.type == TVOUT_COMPOSITE)
		venc->output_control = 0xA;
	else
		venc->output_control = 0xD;
	/* Program VENC_F_CONTROL and VENC_SYNC_CTRL last */
	venc->f_control = (template->f_control&~VENC_F_CONTROL_SVDS_MASK) | (tvcfg.testcard?VENC_F_CONTROL_SVDS_TESTCARD:VENC_F_CONTROL_SVDS_EXTERNAL);
	venc->sync_ctrl = template->sync_ctrl;
	/* Program DISPC_SIZE_DIG appropriately */
	int w = (REG_EXTRACT(template->avid_start_stop_x,VENC_AVID_START_STOP_X_AVID_STOP_X)-REG_EXTRACT(template->avid_start_stop_x,VENC_AVID_START_STOP_X_AVID_START_X)); 
	int h = (REG_EXTRACT(template->avid_start_stop_y,VENC_AVID_START_STOP_Y_AVID_STOP_Y)-REG_EXTRACT(template->avid_start_stop_y,VENC_AVID_START_STOP_Y_AVID_START_Y))/2;
	dispc->size_dig = ((w-1)<<DISPC_SIZE_DIG_PPL_SHIFT) | ((h-1)<<DISPC_SIZE_DIG_LPP_SHIFT);

	{
		irqlocked_t *irqlocked = irqlocked_lock();
		irqlocked->heads[TARGET_TV].dpms = 0;
		irqlocked->heads[TARGET_TV].blanked = false;
		irqlocked_unlock();
	}

	/* Apply features */
	{
		const features_t *features = features_read_lock();
		omap3_apply_features(features);
		features_read_unlock();
	}

	/* Update transparency settings*/
	omap3_flush_transparency_cfg(false);

	/* 4. Set the DISPC_CONTROL[6] GODIGITAL bit and DISPC_CONTROL[1] DIGITALENABLE bit to 1 */
	/* Also, make sure EVSYNC_EVEN/EVSYNC_ODD are clear */
	dispc->irqstatus = DISPC_IRQ_EVSYNC_EVEN | DISPC_IRQ_EVSYNC_ODD;
	dispc->control |= DISPC_CONTROL_GODIGITAL | DISPC_CONTROL_DIGITALENABLE;
	/* EXPERIMENTATION - Failed first time round, so let's wait a bit */
	_swix(OS_Hardware,_IN(0)|_INR(8,9),100000,OSHW_CallHAL,EntryNo_HAL_CounterDelay);
	/* 5. Wait for the first VSYNC pulse signal */
	timeout=10000000;
	while(!(dispc->irqstatus & (DISPC_IRQ_EVSYNC_EVEN | DISPC_IRQ_EVSYNC_ODD)) && --timeout) {};
	if(!timeout)
	{
		dprintf(("","venc_setmode: Timeout waiting for EVSYNC (enable)\n"));
	}
	/* 6. Clear the SYNCLOSTDIGITAL interrupt */
	dispc->irqstatus = DISPC_IRQ_EVSYNC_EVEN | DISPC_IRQ_EVSYNC_ODD | DISPC_IRQ_SYNCLOSTDIGITAL;
	/* 7. Enable the SYNCLOSTDIGITAL interrupt & restore earlier context */
	/* Except if we're in test card mode - SYNCLOSTDIGITAL seems to occur all the time and should be ignored! */
	irqenable |= DISPC_IRQ_EVSYNC_EVEN | DISPC_IRQ_EVSYNC_ODD;
	if(tvcfg.testcard)
		irqenable &= ~DISPC_IRQ_SYNCLOSTDIGITAL;
	else
		irqenable |= DISPC_IRQ_SYNCLOSTDIGITAL;
	dispc->irqenable = irqenable;
	end_slow_hardware_update(irqs);
	dprintf(("","venc_setmode: Done\n"));
}

void venc_setblank(bool blanked)
{
	(void) blanked;
	/* TODO - Find an IRQ-friendly way of blanking the display */
}

void venc_disable(void)
{
	int irqs;
	if(!begin_quick_hardware_update(&irqs))
	{
		/* TODO - Mark as pending! */
		return;
	}
	/* Make sure we disable the SYNCLOSTDIGITAL interrupt else it'll keep firing and we'll die horribly */
	dispc->irqenable &= ~DISPC_IRQ_SYNCLOSTDIGITAL;
	/* Now disable the digital output */
	dispc->control &= ~DISPC_CONTROL_DIGITALENABLE;
	/* Looks like we can get away with just disabling the clocks */
	dss->control &= ~(DSS_CONTROL_VENC_CLOCK_4X_ENABLE | DSS_CONTROL_DAC_DEMEN | DSS_CONTROL_DAC_POWERDN_BGZ);
	end_quick_hardware_update(irqs);
	/* Disable power completely if supported */
	if((hwconfig->mysize > offsetof(boardconfig_t,tvpower_func)) && (hwconfig->tvpower_func))
	{
		(hwconfig->tvpower_func)(dev,false);
	}
	tv_power_is_on = false;
	/* Mark as blanked (venc_prepmode should also have ensured it was marked as disabled - blank state is the only state we can modify from here) */
	irqlocked_lock()->heads[TARGET_TV].blanked = true;
	irqlocked_unlock();
	/* Reset state */
	tvstate = (tvcfg_t) { .type = TVOUT_NONE };
}

@


1.2
log
@Add chip-specific functions for *VideoRegs and *TVRegs. Change some OMAP3 register names.
Detail:
  c/cmodule, h/globals, omap3/c/omap, omap4/c/omap - Get rid of all the ugly #if's in *VideoRegs handling by moving video & TV register dump logic into chip-specific functions (omap_dump_videoregs, omap_dump_tvregs).
  h/regs3, omap3/c/dispc_plat, omap3/c/dss, omap3/c/omap, omap3/c/venc - Remove '1' from DISPC control & config register names, was only present for OMAP4 compatibility.
  omap4/c/dsi - Fix debug compile error due to DSI PLL regmf removal
Admin:
  OMAP3/OMAP4 debug/ROM versions all build correctly
  Untested at runtime


Version 0.36. Tagged as 'OMAPVideo-0_36'
@
text
@d29 1
d37 3
a40 1
#include "dispc.h"
d44 7
d149 1
a149 1
static void adjust_desktop(lcdtimings_t *params)
d151 21
a171 32
	/* Use the supplied LCD timings to position the desktop within the TV image
	   We take the border+porch timing values into account, to allow *TV to be used to fine-tune the position */
	const venc_regs_t *template = venc_templates[current_tvmode];
	int w = (REG_EXTRACT(template->avid_start_stop_x,VENC_AVID_START_STOP_X_AVID_STOP_X)-REG_EXTRACT(template->avid_start_stop_x,VENC_AVID_START_STOP_X_AVID_START_X));
	int h = (REG_EXTRACT(template->avid_start_stop_y,VENC_AVID_START_STOP_Y_AVID_STOP_Y)-REG_EXTRACT(template->avid_start_stop_y,VENC_AVID_START_STOP_Y_AVID_START_Y))/2;
	/* Make sure the width & height values in the timings reflect the actual display size */
	params->width = w;
	params->height = h;
	overlaycfg_t *o = &overlaycfgs[overlay_desktop];
	if(o->target == TARGET_TV)
	{
		h *= 2;
		int mode_w = params->hbp+o->width+params->hfp;
		int mode_h = params->vbp+o->height+params->vfp;
		o->x = (w-mode_w)/2 + params->hbp;
		o->y = (h-mode_h)/2 + params->vbp;
		/* If the display is being cropped horizontally, ensure the visible width is a multiple of a byte, as we can only specify stride in units of byte granularity
		   This should perhaps be a job for dispc_get_lloverlaycofg */
		uint32_t bpp = pixel_format_bpp[o->format];
		if (bpp < 8)
		{
			int align = (8/bpp)-1;
			/* Note that if neither left or right edge of the overlay are visible (i.e. both edges cropped) no alignment is required, as we know our screen (with the builtin PAL/NTSC timings) is a multiple of 8 pixels wide */
			if ((o->x > 0) && (o->width+o->x > w))
			{
				o->x &= ~align;
			}
			else if((o->x < 0) && (o->width+o->x < w))
			{
				o->x = (o->x+align) & ~align;
			}
		}
d173 8
d183 10
a192 1
static bool tv_power_is_on = false;
d194 1
a194 4
void venc_set_tvmode(tvmode mode,tvouttype type,bool showtestcard)
{
	/* Avoid pointless updates */
	if((mode == current_tvmode) && (type == current_tvtype) && (showtestcard == testcard) && headcfgs[TARGET_TV].enabled && !headcfgs[TARGET_TV].blanked)
d197 1
a197 1
		if(type != TVOUT_NONE)
d205 4
a208 4
			adjust_desktop(&headcfgs[TARGET_TV].mode);
			/* Flush any pending overlay updates */
			for(int i=0;i<OVERLAY_MAX;i++)
				dispc_update_overlay((overlayidx)i);
d210 1
a210 1
			dispc_flush_transparency_cfg(true);
d215 3
a217 5
	dprintf(("","venc_set_tvmode: Mode %d type %d testcard %d\n",mode,type,showtestcard));
	current_tvmode = mode;
	current_tvtype = type;
	testcard = showtestcard;
	if(type == TVOUT_NONE)
a232 1
		tv_power_is_on = true;
d234 1
d238 13
a250 2
	/* TODO - Do any other stuff to disable it properly */
	dispc->control &= ~DISPC_CONTROL_DIGITALENABLE;
d255 1
a255 1
	int timeout=1000000;
d259 1
a259 1
		dprintf(("","venc_set_tvmode: Timeout waiting for VENC_F_CONTROL_RESET clear\n"));
d265 1
a265 1
	if(type == TVOUT_COMPOSITE)
d270 1
a270 1
	const venc_regs_t *template = venc_templates[mode];
d294 1
a294 1
	if(type == TVOUT_COMPOSITE)
d299 1
a299 1
	venc->f_control = (template->f_control&~VENC_F_CONTROL_SVDS_MASK) | (showtestcard?VENC_F_CONTROL_SVDS_TESTCARD:VENC_F_CONTROL_SVDS_EXTERNAL);
d302 18
a319 11
	int w = (REG_EXTRACT(template->avid_start_stop_x,VENC_AVID_START_STOP_X_AVID_STOP_X)-REG_EXTRACT(template->avid_start_stop_x,VENC_AVID_START_STOP_X_AVID_START_X))-1; 
	int h = (REG_EXTRACT(template->avid_start_stop_y,VENC_AVID_START_STOP_Y_AVID_STOP_Y)-REG_EXTRACT(template->avid_start_stop_y,VENC_AVID_START_STOP_Y_AVID_START_Y))/2-1;
	dispc->size_dig = (w<<DISPC_SIZE_DIG_PPL_SHIFT) | (h<<DISPC_SIZE_DIG_LPP_SHIFT);
	adjust_desktop(&headcfgs[TARGET_TV].mode);
	/* Flush any pending overlay updates */
	headcfgs[TARGET_TV].dpms = 0;
	headcfgs[TARGET_TV].blanked = false;
	headcfgs[TARGET_TV].enabled = true;
	headcfgs[TARGET_TV].interlaced = true;
	for(int i=0;i<OVERLAY_MAX;i++)
		dispc_update_overlay((overlayidx)i);
d321 2
a322 1
	dispc_flush_transparency_cfg(false);
d334 1
a334 1
		dprintf(("","venc_set_tvmode: Timeout waiting for EVSYNC\n"));
d341 1
a341 1
	if(showtestcard)
d347 7
a353 1
	dprintf(("","venc_set_tvmode: Done\n"));
a374 1
		tv_power_is_on = false;
d376 6
a381 1
	headcfgs[TARGET_TV].enabled = false;
@


1.1
log
@Big code refactor
Detail:
  Support for different OMAP revisions has now been abstracted, with code specific to a certain OMAP revision now located in the omap3 and omap4 folders. This has resulted in some code duplication, but greater readability due to the removal of the #defines that were in use before. This new structure should also make it easier to implement new features, especially those only supported by certain OMAPs.
  Each platform provides a headattrs struct and an overlayattrs struct, which are the primary interface the core code uses to control the backend. Eventually it may be possible to produce one build of the module which supports multiple OMAP revisions at runtime, but for now some #defines and OMAP-specific code remains in the common files.
  This change also adds support for extra pixel formats, gamma table support for OMAP4, and fixes several bugs.
Admin:
  Tested on BeagleBoard, PandaBoard


Version 0.34. Tagged as 'OMAPVideo-0_34'
@
text
@d228 1
a228 1
	dispc->control1 &= ~DISPC_CONTROL_DIGITALENABLE;
d296 1
a296 1
	dispc->control1 |= DISPC_CONTROL_GODIGITAL | DISPC_CONTROL_DIGITALENABLE;
d331 1
a331 1
	dispc->control1 &= ~DISPC_CONTROL_DIGITALENABLE;
@

