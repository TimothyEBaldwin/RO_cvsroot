head	1.8;
access;
symbols
	OMAPVideo-0_33:1.7
	OMAPVideo-0_32:1.7
	OMAPVideo-0_31:1.7
	OMAPVideo-0_30:1.7
	OMAPVideo-0_29:1.7
	OMAPVideo-0_28:1.7
	OMAPVideo-0_27:1.7
	OMAPVideo-0_26:1.7
	OMAPVideo-0_25:1.7
	OMAPVideo-0_24:1.7
	OMAPVideo-0_23:1.7
	OMAPVideo-0_22:1.6
	OMAPVideo-0_21:1.6
	OMAPVideo-0_20:1.6
	OMAPVideo-0_19:1.5
	OMAPVideo-0_18:1.4
	OMAPVideo-0_17:1.4
	OMAPVideo-0_16:1.4
	OMAPVideo-0_15:1.4
	OMAPVideo-0_14:1.4
	OMAPVideo-0_13:1.4
	OMAPVideo-0_12:1.3
	OMAPVideo-0_11:1.3
	OMAPVideo-0_10:1.3
	OMAPVideo-0_09:1.3
	OMAPVideo-0_08:1.3
	OMAPVideo-0_07:1.3
	OMAPVideo-0_06:1.3
	OMAPVideo-0_05:1.2
	OMAPVideo-0_04:1.2
	OMAPVideo-0_03:1.2
	OMAPVideo-0_02:1.1
	OMAPVideo-0_01:1.1;
locks; strict;
comment	@# @;


1.8
date	2015.05.17.17.50.09;	author jlee;	state dead;
branches;
next	1.7;
commitid	J3i0xRSaySaJePly;

1.7
date	2012.06.09.19.40.01;	author jlee;	state Exp;
branches;
next	1.6;
commitid	UoigCKwU4VEQi48w;

1.6
date	2012.05.06.09.20.42;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	Dmkx2IqcO2G8YD3w;

1.5
date	2012.05.06.09.16.44;	author rsprowson;	state Exp;
branches;
next	1.4;
commitid	imAmvVvRmuLKWD3w;

1.4
date	2011.10.23.21.01.50;	author jlee;	state Exp;
branches;
next	1.3;
commitid	0rwNv0ztfd3f9wEv;

1.3
date	2010.06.28.21.14.20;	author jlee;	state Exp;
branches;
next	1.2;

1.2
date	2010.04.22.20.42.58;	author jlee;	state Exp;
branches;
next	1.1;

1.1
date	2010.02.28.19.01.15;	author jlee;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Big code refactor
Detail:
  Support for different OMAP revisions has now been abstracted, with code specific to a certain OMAP revision now located in the omap3 and omap4 folders. This has resulted in some code duplication, but greater readability due to the removal of the #defines that were in use before. This new structure should also make it easier to implement new features, especially those only supported by certain OMAPs.
  Each platform provides a headattrs struct and an overlayattrs struct, which are the primary interface the core code uses to control the backend. Eventually it may be possible to produce one build of the module which supports multiple OMAP revisions at runtime, but for now some #defines and OMAP-specific code remains in the common files.
  This change also adds support for extra pixel formats, gamma table support for OMAP4, and fixes several bugs.
Admin:
  Tested on BeagleBoard, PandaBoard


Version 0.34. Tagged as 'OMAPVideo-0_34'
@
text
@/*
 * Copyright (c) 2010, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include "dss.h"
#include "regs.h"
#include "globals.h"

#include <stdlib.h>
#include <time.h>

#include "DebugLib/DebugLib.h"

_kernel_oserror *dss_reset(void)
{
	/* Perform system reset as per spruf98d 15.5.1 */
	dprintf(("","dss_reset\n"));
#if OMAP==3
	/* Make sure the LCD output is disabled */
	if(dispc->control1 & DISPC_CONTROL_LCDENABLE)
	{
		/* Clear current FRAMEDONE interrupt */
		dispc->irqstatus = DISPC_IRQ_FRAMEDONE;
		/* Disable LCD */
		dispc->control1 &= ~DISPC_CONTROL_LCDENABLE;
		/* Wait for new interrupt
		   Use clock() for our timeout timer this time? */
		clock_t timeout = clock();
		while(!(dispc->irqstatus & DISPC_IRQ_FRAMEDONE) && (clock()-timeout < CLOCKS_PER_SEC)) {};
		if(!(dispc->irqstatus & DISPC_IRQ_FRAMEDONE))
		{
			dprintf(("","dss_reset: Timeout waiting for DISPC_IRQ_FRAMEDONE\n"));
		}
	}
	/* The clocks to the DSS are enabled, but for the reset to work we need to enable the VENC clocks (CAUTION in section 15.5.3.1.2.2) */
	dss->control |= DSS_CONTROL_VENC_CLOCK_4X_ENABLE | DSS_CONTROL_DAC_DEMEN | DSS_CONTROL_DAC_POWERDN_BGZ;
	/* Now we can safely perform the reset */
	dss->sysconfig = SYSCONFIG_SOFTRESET;
	int timeout=1000000;
	while(!(dss->sysstatus & SYSSTATUS_RESETDONE) && --timeout) {};
	if(!timeout)
	{
		dprintf(("","dss_reset: Timeout waiting for SYSSTATUS_RESETDONE!\n"));
	}
	/* Now disable VENC clocks again until we need them */
	dss->control = 0;
	/* Enable DISPC functional clock autogating */
	dispc->config1 |= DISPC_CONFIG_FUNCGATED;
#endif
#if OMAP==4
	dss->control = 0;

	/* reset DISPC module */
	dispc->sysconfig = SYSCONFIG_SOFTRESET;
	int timeout = 1000000;
	while (!(dss->sysstatus & SYSSTATUS_RESETDONE) && --timeout) {};
	if (!timeout)
	{
		dprintf(("","dss_reset: Timeout waiting for SYSSTATUS_RESETDONE!\n"));
	}

	/* use fixed divisor value for LCD1 */
	dispc->divisor1 = (1 << DISPC_DIVISOR_LCD_SHIFT) | (1 << DISPC_DIVISOR_PCD_SHIFT);
	/* disable OMAP35xx compatibility mode */
	dispc->divisor  = (1 << DISPC_DIVISOR_LCD_SHIFT) | (1 << 0);
#endif
	/* DSS reset also causes DSI PLL reset, so reset the cached state */
	dsi_pll_current_pixel_rate = 0;
	/* Ensure mouse transparency colour gets reprogrammed */
	mouse_dirty = true;
	/* Clear ban flag? */
	clear_ban(BHUB_OFF);

	return (_kernel_oserror *)0;
}

#if OMAP==3
/* Disable peephole optimisation for this function as workaround for optimisation bugs with 64bit ints */
#pragma -q8

clock_divider_t calculate_dss_clock_divider(uint32_t pixel_rate)
{
	/* Calculate DSI_PLL_REGM, DSI_PLL_REGN, DSI_PLL_REGM3 (aka DSS_CLOCK_DIV) values required for the given pixel rate (in Hz)
	   Output values aren't guaranteed to be within range

	   The full clock flow is as follows:
	     DSI PLL input = DSI_PLL_REFCLK (= DSS2_ALWON_FCLK = sys_clk)
	     Data lane freq = DSIPHY = 2*pixel rate*DSI_BPP/DSI_LANES
	     DSIPHY = 2*DSI_PLL_REGM/(DSI_PLL_REGN+1)*DSI_PLL_REFCLK/(HIGHFREQ+1)
	     HIGHFREQ = (DSI_PLL_REFCLK>32MHz?1:0) (=0 for all current sys_clk values)
	   Also, 0.75MHz <= Fint <= 2.1MHz where Fint = DSI_PLL_REFCLK/(DSI_PLL_REGN+1)
	   DSIPHY is then used as the source for the HSDIVIDER, which does the following:
	     DSI1_PLL_FCLK = DSIPHY/REGM3
	     DSI2_PLL_FCLK = DSIPHY/REGM4
	   Both must be <= 173MHz
	   DSI2_PLL_FCLK can be used to drive the DSI module, except we don't care much for that
	   DSI1_PLL_FCLK is what we use to drive the DISPC pixel clock:
	     pixel rate = (DSI1_PLL_FCLK/LCD)/PCD
	     1 <= LCD <= 255
	     2 <= PCD <= 255
	   We aren't using the DSI output module, so we can ignore the data lane frequency
	   This increases the number of DSI PLL register combinations available, so to keep this code simple we remove LCD and PCD from the equation by forcing them to their minimal values.
	   This also helps power usage a bit since DISPC will be clocked with the lowest possible clock (for a given pixel rate). In the future we may need to change this (e.g. for video overlay
	   downscaling, or for more accurate generation of clocks like 25.175MHz - where LCD*PCD=5 allows accurate generation of 25.175MHz)

	   An algorithm that aims for 100% accurate clock rates was found to be incapable of calculating divider values for most RISC OS screen modes (in particular the 25.175MHz mode used at boot).
	   Instead, an algorithm that aims to find the closest possible clock rate is used. Most clock rate errors appear to be tiny (within 1kHz of the desired pixel rate), so these errors shouldn't pose any problems. */
	clock_divider_t best;

	best.regm = 0;
	best.regn = -1;
	best.regm4 = best.regm3 = 0; /* Keep compiler quiet */
	if(!pixel_rate)
	{
		return best;
	}
	pixel_rate = pixel_rate*2; /* LCD*PCD=2 */

	uint32_t best_error = pixel_rate;
	/* Search for a satisfactory regn:
	   - Provides Fint that's within range
	   - Keeps Fint high
	*/
	clock_divider_t current;
	/* Fint will decrease as REGN increases, so we can calculate the initial REGN from our desired max Fint */
	current.regn = (hwconfig->sys_clk+2100000-1)/2100000; /* Ensure we round up to avoid Fint starting too high */
	/* We assume that this starting REGN is valid (sys_clk would need to be 0 or >128*2.1MHz to cause problems) */
	do
	{
		uint32_t Fint = hwconfig->sys_clk/current.regn;
		if(Fint < 750000) /* Fint too low; nothing else for us to do */
			break;

		/* Fint and REGN are good; now try all the different REGM3 values
		   Iterating over REGM3 is better than REGM, since REGM3 has a much smaller range */
//		dprintf(("","regn=%d Fint=%d\n",current.regn-1,Fint));
		for(current.regm3=1;current.regm3<=REG_MAX(DSI_PLL_CONFIGURATION1_DSS_CLOCK_DIV)+1;current.regm3++)
		{
			/* Find a REGM value:
			   - First, work out what our desired DSIPHY value is */
			uint64_t dsiphy=((uint64_t)current.regm3)*pixel_rate;

			/* - Now calculate the REGM value that results in a DSIPHY closest to our goal:
			       regm = dsiphy/(2*Fint)
			   - Except we want to add 1/2 to round to nearest:
			       regm = (dsiphy+Fint)/(2*Fint)
			   - And we want to get rid of Fint since it's often inaccurate (although the inaccuracy isn't likely to matter for this calculation):
			       regm = (dsiphy+sys_clk/regn)/(2*sys_clk/regn)
			       regm*2*sys_clk/regn = dsiphy+sys_clk/regn
			       regm*2*sys_clk = dsiphy*regm+sys_clk
			       regm = (dsiphy*regn+sys_clk)/(2*sys_clk)
			*/
			current.regm = (dsiphy*current.regn+hwconfig->sys_clk)/(hwconfig->sys_clk<<1);

			/* regm increases with regm3; early exit if we overflow regm3 */
			if(current.regm>REG_MAX(DSI_PLL_CONFIGURATION1_DSI_PLL_REGM))
				break;
			/* Check for underflow (unlikely, would only occur if pixel_rate < Fint) */
			if(current.regm<1)
				continue;

			/* Recalculate DSIPHY using our actual REGM value
			     dsiphy = 2*regm/Fint
			   Except we want to get rid of Fint again (this time it matters - it helps pick a better approximations for frequencies which can't be generated exactly, e.g. 25.175MHz) */
			dsiphy = (((uint64_t)(2*current.regm))*hwconfig->sys_clk)/current.regn;

			/* Calculate error value
			   Note that the error suffers from rounding error - could be eliminated if we stored it as a fraction */
			uint32_t error = abs(pixel_rate-(dsiphy/current.regm3));

			/* Check if this is better than our last attempt */
			if(error < best_error)
			{
				best_error = error;
				best.regm = current.regm;
				best.regn = current.regn-1;
				best.regm3 = current.regm3-1;
//				dprintf((""," regm=%d regn=%d regm3=%d dsiphy=%d err=%d\n",best.regm,best.regn,best.regm3,(int)(dsiphy/1000),best_error));
				/* Aim for a 48MHz DSI1_PLL_FCLK like Linux does. Not sure if this is important or not. */
				best.regm4 = (uint32_t)(dsiphy/48000000uLL);
				if(best.regm4 > 0)
				{
					best.regm4--;
					if(best.regm4 > REG_MAX(DSI_PLL_CONFIGURATION1_DSIPROTO_CLOCK_DIV))
						best.regm4 = REG_MAX(DSI_PLL_CONFIGURATION1_DSIPROTO_CLOCK_DIV);
				}
				if(!error)
					return best;
			}
		}
	} while(++current.regn <= REG_MAX(DSI_PLL_CONFIGURATION1_DSI_PLL_REGN)+1);

	return best;
}
#pragma -q0
#endif


#if OMAP==4
/* These definitions are only used in this module */
#define FREQ_PLL_MAX    186000000
#define FREQ_PCLK_MAX   170000000
#define FREQ_SYS        38400000
#define MAX_DSI_PHY_CLK 1800000000
#define FINT_MAX        2500000
#define FINT_MIN        500000
#define REGN_MIN        ((FREQ_SYS / FINT_MAX) + 1)
#define REGN_MAX        ((FREQ_SYS / FINT_MIN) + 1)
#define RESOLUTION      16384

clock_divider_t calculate_dss_clock_divider(uint32_t pixel_rate)
{
	/* Calculate DSI_PLL_REGM, DSI_PLL_REGN, DSI_PLL_REGM4 values
	   required for the given pixel rate (in Hz)
	   Output values aren't guaranteed to be within range

	   The full clock flow is as follows:
	     DSI PLL input = DSI_PLL_REFCLK (= DSS2_ALWON_FCLK = sys_clk)
	     Data lane freq = DSIPHY = 2*pixel rate*DSI_BPP/DSI_LANES
	     DSIPHY = 2*DSI_PLL_REGM/(DSI_PLL_REGN+1)*DSI_PLL_REFCLK
	   Also, 0.5MHz <= Fint <= 2.5MHz where Fint = DSI_PLL_REFCLK/(DSI_PLL_REGN+1)
	   DSIPHY is then used as the source for the HSDIVIDER, which does the following:
	     DSIn_PCLK1 = DSIPHY/(REGM4+1)
	     DSIn_PCLK2 = DSIPHY/(REGM5+1)
	   Both must be <= 186MHz
	   DSIn_PCLK2 can be used to drive the DSI module, except we don't care much for that
	   DSIn_PCLK1 is what we use to drive the DISPC pixel clock:
	     pixel rate = (DSIn_PCLK1/LCD)/PCD
	     1 <= LCD <= 255
	     1 <= PCD <= 255
	   We aren't using the DSI output module, so we can ignore the data lane frequency
	   This increases the number of DSI PLL register combinations available, so to keep this
	   code simple we remove LCD and PCD from the equation by forcing them to their minimal
	   values. This also helps power usage a bit since DISPC will be clocked with the lowest
	   possible clock (for a given pixel rate).
	*/

	clock_divider_t best;
	uint32_t delta, bestdelta;
	uint32_t i, m4;
	uint64_t ratio, m, dm;

	best.regm  = 0;
	best.regn  = 1;
	best.regm4 = 2 - 1;
	best.pcd   = 2;
	best.regmf = 0;

	if (!pixel_rate)
	{
		return best;
	}

	/* check for max pixel_rate (for adjusting pcd value) */
	if ((pixel_rate * 2) > FREQ_PLL_MAX)
	{
		best.pcd = 1;
	}
	else
	{
		pixel_rate *= 2;	/* LCD*PCD=2 */
	}

	/* search for value pair REGM,REGN with |2 * REGM * RESOLUTION / REGN - v| ==> 0 */
	for (i = REGN_MIN, bestdelta = RESOLUTION; i <= REGN_MAX; ++i)
	{
		/* iterate over REGM4 */
		for (m4 = 1; m4 < 32; ++m4)
		{
			/* find a pixel clock within 0.006 % of requested value (i.e. 1 / 16384) */
			ratio = (uint64_t)pixel_rate * (uint64_t)m4 * RESOLUTION / FREQ_SYS;

			/* add 0.5 for correct rounding */
			m = ((uint64_t)i * ratio + RESOLUTION) / (2 * RESOLUTION);
			/* check for allowed frequency range */
			if ((2 * m * FREQ_SYS / (uint64_t)i) > MAX_DSI_PHY_CLK)
				break;
			dm = m * 2 * RESOLUTION / (uint64_t)i;
			/* look at difference */
			if (dm > ratio)
			{
				delta = (uint32_t)(dm - ratio);
			}
			else
			{
				delta = (uint32_t)(ratio - dm);
			}

			if (delta < bestdelta)
			{
				bestdelta = delta;
				best.regm = (uint32_t)m;
				best.regn = i - 1;
				best.regm4 = m4 - 1;
				if (delta < 1)
				{
					break;
				}
			}
		}
		if (bestdelta < 1)
		{
			break;
		}
	}

	return best;
}
#endif
@


1.7
log
@Improve TV-Out support. Fix pointer transparency after DSS reset. Other tweaks.
Detail:
  c/venc - Fixed corruption when PAL output was in use and the display reached the bottom two rows of the screen; the screen height was being calculated incorrectly from the VENC register settings. This was also causing the constant SYNCLOSTDIGITAL interrupts.
  c/dss - Mark the mouse pointer image as dirty inside dss_reset(), to ensure the transparency colour gets set to hardware the next time the pointer is updated
  Makefile, cmhg/modhead - Make module help string reflect which OMAP version the module is for
  c/venc, h/regs3 - Added revision ID registers to OMAP3 register blocks, to reduce the number of differences between the OMAP3 & OMAP4 versions. The revision ID registers do exist on OMAP3, they just weren't listed in the early TRM version the module was first created from. Also fixed layout of DSI registers on OMAP3.
Admin:
  OMAP3 version tested on rev A2 BB-xM
  OMAP4 version builds but untested


Version 0.23. Tagged as 'OMAPVideo-0_23'
@
text
@@


1.6
log
@Merge of OMAP3 and OMAP4 video driver sources.
With 85%+ shared code, tracking changes between these two modules was getting complicated, so now this single module will serve both OMAP3 targets and OMAP4.
At present, the differences are simply selected at compile time with a switch. This may make sense to further rationalise either with tidier macros or run time detection (since the HAL knows which controller is running).
Tested on OMAP3 in all 8 colour depths,
Tested by Willi Theiss on OMAP4.

Version 0.20. Tagged as 'OMAPVideo-0_20'
@
text
@d50 1
a50 1
		   Use clock() for out timeout timer this time? */
d92 2
@


1.5
log
@Merge of headers with OMAP4Video
For the most part, this is just adding "_t" suffixes to all the typedefs.
The OMAP4 controller registers are in "regs4.h" and OMAP3 in "regs3.h", they are selected between with a compile time switch - hence !MkROM becomes !Ms !MkRom3 and !MkRom4.
OMAP3 version tested & still works, OMAP4 will not work.

Version 0.19. Tagged as 'OMAPVideo-0_19'
@
text
@d6 1
a6 1
 * modification, are permitted provided that the following conditions are met: 
d15 1
a15 1
 * 
d41 1
d43 1
a43 1
	if(dispc->control & DISPC_CONTROL_LCDENABLE)
d48 1
a48 1
		dispc->control &= ~DISPC_CONTROL_LCDENABLE;
d70 20
d94 2
a95 3
	/* Enable DISPC functional clock autogating */
	dispc->config |= DISPC_CONFIG_FUNCGATED;
	return 0;
d98 2
a99 1
/* Disable peephole optimisation for this function as workaround for optimisation bugs with 64bit ints */ 
d106 1
a106 1
	   
d111 1
a111 1
	     HIGHFREQ = (DSI_PLL_REFCLK>32MHz?1:0) (=0 for all current sys_clk values) 
d123 6
a128 3
	   This increases the number of DSI PLL register combinations available, so to keep this code simple we remove LCD and PCD from the equation by forcing them to their minimal values. This also helps power usage a bit since DISPC will be clocked with the lowest possible clock (for a given pixel rate). In the future we may need to change this (e.g. for video overlay downscaling, or for more accurate generation of clocks like 25.175MHz - where LCD*PCD=5 allows accurate generation of 25.175MHz)
	   
	   An algorithm that aims for 100% accurate clock rates was found to be incapable of calculating divider values for most RISC OS screen modes (in particular the 25.175MHz mode used at boot). Instead, an algorithm that aims to find the closest possible clock rate is used. Most clock rate errors appear to be tiny (within 1kHz of the desired pixel rate), so these errors shouldn't pose any problems. */
d130 1
d133 1
d139 1
d201 1
a201 1
				best.regm4 = dsiphy/48000000;
d213 1
d216 53
d270 61
a330 1
#pragma -q0
@


1.4
log
@Fix black screen on boot issue. Use C99 number types.
Detail:
  c/dss - Fixed the cause of the black screens on boot on OMAP3 machines (DM37xx seems fine). It looks like the cause was due to skipping the step where you disable the LCD output before triggering the DSS reset.
  c/cmodule, c/dispc, c/dss, c/graphicsv, h/globals - Removed code relating to previous attempts to fix the black screen issue
  c/cmodule, c/dispc, c/dsi, c/dss, c/graphicsv, c/palette, c/regs, c/sdma, c/venc, h/dsi, h/dss, h/globals, h/graphicsv, h/palette, h/regs - Use the C99 number types instead of u32, u16, etc.
Admin:
  Tested on rev C2 BB, rev A2 BB-xM


Version 0.13. Tagged as 'OMAPVideo-0_13'
@
text
@d81 1
a81 1
clock_divider calculate_dss_clock_divider(uint32_t pixel_rate)
d105 1
a105 1
	clock_divider best;
d118 1
a118 1
	clock_divider current;
@


1.3
log
@Add #include needed to fix compile error when debugging is disabled

Version 0.06. Tagged as 'OMAPVideo-0_06'
@
text
@d33 1
a39 1
	/* Except we'll skip the LCD reset for now, since the method they describe could fail if we don't use a timeout (if FRAMEDONE goes to 1 before we get a chance to clear it) */
d41 16
d81 1
a81 1
clock_divider calculate_dss_clock_divider(u32 pixel_rate)
d113 1
a113 1
	u32 best_error = pixel_rate;
d124 1
a124 1
		u32 Fint = hwconfig->sys_clk/current.regn;
d135 1
a135 1
			u64 dsiphy=((u64)current.regm3)*pixel_rate;
d159 1
a159 1
			dsiphy = (((u64)(2*current.regm))*hwconfig->sys_clk)/current.regn;
d163 1
a163 1
			u32 error = abs(pixel_rate-(dsiphy/current.regm3));
d173 1
a173 1
				/* EXPERIMENT - Aim for a 48MHz DSI1_PLL_FCLK like Linux does. Let's see if this fixes the IGEP display issues. */
@


1.2
log
@Assorted OMAPVideo tweaks and fixes
Detail:
  c/dispc - Added some WIP code for programming scaling coefficients
  c/dispc, c/graphicsv - Fixed code to not allow the graphics overlay to be enabled before its DMA address had been set (as was happening on boot)
  c/dispc - Enable reporting of FIFO underflow & OCPERROR interrupts in debug builds, to help track down bugs
  c/dispc - Check in some disabled code that was an attempt to fix the IGEP display problems. Code was to force FIFO preload values to 0x100, and to force DISPC_POL_FREQ to 0.
  c/dsi - Keep the DSI complex I/O clock off
  c/dsi, c/dss, h/dss, h/regs - rewrote calculate_dss_clock_divider to remove data lane frequency restriction, and to increase speed/accuracy when calculating rates for tricky values like 25.175MHz. Also in another attempt to fix the IGEP issues, it mimics the Linux driver by trying to generate a 48MHz DSI clock.
  c/dss, c/venc - Tweaked DSS reset & VENC code to make sure VENC clcoks are enabled & disabled at the appropriate times.
  c/graphicsv - Fix GraphicsV_SetDMAAddress so it works properly no matter what overlay the desktop is on
  c/venc - A fix to get the PAL test card working, and a fudge to get PAL output working.
Admin:
  Tested on rev C2 beagleboard & IGEP.
  IGEP reported as showing no concrete improvement in display stability :(


Version 0.03. Tagged as 'OMAPVideo-0_03'
@
text
@d32 2
@


1.1
log
@Add initial version of OMAP video driver module
Detail:
  All-new OMAP video driver, written as a module in C.
  Functionality-wise it's basically the same as the original HAL-based driver, except it provides support for GraphicsV_Render via use of the OMAP SDMA controller, and there's currently no support for GraphicsV_IICOp.
  However under the hood the module is significantly different, to ensure it can be expanded to expose the full feature set of the video controller once the new GraphicsV API is ready.
Admin:
  Tested on rev C2 beagleboard.


Version 0.01. Tagged as 'OMAPVideo-0_01'
@
text
@a37 1
	/* Plus the clocks are already enabled, so all we need to do is the soft reset */
d39 3
d49 3
a51 3
	/* EXPERIMENT: Enable venc clocks? */
	dss->control = DSS_CONTROL_VENC_CLOCK_4X_ENABLE | DSS_CONTROL_DAC_DEMEN | DSS_CONTROL_DAC_POWERDN_BGZ | DSS_CONTROL_VENC_OUT_SEL;
	/* DSS reset also causes DSI PLL reset */
d55 2
d60 3
d65 1
a65 1
	/* Calculate DSI_PLL_REGM, DSI_PLL_REGN values required for the given pixel rate (in Hz)
d83 2
a84 4
	   Even though we don't use the DSI output module, we still calculate DSIPHY as if we are using it (so that DSIPHY = data lane freq)
	   This then simplifies REGM3, REGM4, LCD and PCD programming so that it can use fixed values independent of the pixel rate:
	     REGM3 = DSIPHY/(pixel rate*2) = DSI_LANES/DSI_BPP (so that DSI1_PLL_FCLK = 2*pixel rate)
	     LCD=1, PCD=2 (so that DSI1_PLL_FCLK is divided by two to get the target pixel rate)
d86 1
a86 2
	   An algorithm that aims for 100% accurate clock rates was found to be incapable of calculating divider values for most RISC OS screen modes (in particular the 25.175MHz mode used at boot). Instead, an algorithm that aims to find the closest possible clock rate is used. Most clock rate errors appear to be tiny (within 1kHz of the desired data lane frequency), so this shouldn't pose any problems. */

d94 3
a96 5
	/* Data lane freq = 2*pixel rate*bpp/lanes */
	lcdconfig *config = &hwconfig->lcd_configs[current_lcd];
	u32 data_lane_freq = (2*pixel_rate*config->dsi_bpp)/config->dsi_lanes; /* TODO - Could get rid of the division (and thus make safe against noninteger results) by moving it over to the REGM calculation stage? */
	u32 best_error = data_lane_freq; /* Best error. This can easily be modified to limit the clock to a maximum error value, either fixed or to within a percentage of the pixel rate. */
	/* Search for satisfactory regn:
d98 1
a98 1
	   - sys_clk MOD REGN = 0
d101 3
a103 1
	current.regn = 1; /* Current N(+1) */
d107 7
a113 1
		if(!(hwconfig->sys_clk % current.regn) && (Fint >= 750000) && (Fint <= 2100000))
d115 33
a147 10
			/* REGN is good; use it to calculate nearest REGM */
			current.regm = data_lane_freq/(Fint*2);
			u32 error = data_lane_freq % (Fint*2);
			/* Rount to nearest, maintaining a2 as the error */
			if(error >= Fint)
			{
				current.regm++;
				error = (Fint*2)-error;
			}
			/* Is it better? */
d153 12
a165 3
			/* Is it perfect? */
			if(!error)
				return best;
d170 2
@

