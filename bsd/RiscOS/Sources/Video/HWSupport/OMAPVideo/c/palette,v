head	1.8;
access;
symbols
	OMAPVideo-0_41:1.8
	OMAPVideo-0_40:1.7
	OMAPVideo-0_39:1.7
	OMAPVideo-0_38:1.7
	OMAPVideo-0_37:1.7
	OMAPVideo-0_36:1.7
	OMAPVideo-0_35:1.7
	OMAPVideo-0_34:1.7
	OMAPVideo-0_33:1.6
	OMAPVideo-0_32:1.6
	OMAPVideo-0_31:1.6
	OMAPVideo-0_30:1.6
	OMAPVideo-0_29:1.6
	OMAPVideo-0_28:1.6
	OMAPVideo-0_27:1.5
	OMAPVideo-0_26:1.5
	OMAPVideo-0_25:1.5
	OMAPVideo-0_24:1.4
	OMAPVideo-0_23:1.4
	OMAPVideo-0_22:1.4
	OMAPVideo-0_21:1.4
	OMAPVideo-0_20:1.4
	OMAPVideo-0_19:1.3
	OMAPVideo-0_18:1.2
	OMAPVideo-0_17:1.2
	OMAPVideo-0_16:1.2
	OMAPVideo-0_15:1.2
	OMAPVideo-0_14:1.2
	OMAPVideo-0_13:1.2
	OMAPVideo-0_12:1.1
	OMAPVideo-0_11:1.1
	OMAPVideo-0_10:1.1
	OMAPVideo-0_09:1.1
	OMAPVideo-0_08:1.1;
locks; strict;
comment	@# @;


1.8
date	2018.05.31.21.48.54;	author jlee;	state Exp;
branches;
next	1.7;
commitid	qHkabDo5zjgySuEA;

1.7
date	2015.05.17.17.50.09;	author jlee;	state Exp;
branches;
next	1.6;
commitid	J3i0xRSaySaJePly;

1.6
date	2013.12.15.22.56.06;	author jlee;	state Exp;
branches;
next	1.5;
commitid	4M7nRqPE9VC3Ahhx;

1.5
date	2012.11.02.01.03.35;	author jlee;	state Exp;
branches;
next	1.4;
commitid	bQ04jdR4lSgTqJqw;

1.4
date	2012.05.06.09.20.43;	author rsprowson;	state Exp;
branches;
next	1.3;
commitid	Dmkx2IqcO2G8YD3w;

1.3
date	2012.05.06.09.16.44;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	imAmvVvRmuLKWD3w;

1.2
date	2011.10.23.21.01.51;	author jlee;	state Exp;
branches;
next	1.1;
commitid	0rwNv0ztfd3f9wEv;

1.1
date	2010.10.31.20.17.57;	author jlee;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Big refactor, introduce GraphicsV overlay API support
Detail:
  This change introduces initial support for the GraphicsV overlay API.
  RGB & YUV overlays are supported, along with rotation and scaling.
  Vertical flipping isn't supported yet, and there are still a number of bugs to track down, along with some potential improvements.
  The code has also been refactored significantly, in an attempt to protect all critical state with spinlocks/mutexes (as appropriate), and to reduce the number of globals so that it's easier to see what's touching what. Previously very little locking was performed, which could lead to issues if VSyncs or synclost interrupts occurred during certain operations. Now, the data should be structured in such a way that this shouldn't cause problems.
  Notable things:
  * State which needs to be writable from interrupt handlers is protected by spinlocks
  * State which needs to be readable from interrupt handlers is protected by reader-writer spinlocks
  * State which doesn't need to be accessed from interrupt handlers is unprotected (mutexes can be introduced in the future to make the code SMP-safe)
  * Using non-alpha screen modes for the desktop will currently result in only "basic" overlays being supported (i.e. overlays which appear ontop of the desktop). In some cases this could be improved by falling back to a software pointer, but for now the only way to get Z-Order overlays is to use a screen mode with an alpha channel.
  * Memory allocation for overlays is abstracted via the buffer interface (h/buffer). This has three implementations: basic buffers for untransformed overlays, VRFB-transformed buffers for OMAP3, and TILER-transformed buffers for OMAP4.
  * Ultimately all overlay memory is allocated as physically contiguous pages within a PMP - although since TILER contains its own MMU this isn't strictly necessary on OMAP4
  * Overlay memory is mapped as write-through cacheable for CPU access; experimentation with different cache policies has yet to be performed. However a potential future optimisation would be to perform lazy unmapping of overlay buffers, reducing the map/unmap overhead in well-behaved code which only maps buffers when they're needed
Admin:
  Tested on BB-xM, Pandaboard


Version 0.41. Tagged as 'OMAPVideo-0_41'
@
text
@/*
 * Copyright (c) 2010, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include <stddef.h>

#include "palette.h"
#include "mouse.h"
#include "vars.h"

#include "DebugLib/DebugLib.h"

static uint32_t gfx_palette_ro[256]; /* A copy of the graphics palette in its original form, as received from RISC OS */

static volatile uint32_t *gamma_table_reg = NULL;

static uint32_t *gfx_palette_l; /* Graphics palette logical addr */
uint32_t gfx_palette_p; /* Graphics palette physical addr */

palette_func_t gfx_palette_func = NULL;

/* Null palette func - does nothing except shift the RISC OS entry right 8 bits
   Suitable for non-16bpp modes with CPR */
static void palette_func_null(const uint32_t *entries,uint32_t idx,uint32_t count)
{
	if(idx >= 256)
		return;
	if(count > 256-idx)
		count = 256-idx;
	uint32_t *cache = &gfx_palette_ro[idx];
	uint32_t *out = &gfx_palette_l[idx];
	while(count--)
	{
		uint32_t val = *entries++;
		*cache++ = val;
		*out++ = val>>8;
	}
}

/* R/B swap palette func - Swaps the R & B channels
   Suitable for palettised modes with CPR disabled */
static void palette_func_rbswap(const uint32_t *entries,uint32_t idx,uint32_t count)
{
	if(idx >= 256)
		return;
	if(count > 256-idx)
		count = 256-idx;
	uint32_t *cache = &gfx_palette_ro[idx];
	uint32_t *out = &gfx_palette_l[idx];
	while(count--)
	{
		uint32_t val = *entries++;
		*cache++ = val;
		val = ((val & 0xff00)<<8) | ((val & 0xff0000)>>8) | ((val & 0xff000000) >> 24);
		*out++ = val;
	}
}

/* Like palette_func_null, but writes to HW reg instead of RAM buffer */
static void palette_func_null_reg(const uint32_t *entries,uint32_t idx,uint32_t count)
{
	if(idx >= 256)
		return;
	if(count > 256-idx)
		count = 256-idx;
	uint32_t *cache = &gfx_palette_ro[idx];
	volatile uint32_t *out = gamma_table_reg;
	while(count--)
	{
		uint32_t val = *entries++;
		*cache++ = val;
		*out = (val>>8) | (idx<<24);
		idx++;
	}
}

/* Like palette_func_rbswap, but writes to HW reg instead of RAM buffer */
static void palette_func_rbswap_reg(const uint32_t *entries,uint32_t idx,uint32_t count)
{
	if(idx >= 256)
		return;
	if(count > 256-idx)
		count = 256-idx;
	uint32_t *cache = &gfx_palette_ro[idx];
	volatile uint32_t *out = gamma_table_reg;
	while(count--)
	{
		uint32_t val = *entries++;
		*cache++ = val;
		val = ((val & 0xff00)<<8) | ((val & 0xff0000)>>8) | ((val & 0xff000000) >> 24);
		*out = val | (idx<<24);
		idx++;
	}
}

/* 555 palette func - Maps RISC OS 555 gamma table entries to OMAP 565 gamma table entries
   Suitable for 16bpp modes with CPR for R/B swapping */
static void palette_func_555_565(const uint32_t *entries,uint32_t idx,uint32_t count)
{
	if(idx >= 256)
		return;
	if(count > 256-idx)
		count = 256-idx;
	entries -= idx;
	uint32_t *cache = gfx_palette_ro;
	uint8_t *out = (uint8_t *) gfx_palette_l;
	while(count--)
	{
		uint32_t val = entries[idx];
		cache[idx] = val;
		/* Remap the gamma table:
		   RISC OS: xxB4B3B2B1B0G4G3G2G1G0R4R3R2R1R0
		   OMAP:    B4B3B2B1B0G5G4G3G2G1G0R4R3R2R1R0
		   We've got replication enabled, so after expansion it becomes:
		   Blue:  xxB4B3B2B1xxB4B3
		   Green: B0G4G3G2G1G0B0G4
		   Red:   R4R3R2R1R0R4R3R2
		    */
		uint32_t red_val = (val>>8) & 0xff;
		uint32_t green_val = (val>>16) & 0xff;
		uint32_t blue_val = val>>24;
		/* Red can be written as-is */
		out[(idx<<2)] = red_val;
		/* For green, we want to shift the index right one, and then shift bit 2 right one as well */
		uint32_t green_idx = ((idx>>1) & 0x7c) | ((idx>>2) & 1);
		/* Similar transform needed for blue */
		uint32_t blue_idx = ((idx>>1) & 0x78) | ((idx>>2) & 3);
		/* We need to write four entries with the same values. But because multiple values of idx map to the same green_idx & blue_idx, we only want to write some of the time.
		   To spread it out evenly over the gamma table, we'll only write if the two bits we shifted off the bottom of idx match the two bits at the top */
		if(!(((idx>>6) ^ idx) & 3))
		{
			out[(green_idx<<2)+1] = out[((green_idx+2)<<2)+1] = out[((green_idx+128)<<2)+1] = out[((green_idx+130)<<2)+1] = green_val;
			out[(blue_idx<<2)+2] = out[((blue_idx+4)<<2)+2] = out[((blue_idx+128)<<2)+2] = out[((blue_idx+132)<<2)+2] = blue_val;
		}
		idx++;
	}
}

/* 555 palette func - Maps RISC OS 555 gamma table entries to OMAP 565 gamma table entries
   Suitable for 16bpp modes with CPR disabled */
static void palette_func_555_565_rbswap(const uint32_t *entries,uint32_t idx,uint32_t count)
{
	if(idx >= 256)
		return;
	if(count > 256-idx)
		count = 256-idx;
	entries -= idx;
	uint32_t *cache = gfx_palette_ro;
	uint8_t *out = (uint8_t *) gfx_palette_l;
	while(count--)
	{
		uint32_t val = entries[idx];
		cache[idx] = val;
		/* As above, but swap red & blue when extracting from 'val' */
		uint32_t red_val = val>>24;
		uint32_t green_val = (val>>16) & 0xff;
		uint32_t blue_val = (val>>8) & 0xff;
		/* Red can be written as-is */
		out[(idx<<2)] = red_val;
		/* For green, we want to shift the index right one, and then shift bit 2 right one as well */
		uint32_t green_idx = ((idx>>1) & 0x7c) | ((idx>>2) & 1);
		/* Similar transform needed for blue */
		uint32_t blue_idx = ((idx>>1) & 0x78) | ((idx>>2) & 3);
		/* We need to write four entries with the same values. But because multiple values of idx map to the same green_idx & blue_idx, we only want to write some of the time.
		   To spread it out evenly over the gamma table, we'll only write if the two bits we shifted off the bottom of idx match the two bits at the top */
		if(!(((idx>>6) ^ idx) & 3))
		{
			out[(green_idx<<2)+1] = out[((green_idx+2)<<2)+1] = out[((green_idx+128)<<2)+1] = out[((green_idx+130)<<2)+1] = green_val;
			out[(blue_idx<<2)+2] = out[((blue_idx+4)<<2)+2] = out[((blue_idx+128)<<2)+2] = out[((blue_idx+132)<<2)+2] = blue_val;
		}
		idx++;
	}
}

void select_palette_func(volatile uint32_t *gamma_table_register, const features_t *features)
{
	/* Select appropriate palette func based around current head configurations */
	bool gammahack_needed = false; /* Is something using the gamma hack? */
	bool palette_needed = false; /* Is something using the palette? */
	bool cpr = false; /* If a palette is in use, does it need cpr? If not, does anything need cpr? */
	for(int i=0;i<TARGET_MAX;i++)
	{
		if(features->head_vals[i] & FEATURE_GAMMAHACK)
			gammahack_needed = true;
		if(features->head_vals[i] & FEATURE_PALETTE)
		{
			palette_needed = true;
			cpr = (features->head_vals[i] & FEATURE_CPR);
		}
		else if(!palette_needed & (features->head_vals[i] & FEATURE_CPR))
			cpr = true;
	}
	palette_func_t newfunc;
	if (gammahack_needed)
	{
		if(cpr)
			newfunc = palette_func_555_565;
		else
			newfunc = palette_func_555_565_rbswap;
	}
	else if (!palette_needed && gamma_table_register)
	{
		/* OMAP4, OMAP5 require use of memory mapped register for programming gamma. Palette is still handled by a buffer. */
		if (gamma_table_reg != gamma_table_register)
		{
			gfx_palette_func = NULL; /* Register location has changed. Force reprogram of gamma table. */
			gamma_table_reg = gamma_table_register;
		}
		if(cpr)
			newfunc = palette_func_null_reg;
		else
			newfunc = palette_func_rbswap_reg;
	}
	else if(cpr)
		newfunc = palette_func_null;
	else
		newfunc = palette_func_rbswap;
	if(newfunc != gfx_palette_func)
	{
		dprintf(("","select_palette_func: palette switching palette_needed %d gammahack %d cpr %d\n",palette_needed,gammahack_needed,cpr));
		/* Retranslate palette */
		gfx_palette_func = newfunc;
		(newfunc)(gfx_palette_ro,0,256);
	}
	mouse_select_palette_func(gammahack_needed, cpr);
}

void palette_set_buffers(uint32_t *palette_l, uint32_t palette_p)
{
	gfx_palette_l = palette_l;
	gfx_palette_p = palette_p;
}
@


1.7
log
@Big code refactor
Detail:
  Support for different OMAP revisions has now been abstracted, with code specific to a certain OMAP revision now located in the omap3 and omap4 folders. This has resulted in some code duplication, but greater readability due to the removal of the #defines that were in use before. This new structure should also make it easier to implement new features, especially those only supported by certain OMAPs.
  Each platform provides a headattrs struct and an overlayattrs struct, which are the primary interface the core code uses to control the backend. Eventually it may be possible to produce one build of the module which supports multiple OMAP revisions at runtime, but for now some #defines and OMAP-specific code remains in the common files.
  This change also adds support for extra pixel formats, gamma table support for OMAP4, and fixes several bugs.
Admin:
  Tested on BeagleBoard, PandaBoard


Version 0.34. Tagged as 'OMAPVideo-0_34'
@
text
@a29 1
#include "globals.h"
d31 2
d36 2
d40 5
d198 1
a198 99
/* Null mouse palette func - for use with CPR */
static void mouse_palette_func_null(const uint32_t *entries,uint32_t idx,uint32_t count)
{
	if(idx >= 4)
		return;
	if(count > 4-idx)
		count = 4-idx;
	uint32_t *cache = &mouse_palette_ro[idx];
	uint32_t *out = &mouse_palette_soft[idx];
	while(count--)
	{
		uint32_t val = *entries++;
		*cache++ = val;
		val >>= 8;
		if(*out != val)
		{
			*out = val;
			mouse_dirty = true;
		}
		out++;
	}
}

/* R/B swap mouse palette func - for when CPR is disabled */
static void mouse_palette_func_rbswap(const uint32_t *entries,uint32_t idx,uint32_t count)
{
	if(idx >= 4)
		return;
	if(count > 4-idx)
		count = 4-idx;
	uint32_t *cache = &mouse_palette_ro[idx];
	uint32_t *out = &mouse_palette_soft[idx];
	while(count--)
	{
		uint32_t val = *entries++;
		*cache++ = val;
		val = ((val & 0xff00)<<8) | ((val & 0xff0000)>>8) | ((val & 0xff000000) >> 24);
		if(*out != val)
		{
			*out = val;
			mouse_dirty = true;
		}
		out++;
	}
}

/* 555 mouse palette func - for when palette_func_555_565 is in use
   Green & blue channels need to be fudged, to take into account the fudging in the gamma table */
static void mouse_palette_func_555_565(const uint32_t *entries,uint32_t idx,uint32_t count)
{
	if(idx >= 4)
		return;
	if(count > 4-idx)
		count = 4-idx;
	uint32_t *cache = &mouse_palette_ro[idx];
	uint32_t *out = &mouse_palette_soft[idx];
	while(count--)
	{
		uint32_t val = *entries++;
		*cache++ = val;
		// RO:   B0B1B2B3 B4B5B6B7 G0G1G2G3 G4G5G6G7 R0R1R2R3 R4R5R6R7 xxxxxxxx xxxxxxxx
		// OMAP:                     B0B1B2 B3  B0B1   G0G1G2 G3G4  G0 R0R1R2R3 R4R5R6R7
		val = ((val & 0xff00)>>8) | ((val & 0xf0f80000)>>9) | ((val & 0xc0000000)>>14) | ((val & 0x800000)>>15);
		if(*out != val)
		{
			*out = val;
			mouse_dirty = true;
		}
		out++;
	}
}

/* 555 mouse palette func - for when palette_func_555_565 is in use
   Green & blue channels need to be fudged, to take into account the fudging in the gamma table */
static void mouse_palette_func_555_565_rbswap(const uint32_t *entries,uint32_t idx,uint32_t count)
{
	if(idx >= 4)
		return;
	if(count > 4-idx)
		count = 4-idx;
	uint32_t *cache = &mouse_palette_ro[idx];
	uint32_t *out = &mouse_palette_soft[idx];
	while(count--)
	{
		uint32_t val = *entries++;
		*cache++ = val;
		// RO:   B0B1B2B3 B4B5B6B7 G0G1G2G3 G4G5G6G7 R0R1R2R3 R4R5R6R7 xxxxxxxx xxxxxxxx
		// OMAP:                     R0R1R2 R3  R0R1   G0G1G2 G3G4  G0 B0B1B2B3 B4B5B6B7
		val = (val>>24) | ((val & 0xf80000)>>9) | ((val & 0x800000)>>15) | ((val & 0xf000)<<7) | ((val & 0xc000)<<2);
		if(*out != val)
		{
			*out = val;
			mouse_dirty = true;
		}
		out++;
	}
}

void select_palette_func(volatile uint32_t *gamma_table_register)
d206 1
a206 1
		if(headcfgs[i].features & FEATURE_GAMMAHACK)
d208 1
a208 1
		if(headcfgs[i].features & FEATURE_PALETTE)
d211 1
a211 1
			cpr = (headcfgs[i].features & FEATURE_CPR);
d213 1
a213 1
		else if(!palette_needed & (headcfgs[i].features & FEATURE_CPR))
d248 7
a254 17
	if (gammahack_needed)
	{
		if(cpr)
			newfunc = mouse_palette_func_555_565;
		else
			newfunc = mouse_palette_func_555_565_rbswap;
	}
	else if(cpr)
		newfunc = mouse_palette_func_null;
	else
		newfunc = mouse_palette_func_rbswap;
	if(newfunc != mouse_palette_func)
	{
		/* Retranslate palette */
		mouse_palette_func = newfunc;
		(newfunc)(mouse_palette_ro,0,4);
	}
@


1.6
log
@Update for new GraphicsV registration process. Remove VIDC20 16bpp gamma demangle code. Advertise red/blue swapped 16bpp & 32bpp modes when using TV-out.
Detail:
  c/cmodule - Updated to use new GraphicsV registration process and OS_Hardware reason code #defines
  c/dispc, c/venc, h/graphicsv, h/venc - Use Hdr:VIDCList instead of local VIDC list definition
  c/graphicsv - Implement GraphicsV_PixelFormats, and return an appropriate list based on whether TV-out is in use. Call through to the HAL for GraphicsV_IICOp instead of relying on the OS to call the HAL for us.
  c/palette - Remove VIDC20 16bpp gamma demangle code, the OS now supplies the data in a sensible format. Dont use mouse palette function intended for 555 mode emulation if CPR isn't in use (i.e. we're on TV-out, i.e. gamma won't be available either)
Admin:
  Tested in OMAP3 ROM on BB-xM
  OMAP4 version builds but is unstested
  Requires HdrSrc-2_38 and Kernel-5_35-4_79_2_203


Version 0.28. Tagged as 'OMAPVideo-0_28'
@
text
@d28 2
a30 1
#include "regs.h"
d35 2
d74 37
d112 2
a113 2
   Suitable for 16bpp modes (preferably with CPR for R/B swapping) */
static void palette_func_555(const uint32_t *entries,uint32_t idx,uint32_t count)
a132 1
		   TODO - Take into account CPR, red & blue values will need swapping if it's enabled?
d143 37
a179 1
		/* We need to write four entries with the same values. But because multiple values if idx map to the same green_idx & blue_idx, we only want to write some of the time.
d236 3
a238 3
/* 555 mouse palette func - for when palette_func_555 is in use
   Green & blue channels need to be halved, to take into account the doubling in the gamma table */
static void mouse_palette_func_555(const uint32_t *entries,uint32_t idx,uint32_t count)
d250 2
d262 27
a288 1
void select_palette_func(int format,bool cpr)
d290 16
a305 1
	/* Select appropriate palette func for given params */
d307 20
a326 2
	if ((format == OVERLAY_ATTRIBUTES_FORMAT_RGB16_565) && cpr)
		newfunc = palette_func_555;
a330 1
#if OMAP==3
d333 1
d338 7
a344 8
#endif
#if OMAP==4
	/* Retranslate palette every time */
	gfx_palette_func = newfunc;
	(newfunc)(gfx_palette_ro,0,256);
#endif
	if ((format == OVERLAY_ATTRIBUTES_FORMAT_RGB16_565) && cpr)
		newfunc = mouse_palette_func_555;
a348 1
#if OMAP==3
a354 6
#endif
#if OMAP==4
	/* Retranslate palette every time */
	mouse_palette_func = newfunc;
	(newfunc)(mouse_palette_ro,0,4);
#endif
@


1.5
log
@Fix wrong mouse colours in 16bpp modes
Detail:
  c/palette - Improved handling of mouse palette so that it's aware of the special gamma table used on OMAP3 to convert RISC OS's 555 pixel format to OMAP's 565. Also fixed the 555 code to fill in all the relevant gamma table entries instead of just the ones that desktop pixels will hit.
Admin:
  Tested on BB-xM
  Fixes issue reported on forums with black mouse pointer:
  https://www.riscosopen.org/forum/forums/4/topics/1170


Version 0.25. Tagged as 'OMAPVideo-0_25'
@
text
@d86 21
a106 14
		/* Pull apart the gamma table entry to get the 0-31 indices and 0-31 values */
		uint32_t red_idx = idx & 0x1f;
		uint32_t green_idx = (idx>>1) & 0x1f;
		uint32_t blue_idx = (idx>>2) & 0x1f;
		uint32_t red_val = (val>>11) & 0x1f;
		uint32_t green_val = (val>>19) & 0x1f;
		uint32_t blue_val = (val>>27) & 0x1f;
		/* Now put it back together in a way that will allow the 565 OMAP to display RISC OS's 555 format (at an effective quality of 455) */
		red_val = (red_val<<3) | (red_val>>2);
		green_val = (green_val<<3) | (green_val>>2);
		blue_val = (blue_val<<4) | (blue_val&0xf);
		/* Write all the entries covered by these 16bpp indices
		   TODO - Interpolate between values */
		for(int i=0;i<8;i++)
d108 2
a109 6
			out[(red_idx<<5)+i*4] = red_val;
			out[(blue_idx<<5)+2+i*4] = blue_val;
		}
		for(int i=0;i<4;i++)
		{
			out[(green_idx<<4)+1+i*4] = out[(green_idx<<4)+513+i*4] = green_val;
d175 1
a175 1
		val = ((val & 0xf800)>>8) | ((val & 0xf0f80000)>>9);
d189 1
a189 1
	if (format == OVERLAY_ATTRIBUTES_FORMAT_RGB16_565)
d208 1
a208 1
	if (format == OVERLAY_ATTRIBUTES_FORMAT_RGB16_565)
@


1.4
log
@Merge of OMAP3 and OMAP4 video driver sources.
With 85%+ shared code, tracking changes between these two modules was getting complicated, so now this single module will serve both OMAP3 targets and OMAP4.
At present, the differences are simply selected at compile time with a switch. This may make sense to further rationalise either with tidier macros or run time detection (since the HAL knows which controller is running).
Tested on OMAP3 in all 8 colour depths,
Tested by Willi Theiss on OMAP4.

Version 0.20. Tagged as 'OMAPVideo-0_20'
@
text
@d94 14
a107 3
		out[red_idx<<5] = (red_val<<3) | (red_val>>2);
		out[(green_idx<<4)+1] = out[(green_idx<<4)+513] = (green_val<<3) | (green_val>>2);
		out[(blue_idx<<5)+2] = (blue_val<<4) | (blue_val&0xf);
d158 24
d205 6
a210 1
	newfunc = (cpr?mouse_palette_func_null:mouse_palette_func_rbswap);
@


1.3
log
@Merge of headers with OMAP4Video
For the most part, this is just adding "_t" suffixes to all the typedefs.
The OMAP4 controller registers are in "regs4.h" and OMAP3 in "regs3.h", they are selected between with a compile time switch - hence !MkROM becomes !Ms !MkRom3 and !MkRom4.
OMAP3 version tested & still works, OMAP4 will not work.

Version 0.19. Tagged as 'OMAPVideo-0_19'
@
text
@d6 1
a6 1
 * modification, are permitted provided that the following conditions are met: 
d15 1
a15 1
 * 
d151 1
a151 1
	if(format == OVERLAY_ATTRIBUTES_FORMAT_RGB16)
d155 1
a155 1
	else 
d157 1
d164 6
d171 1
d178 6
@


1.2
log
@Fix black screen on boot issue. Use C99 number types.
Detail:
  c/dss - Fixed the cause of the black screens on boot on OMAP3 machines (DM37xx seems fine). It looks like the cause was due to skipping the step where you disable the LCD output before triggering the DSS reset.
  c/cmodule, c/dispc, c/dss, c/graphicsv, h/globals - Removed code relating to previous attempts to fix the black screen issue
  c/cmodule, c/dispc, c/dsi, c/dss, c/graphicsv, c/palette, c/regs, c/sdma, c/venc, h/dsi, h/dss, h/globals, h/graphicsv, h/palette, h/regs - Use the C99 number types instead of u32, u16, etc.
Admin:
  Tested on rev C2 BB, rev A2 BB-xM


Version 0.13. Tagged as 'OMAPVideo-0_13'
@
text
@d150 1
a150 1
	palette_func newfunc;
@


1.1
log
@Improve OMAPVideo power saving abilities and palette handling
Detail:
  Makefile, c/palette, h/palette, c/cmodule, c/dispc, c/graphicsv, h/globals - Rewrote palette handling code to support multiple different transformations on palettes, to adapt the palettes from the RISC OS formats to the DISPC formats. This means that palettes and the mouse cursor are now correctly R/B swapped for TV-out, RISC OS's gamma correction tables are now supported, and clever use of gamma tables allows 16bpp modes to be displayed correctly by mapping RISC OS's 555 format to the OMAP's 565 format (but there'll only be 4 blue bits instead of 5)
  c/cmodule, c/dispc, c/graphicsv, h/globals - Add support for the HAL's new display power controls, and implement GraphicsV_SetBlank. For fixed LCDs this will ignore the requested DPMS state and instead just turn the power/backlight off.
  h/sdma - Marked the functions as extern.
Admin:
  Tested on rev C2 beagleboard, rev C1 touchbook.
  Requires OMAP3 HAL 0.34.


Version 0.08. Tagged as 'OMAPVideo-0_08'
@
text
@d36 1
a36 1
static void palette_func_null(const u32 *entries,u32 idx,u32 count)
d42 2
a43 2
	u32 *cache = &gfx_palette_ro[idx];
	u32 *out = &gfx_palette_l[idx];
d46 1
a46 1
		u32 val = *entries++;
d54 1
a54 1
static void palette_func_rbswap(const u32 *entries,u32 idx,u32 count)
d60 2
a61 2
	u32 *cache = &gfx_palette_ro[idx];
	u32 *out = &gfx_palette_l[idx];
d64 1
a64 1
		u32 val = *entries++;
d73 1
a73 1
static void palette_func_555(const u32 *entries,u32 idx,u32 count)
d80 2
a81 2
	u32 *cache = gfx_palette_ro;
	u8 *out = (u8 *) gfx_palette_l;
d84 1
a84 1
		u32 val = entries[idx];
d87 6
a92 6
		u32 red_idx = idx & 0x1f;
		u32 green_idx = (idx>>1) & 0x1f;
		u32 blue_idx = (idx>>2) & 0x1f;
		u32 red_val = (val>>11) & 0x1f;
		u32 green_val = (val>>19) & 0x1f;
		u32 blue_val = (val>>27) & 0x1f;
d102 1
a102 1
static void mouse_palette_func_null(const u32 *entries,u32 idx,u32 count)
d108 2
a109 2
	u32 *cache = &mouse_palette_ro[idx];
	u32 *out = &mouse_palette_soft[idx];
d112 1
a112 1
		u32 val = *entries++;
d125 1
a125 1
static void mouse_palette_func_rbswap(const u32 *entries,u32 idx,u32 count)
d131 2
a132 2
	u32 *cache = &mouse_palette_ro[idx];
	u32 *out = &mouse_palette_soft[idx];
d135 1
a135 1
		u32 val = *entries++;
@

