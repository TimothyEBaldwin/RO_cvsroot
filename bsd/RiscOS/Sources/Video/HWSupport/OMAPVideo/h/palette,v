head	1.5;
access;
symbols
	OMAPVideo-0_41:1.5
	OMAPVideo-0_40:1.4
	OMAPVideo-0_39:1.4
	OMAPVideo-0_38:1.4
	OMAPVideo-0_37:1.4
	OMAPVideo-0_36:1.4
	OMAPVideo-0_35:1.4
	OMAPVideo-0_34:1.4
	OMAPVideo-0_33:1.3
	OMAPVideo-0_32:1.3
	OMAPVideo-0_31:1.3
	OMAPVideo-0_30:1.3
	OMAPVideo-0_29:1.3
	OMAPVideo-0_28:1.3
	OMAPVideo-0_27:1.3
	OMAPVideo-0_26:1.3
	OMAPVideo-0_25:1.3
	OMAPVideo-0_24:1.3
	OMAPVideo-0_23:1.3
	OMAPVideo-0_22:1.3
	OMAPVideo-0_21:1.3
	OMAPVideo-0_20:1.3
	OMAPVideo-0_19:1.3
	OMAPVideo-0_18:1.2
	OMAPVideo-0_17:1.2
	OMAPVideo-0_16:1.2
	OMAPVideo-0_15:1.2
	OMAPVideo-0_14:1.2
	OMAPVideo-0_13:1.2
	OMAPVideo-0_12:1.1
	OMAPVideo-0_11:1.1
	OMAPVideo-0_10:1.1
	OMAPVideo-0_09:1.1
	OMAPVideo-0_08:1.1;
locks; strict;
comment	@# @;


1.5
date	2018.05.31.21.48.57;	author jlee;	state Exp;
branches;
next	1.4;
commitid	qHkabDo5zjgySuEA;

1.4
date	2015.05.17.17.50.16;	author jlee;	state Exp;
branches;
next	1.3;
commitid	J3i0xRSaySaJePly;

1.3
date	2012.05.06.09.16.47;	author rsprowson;	state Exp;
branches;
next	1.2;
commitid	imAmvVvRmuLKWD3w;

1.2
date	2011.10.23.21.01.57;	author jlee;	state Exp;
branches;
next	1.1;
commitid	0rwNv0ztfd3f9wEv;

1.1
date	2010.10.31.20.18.04;	author jlee;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Big refactor, introduce GraphicsV overlay API support
Detail:
  This change introduces initial support for the GraphicsV overlay API.
  RGB & YUV overlays are supported, along with rotation and scaling.
  Vertical flipping isn't supported yet, and there are still a number of bugs to track down, along with some potential improvements.
  The code has also been refactored significantly, in an attempt to protect all critical state with spinlocks/mutexes (as appropriate), and to reduce the number of globals so that it's easier to see what's touching what. Previously very little locking was performed, which could lead to issues if VSyncs or synclost interrupts occurred during certain operations. Now, the data should be structured in such a way that this shouldn't cause problems.
  Notable things:
  * State which needs to be writable from interrupt handlers is protected by spinlocks
  * State which needs to be readable from interrupt handlers is protected by reader-writer spinlocks
  * State which doesn't need to be accessed from interrupt handlers is unprotected (mutexes can be introduced in the future to make the code SMP-safe)
  * Using non-alpha screen modes for the desktop will currently result in only "basic" overlays being supported (i.e. overlays which appear ontop of the desktop). In some cases this could be improved by falling back to a software pointer, but for now the only way to get Z-Order overlays is to use a screen mode with an alpha channel.
  * Memory allocation for overlays is abstracted via the buffer interface (h/buffer). This has three implementations: basic buffers for untransformed overlays, VRFB-transformed buffers for OMAP3, and TILER-transformed buffers for OMAP4.
  * Ultimately all overlay memory is allocated as physically contiguous pages within a PMP - although since TILER contains its own MMU this isn't strictly necessary on OMAP4
  * Overlay memory is mapped as write-through cacheable for CPU access; experimentation with different cache policies has yet to be performed. However a potential future optimisation would be to perform lazy unmapping of overlay buffers, reducing the map/unmap overhead in well-behaved code which only maps buffers when they're needed
Admin:
  Tested on BB-xM, Pandaboard


Version 0.41. Tagged as 'OMAPVideo-0_41'
@
text
@/*
 * Copyright (c) 2010, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef OMAPVIDEO_PALETTE_H
#define OMAPVIDEO_PALETTE_H

#include <stdint.h>

#include "types.h"

typedef void (*palette_func_t)(const uint32_t *entries,uint32_t idx,uint32_t count);

extern uint32_t gfx_palette_p; /* Graphics palette physical addr */

extern palette_func_t gfx_palette_func; /* Current function to use for performing palette updates */

extern void select_palette_func(volatile uint32_t *gamma_table_register, const features_t *features);

extern void palette_set_buffers(uint32_t *palette_l, uint32_t palette_p);

#endif
@


1.4
log
@Big code refactor
Detail:
  Support for different OMAP revisions has now been abstracted, with code specific to a certain OMAP revision now located in the omap3 and omap4 folders. This has resulted in some code duplication, but greater readability due to the removal of the #defines that were in use before. This new structure should also make it easier to implement new features, especially those only supported by certain OMAPs.
  Each platform provides a headattrs struct and an overlayattrs struct, which are the primary interface the core code uses to control the backend. Eventually it may be possible to produce one build of the module which supports multiple OMAP revisions at runtime, but for now some #defines and OMAP-specific code remains in the common files.
  This change also adds support for extra pixel formats, gamma table support for OMAP4, and fixes several bugs.
Admin:
  Tested on BeagleBoard, PandaBoard


Version 0.34. Tagged as 'OMAPVideo-0_34'
@
text
@d32 2
a33 1
#include "kernel.h"
d37 7
a43 1
void select_palette_func(volatile uint32_t *gamma_table_register);
@


1.3
log
@Merge of headers with OMAP4Video
For the most part, this is just adding "_t" suffixes to all the typedefs.
The OMAP4 controller registers are in "regs4.h" and OMAP3 in "regs3.h", they are selected between with a compile time switch - hence !MkROM becomes !Ms !MkRom3 and !MkRom4.
OMAP3 version tested & still works, OMAP4 will not work.

Version 0.19. Tagged as 'OMAPVideo-0_19'
@
text
@d31 1
a32 1
#include "regs.h"
d36 1
a36 1
void select_palette_func(int format,bool cpr);
@


1.2
log
@Fix black screen on boot issue. Use C99 number types.
Detail:
  c/dss - Fixed the cause of the black screens on boot on OMAP3 machines (DM37xx seems fine). It looks like the cause was due to skipping the step where you disable the LCD output before triggering the DSS reset.
  c/cmodule, c/dispc, c/dss, c/graphicsv, h/globals - Removed code relating to previous attempts to fix the black screen issue
  c/cmodule, c/dispc, c/dsi, c/dss, c/graphicsv, c/palette, c/regs, c/sdma, c/venc, h/dsi, h/dss, h/globals, h/graphicsv, h/palette, h/regs - Use the C99 number types instead of u32, u16, etc.
Admin:
  Tested on rev C2 BB, rev A2 BB-xM


Version 0.13. Tagged as 'OMAPVideo-0_13'
@
text
@d34 1
a34 1
typedef void (*palette_func)(const uint32_t *entries,uint32_t idx,uint32_t count);
@


1.1
log
@Improve OMAPVideo power saving abilities and palette handling
Detail:
  Makefile, c/palette, h/palette, c/cmodule, c/dispc, c/graphicsv, h/globals - Rewrote palette handling code to support multiple different transformations on palettes, to adapt the palettes from the RISC OS formats to the DISPC formats. This means that palettes and the mouse cursor are now correctly R/B swapped for TV-out, RISC OS's gamma correction tables are now supported, and clever use of gamma tables allows 16bpp modes to be displayed correctly by mapping RISC OS's 555 format to the OMAP's 565 format (but there'll only be 4 blue bits instead of 5)
  c/cmodule, c/dispc, c/graphicsv, h/globals - Add support for the HAL's new display power controls, and implement GraphicsV_SetBlank. For fixed LCDs this will ignore the requested DPMS state and instead just turn the power/backlight off.
  h/sdma - Marked the functions as extern.
Admin:
  Tested on rev C2 beagleboard, rev C1 touchbook.
  Requires OMAP3 HAL 0.34.


Version 0.08. Tagged as 'OMAPVideo-0_08'
@
text
@d34 1
a34 1
typedef void (*palette_func)(const u32 *entries,u32 idx,u32 count);
@

