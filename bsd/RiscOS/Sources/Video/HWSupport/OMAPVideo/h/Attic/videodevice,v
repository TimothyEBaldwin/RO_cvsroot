head	1.3;
access;
symbols
	OMAPVideo-0_40:1.2
	OMAPVideo-0_39:1.2
	OMAPVideo-0_38:1.2
	OMAPVideo-0_37:1.2
	OMAPVideo-0_36:1.2
	OMAPVideo-0_35:1.2
	OMAPVideo-0_34:1.2
	OMAPVideo-0_33:1.2
	OMAPVideo-0_32:1.2
	OMAPVideo-0_31:1.2
	OMAPVideo-0_30:1.2
	OMAPVideo-0_29:1.2
	OMAPVideo-0_28:1.2
	OMAPVideo-0_27:1.2
	OMAPVideo-0_26:1.2
	OMAPVideo-0_25:1.2
	OMAPVideo-0_24:1.2
	OMAPVideo-0_23:1.2
	OMAPVideo-0_22:1.2
	OMAPVideo-0_21:1.2
	OMAPVideo-0_20:1.2
	OMAPVideo-0_19:1.2
	OMAPVideo-0_18:1.1
	OMAPVideo-0_17:1.1
	OMAPVideo-0_16:1.1
	OMAPVideo-0_15:1.1
	OMAPVideo-0_14:1.1
	OMAPVideo-0_13:1.1
	OMAPVideo-0_12:1.1
	OMAPVideo-0_11:1.1
	OMAPVideo-0_10:1.1
	OMAPVideo-0_09:1.1
	OMAPVideo-0_08:1.1
	OMAPVideo-0_07:1.1
	OMAPVideo-0_06:1.1
	OMAPVideo-0_05:1.1
	OMAPVideo-0_04:1.1
	OMAPVideo-0_03:1.1
	OMAPVideo-0_02:1.1
	OMAPVideo-0_01:1.1;
locks; strict;
comment	@# @;


1.3
date	2018.05.31.21.48.58;	author jlee;	state dead;
branches;
next	1.2;
commitid	qHkabDo5zjgySuEA;

1.2
date	2012.05.06.09.16.48;	author rsprowson;	state Exp;
branches;
next	1.1;
commitid	imAmvVvRmuLKWD3w;

1.1
date	2010.02.28.19.01.19;	author jlee;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Big refactor, introduce GraphicsV overlay API support
Detail:
  This change introduces initial support for the GraphicsV overlay API.
  RGB & YUV overlays are supported, along with rotation and scaling.
  Vertical flipping isn't supported yet, and there are still a number of bugs to track down, along with some potential improvements.
  The code has also been refactored significantly, in an attempt to protect all critical state with spinlocks/mutexes (as appropriate), and to reduce the number of globals so that it's easier to see what's touching what. Previously very little locking was performed, which could lead to issues if VSyncs or synclost interrupts occurred during certain operations. Now, the data should be structured in such a way that this shouldn't cause problems.
  Notable things:
  * State which needs to be writable from interrupt handlers is protected by spinlocks
  * State which needs to be readable from interrupt handlers is protected by reader-writer spinlocks
  * State which doesn't need to be accessed from interrupt handlers is unprotected (mutexes can be introduced in the future to make the code SMP-safe)
  * Using non-alpha screen modes for the desktop will currently result in only "basic" overlays being supported (i.e. overlays which appear ontop of the desktop). In some cases this could be improved by falling back to a software pointer, but for now the only way to get Z-Order overlays is to use a screen mode with an alpha channel.
  * Memory allocation for overlays is abstracted via the buffer interface (h/buffer). This has three implementations: basic buffers for untransformed overlays, VRFB-transformed buffers for OMAP3, and TILER-transformed buffers for OMAP4.
  * Ultimately all overlay memory is allocated as physically contiguous pages within a PMP - although since TILER contains its own MMU this isn't strictly necessary on OMAP4
  * Overlay memory is mapped as write-through cacheable for CPU access; experimentation with different cache policies has yet to be performed. However a potential future optimisation would be to perform lazy unmapping of overlay buffers, reducing the map/unmap overhead in well-behaved code which only maps buffers when they're needed
Admin:
  Tested on BB-xM, Pandaboard


Version 0.41. Tagged as 'OMAPVideo-0_41'
@
text
@/*
 * Copyright (c) 2010, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef OMAPVIDEO_VIDEODEVICE_H
#define OMAPVIDEO_VIDEODEVICE_H

#include "Global/HALDevice.h"

/* This should probably go into the kernel headers at some point! */

typedef struct
{
	struct device dev;

	uint32_t devicespecificfield; /* pointer to boardconfig struct */
} vdu_device_t;

extern vdu_device_t *dev;

#endif
@


1.2
log
@Merge of headers with OMAP4Video
For the most part, this is just adding "_t" suffixes to all the typedefs.
The OMAP4 controller registers are in "regs4.h" and OMAP3 in "regs3.h", they are selected between with a compile time switch - hence !MkROM becomes !Ms !MkRom3 and !MkRom4.
OMAP3 version tested & still works, OMAP4 will not work.

Version 0.19. Tagged as 'OMAPVideo-0_19'
@
text
@@


1.1
log
@Add initial version of OMAP video driver module
Detail:
  All-new OMAP video driver, written as a module in C.
  Functionality-wise it's basically the same as the original HAL-based driver, except it provides support for GraphicsV_Render via use of the OMAP SDMA controller, and there's currently no support for GraphicsV_IICOp.
  However under the hood the module is significantly different, to ensure it can be expanded to expose the full feature set of the video controller once the new GraphicsV API is ready.
Admin:
  Tested on rev C2 beagleboard.


Version 0.01. Tagged as 'OMAPVideo-0_01'
@
text
@d40 1
a40 1
} vdu_device;
d42 1
a42 1
extern vdu_device *dev;
@

