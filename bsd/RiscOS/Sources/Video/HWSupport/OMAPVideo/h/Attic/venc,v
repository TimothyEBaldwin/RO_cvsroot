head	1.5;
access;
symbols
	OMAPVideo-0_40:1.4
	OMAPVideo-0_39:1.4
	OMAPVideo-0_38:1.4
	OMAPVideo-0_37:1.4
	OMAPVideo-0_36:1.4
	OMAPVideo-0_35:1.4
	OMAPVideo-0_34:1.4
	OMAPVideo-0_33:1.3
	OMAPVideo-0_32:1.3
	OMAPVideo-0_31:1.3
	OMAPVideo-0_30:1.3
	OMAPVideo-0_29:1.3
	OMAPVideo-0_28:1.3
	OMAPVideo-0_27:1.2
	OMAPVideo-0_26:1.2
	OMAPVideo-0_25:1.2
	OMAPVideo-0_24:1.2
	OMAPVideo-0_23:1.2
	OMAPVideo-0_22:1.2
	OMAPVideo-0_21:1.1
	OMAPVideo-0_20:1.1
	OMAPVideo-0_19:1.1
	OMAPVideo-0_18:1.1
	OMAPVideo-0_17:1.1
	OMAPVideo-0_16:1.1
	OMAPVideo-0_15:1.1
	OMAPVideo-0_14:1.1
	OMAPVideo-0_13:1.1
	OMAPVideo-0_12:1.1
	OMAPVideo-0_11:1.1
	OMAPVideo-0_10:1.1
	OMAPVideo-0_09:1.1
	OMAPVideo-0_08:1.1
	OMAPVideo-0_07:1.1
	OMAPVideo-0_06:1.1
	OMAPVideo-0_05:1.1
	OMAPVideo-0_04:1.1
	OMAPVideo-0_03:1.1
	OMAPVideo-0_02:1.1
	OMAPVideo-0_01:1.1;
locks; strict;
comment	@# @;


1.5
date	2018.05.31.21.48.58;	author jlee;	state dead;
branches;
next	1.4;
commitid	qHkabDo5zjgySuEA;

1.4
date	2015.05.17.17.50.17;	author jlee;	state Exp;
branches;
next	1.3;
commitid	J3i0xRSaySaJePly;

1.3
date	2013.12.15.22.56.09;	author jlee;	state Exp;
branches;
next	1.2;
commitid	4M7nRqPE9VC3Ahhx;

1.2
date	2012.06.04.23.54.24;	author jlee;	state Exp;
branches;
next	1.1;
commitid	FoeSemiFbzb4Sr7w;

1.1
date	2010.02.28.19.01.19;	author jlee;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Big refactor, introduce GraphicsV overlay API support
Detail:
  This change introduces initial support for the GraphicsV overlay API.
  RGB & YUV overlays are supported, along with rotation and scaling.
  Vertical flipping isn't supported yet, and there are still a number of bugs to track down, along with some potential improvements.
  The code has also been refactored significantly, in an attempt to protect all critical state with spinlocks/mutexes (as appropriate), and to reduce the number of globals so that it's easier to see what's touching what. Previously very little locking was performed, which could lead to issues if VSyncs or synclost interrupts occurred during certain operations. Now, the data should be structured in such a way that this shouldn't cause problems.
  Notable things:
  * State which needs to be writable from interrupt handlers is protected by spinlocks
  * State which needs to be readable from interrupt handlers is protected by reader-writer spinlocks
  * State which doesn't need to be accessed from interrupt handlers is unprotected (mutexes can be introduced in the future to make the code SMP-safe)
  * Using non-alpha screen modes for the desktop will currently result in only "basic" overlays being supported (i.e. overlays which appear ontop of the desktop). In some cases this could be improved by falling back to a software pointer, but for now the only way to get Z-Order overlays is to use a screen mode with an alpha channel.
  * Memory allocation for overlays is abstracted via the buffer interface (h/buffer). This has three implementations: basic buffers for untransformed overlays, VRFB-transformed buffers for OMAP3, and TILER-transformed buffers for OMAP4.
  * Ultimately all overlay memory is allocated as physically contiguous pages within a PMP - although since TILER contains its own MMU this isn't strictly necessary on OMAP4
  * Overlay memory is mapped as write-through cacheable for CPU access; experimentation with different cache policies has yet to be performed. However a potential future optimisation would be to perform lazy unmapping of overlay buffers, reducing the map/unmap overhead in well-behaved code which only maps buffers when they're needed
Admin:
  Tested on BB-xM, Pandaboard


Version 0.41. Tagged as 'OMAPVideo-0_41'
@
text
@/*
 * Copyright (c) 2010, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef OMAPVIDEO_VENC_H
#define OMAPVIDEO_VENC_H

#include "globals.h"

extern void venc_set_tvmode(tvmode mode,tvouttype type,bool showtestcard);

extern void venc_disable(void);

#endif
@


1.4
log
@Big code refactor
Detail:
  Support for different OMAP revisions has now been abstracted, with code specific to a certain OMAP revision now located in the omap3 and omap4 folders. This has resulted in some code duplication, but greater readability due to the removal of the #defines that were in use before. This new structure should also make it easier to implement new features, especially those only supported by certain OMAPs.
  Each platform provides a headattrs struct and an overlayattrs struct, which are the primary interface the core code uses to control the backend. Eventually it may be possible to produce one build of the module which supports multiple OMAP revisions at runtime, but for now some #defines and OMAP-specific code remains in the common files.
  This change also adds support for extra pixel formats, gamma table support for OMAP4, and fixes several bugs.
Admin:
  Tested on BeagleBoard, PandaBoard


Version 0.34. Tagged as 'OMAPVideo-0_34'
@
text
@@


1.3
log
@Update for new GraphicsV registration process. Remove VIDC20 16bpp gamma demangle code. Advertise red/blue swapped 16bpp & 32bpp modes when using TV-out.
Detail:
  c/cmodule - Updated to use new GraphicsV registration process and OS_Hardware reason code #defines
  c/dispc, c/venc, h/graphicsv, h/venc - Use Hdr:VIDCList instead of local VIDC list definition
  c/graphicsv - Implement GraphicsV_PixelFormats, and return an appropriate list based on whether TV-out is in use. Call through to the HAL for GraphicsV_IICOp instead of relying on the OS to call the HAL for us.
  c/palette - Remove VIDC20 16bpp gamma demangle code, the OS now supplies the data in a sensible format. Dont use mouse palette function intended for 555 mode emulation if CPR isn't in use (i.e. we're on TV-out, i.e. gamma won't be available either)
Admin:
  Tested in OMAP3 ROM on BB-xM
  OMAP4 version builds but is unstested
  Requires HdrSrc-2_38 and Kernel-5_35-4_79_2_203


Version 0.28. Tagged as 'OMAPVideo-0_28'
@
text
@a31 1
#include "graphicsv.h"
d33 3
a35 1
extern void venc_set_tvmode(tvmode mode,tvouttype type,bool showtestcard,VIDCList3 *params);
@


1.2
log
@Improve TV-out support
Detail:
  c/cmodule, c/dispc, c/graphicsv, c/venc, h/venc - Updated TV-out code to center the desktop within the display, while also taking into account the border/porch timings in order to allow vertical shifting using *TV.
Admin:
  Tested on rev A2 BB-xM


Version 0.22. Tagged as 'OMAPVideo-0_22'
@
text
@d34 1
a34 1
extern void venc_set_tvmode(tvmode mode,tvouttype type,bool showtestcard,vidclist3_t *params);
@


1.1
log
@Add initial version of OMAP video driver module
Detail:
  All-new OMAP video driver, written as a module in C.
  Functionality-wise it's basically the same as the original HAL-based driver, except it provides support for GraphicsV_Render via use of the OMAP SDMA controller, and there's currently no support for GraphicsV_IICOp.
  However under the hood the module is significantly different, to ensure it can be expanded to expose the full feature set of the video controller once the new GraphicsV API is ready.
Admin:
  Tested on rev C2 beagleboard.


Version 0.01. Tagged as 'OMAPVideo-0_01'
@
text
@d32 1
d34 1
a34 1
extern void venc_set_tvmode(tvmode mode,tvouttype type,bool showtestcard);
@

