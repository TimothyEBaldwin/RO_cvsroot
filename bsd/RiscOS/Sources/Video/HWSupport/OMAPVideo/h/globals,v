head	1.13;
access;
symbols
	OMAPVideo-0_41:1.13
	OMAPVideo-0_40:1.12
	OMAPVideo-0_39:1.12
	OMAPVideo-0_38:1.11
	OMAPVideo-0_37:1.11
	OMAPVideo-0_36:1.11
	OMAPVideo-0_35:1.10
	OMAPVideo-0_34:1.10
	OMAPVideo-0_33:1.9
	OMAPVideo-0_32:1.9
	OMAPVideo-0_31:1.9
	OMAPVideo-0_30:1.9
	OMAPVideo-0_29:1.9
	OMAPVideo-0_28:1.8
	OMAPVideo-0_27:1.8
	OMAPVideo-0_26:1.7
	OMAPVideo-0_25:1.7
	OMAPVideo-0_24:1.7
	OMAPVideo-0_23:1.6
	OMAPVideo-0_22:1.6
	OMAPVideo-0_21:1.6
	OMAPVideo-0_20:1.6
	OMAPVideo-0_19:1.6
	OMAPVideo-0_18:1.5
	OMAPVideo-0_17:1.5
	OMAPVideo-0_16:1.5
	OMAPVideo-0_15:1.5
	OMAPVideo-0_14:1.5
	OMAPVideo-0_13:1.5
	OMAPVideo-0_12:1.4
	OMAPVideo-0_11:1.3
	OMAPVideo-0_10:1.2
	OMAPVideo-0_09:1.2
	OMAPVideo-0_08:1.2
	OMAPVideo-0_07:1.1
	OMAPVideo-0_06:1.1
	OMAPVideo-0_05:1.1
	OMAPVideo-0_04:1.1
	OMAPVideo-0_03:1.1
	OMAPVideo-0_02:1.1
	OMAPVideo-0_01:1.1;
locks; strict;
comment	@# @;


1.13
date	2018.05.31.21.48.57;	author jlee;	state Exp;
branches;
next	1.12;
commitid	qHkabDo5zjgySuEA;

1.12
date	2015.08.14.22.12.34;	author jlee;	state Exp;
branches;
next	1.11;
commitid	rcLw9SUqzfPpPhxy;

1.11
date	2015.05.31.18.21.31;	author jlee;	state Exp;
branches;
next	1.10;
commitid	G8GT764JNtMBXCny;

1.10
date	2015.05.17.17.50.16;	author jlee;	state Exp;
branches;
next	1.9;
commitid	J3i0xRSaySaJePly;

1.9
date	2013.12.17.23.44.59;	author jlee;	state Exp;
branches;
next	1.8;
commitid	QW2ELjKp66EPMxhx;

1.8
date	2013.11.18.21.59.41;	author rsprowson;	state Exp;
branches;
next	1.7;
commitid	5zJ1bSSJJkXu8Odx;

1.7
date	2012.07.18.22.57.47;	author jlee;	state Exp;
branches;
next	1.6;
commitid	2fZkhRJPBFVX86dw;

1.6
date	2012.05.06.09.16.47;	author rsprowson;	state Exp;
branches;
next	1.5;
commitid	imAmvVvRmuLKWD3w;

1.5
date	2011.10.23.21.01.56;	author jlee;	state Exp;
branches;
next	1.4;
commitid	0rwNv0ztfd3f9wEv;

1.4
date	2011.07.11.22.07.38;	author jlee;	state Exp;
branches;
next	1.3;
commitid	aeC42JvE4N46R9rv;

1.3
date	2011.03.19.18.19.50;	author jlee;	state Exp;
branches;
next	1.2;
commitid	kv85AixjkSL8gucv;

1.2
date	2010.10.31.20.18.04;	author jlee;	state Exp;
branches;
next	1.1;

1.1
date	2010.02.28.19.01.19;	author jlee;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Big refactor, introduce GraphicsV overlay API support
Detail:
  This change introduces initial support for the GraphicsV overlay API.
  RGB & YUV overlays are supported, along with rotation and scaling.
  Vertical flipping isn't supported yet, and there are still a number of bugs to track down, along with some potential improvements.
  The code has also been refactored significantly, in an attempt to protect all critical state with spinlocks/mutexes (as appropriate), and to reduce the number of globals so that it's easier to see what's touching what. Previously very little locking was performed, which could lead to issues if VSyncs or synclost interrupts occurred during certain operations. Now, the data should be structured in such a way that this shouldn't cause problems.
  Notable things:
  * State which needs to be writable from interrupt handlers is protected by spinlocks
  * State which needs to be readable from interrupt handlers is protected by reader-writer spinlocks
  * State which doesn't need to be accessed from interrupt handlers is unprotected (mutexes can be introduced in the future to make the code SMP-safe)
  * Using non-alpha screen modes for the desktop will currently result in only "basic" overlays being supported (i.e. overlays which appear ontop of the desktop). In some cases this could be improved by falling back to a software pointer, but for now the only way to get Z-Order overlays is to use a screen mode with an alpha channel.
  * Memory allocation for overlays is abstracted via the buffer interface (h/buffer). This has three implementations: basic buffers for untransformed overlays, VRFB-transformed buffers for OMAP3, and TILER-transformed buffers for OMAP4.
  * Ultimately all overlay memory is allocated as physically contiguous pages within a PMP - although since TILER contains its own MMU this isn't strictly necessary on OMAP4
  * Overlay memory is mapped as write-through cacheable for CPU access; experimentation with different cache policies has yet to be performed. However a potential future optimisation would be to perform lazy unmapping of overlay buffers, reducing the map/unmap overhead in well-behaved code which only maps buffers when they're needed
Admin:
  Tested on BB-xM, Pandaboard


Version 0.41. Tagged as 'OMAPVideo-0_41'
@
text
@/*
 * Copyright (c) 2010, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef OMAPVIDEO_GLOBALS_H
#define OMAPVIDEO_GLOBALS_H

#include <stdbool.h>
#include <stdint.h>

#include "types.h"

#ifdef DEBUGLIB
/* Read microsecond countdown timer value for debugging */
extern uint32_t timer_read(void);
#endif

extern void omap_init(void);

/* Update feature selection based around overlay 'idx' using the given pixel format & being assigned to the given 'target' head
   Must be called whenever the target or format values change, to ensure the head is configured correctly (e.g. CPR, gamma)
   Must only be called from the foreground
   Doesn't need calling for the mouse overlay, since that doesn't request any special features */
extern void omap_update_features(overlayidx idx, overlaytarget target, pixelformat format);

/* Pick the display to use on startup */
extern overlaytarget omap_pick_display(void);

/* Pick the overlays & transparency mode to use when the desktop is using the given head + pixel format */
extern void omap_pick_overlays(overlaytarget head, pixelformat format, modelocked_t *modelocked);

/* Set the Z order for the given overlays. Frontmost = first entry. */
extern void omap_set_zorder(const overlayidx *order,int count,const modelocked_t *modelocked);

/* Check if the given FIR values are acceptable, and calculate whether 5-tap V filter required */
extern bool omap_check_fir(int fir_x,int fir_y,int buf_h,int scaled_w,int scaled_h,pixelformat format,const modelocked_t *modelocked,overlaytarget target,bool *v5tap);

/* Return mask of which overlays can support scaling, for the indicated head & pixel format */
extern int omap_scalable_overlays(const modelocked_t *modelocked, overlaytarget target, pixelformat format);

#if OMAP==3
extern void omap3_flush_transparency_cfg(bool go);
extern void omap3_apply_features(const features_t *features);
#endif

/* Estimate required memory bandwidth for an overlay, in KB/s */
extern uint32_t bandwidth_estimate(const overlaycfg_t *o,const modelocked_t *modelocked);

#endif
@


1.12
log
@Add memory barriers to GraphicsV acceleration
Detail:
  c/sdma - Use a read/write barrier at the start and end of any DMA op, to ensure things are ready for switching screen memory to Normal, non-cacheable
  c/cmodule, h/globals - Get the DMB_ReadWrite ARMop ptr on startup
Admin:
  Tested on BB-xM, PandaBoard


Version 0.39. Tagged as 'OMAPVideo-0_39'
@
text
@d34 1
a34 1
#include "Global/VIDCList.h"
d36 4
a39 2
#include "videodevice.h"
#include "palette.h"
d41 1
a41 3
extern void *private_word;
extern int instance;
extern uint8_t graphicsv_driver_number;
d43 5
a47 1
struct sdma_regs;
d49 5
a53 10
typedef enum
{
	TARGET_NONE=-1, /* Starts at -1 so valid values can index the overlaycfg/transparencycfg arrays */
#if OMAP==3
	TARGET_LCD, /* DVI output or builtin LCD for TouchBook/Pandora/etc. */
	TARGET_TV, /* AKA digital output */
#endif
#if OMAP==4
	TARGET_LCD2, /* DVI output */
#endif
d55 2
a56 2
	TARGET_MAX,
} overlaytarget;
d58 2
a59 295
typedef enum
{
	TVMODE_NTSC_601,
	TVMODE_PAL_601,

	TVMODE_MAX,
} tvmode;

typedef enum
{
	TVOUT_NONE=-1,
	TVOUT_COMPOSITE,
	TVOUT_SVIDEO,
} tvouttype;

/* lcdtype enum definition must match HAL */

typedef enum
{
	LCD_NONE=0,
	LCD_TFT,
	LCD_STN_COLOUR,
	LCD_STN_MONO4,
	LCD_STN_MONO8,

	LCD_MAX,
} lcdtype;

typedef enum
{
	OVERLAY_GFX,
	OVERLAY_VID1,
	OVERLAY_VID2,

	OVERLAY_MAX,
} overlayidx;

/* Transparency settings:

   NONE, TCK_VIDSRC, TCK_GFXDEST use VID2->VID1->GFX->BGCOL overlay ordering (front->back)
   TCK_GFXSRC & ALPHA use GFX->VID2->VID1->BGCOL ordering */

typedef enum
{
	TRANSPARENCY_NONE,
	TRANSPARENCY_TCK_VIDSRC, /* Video overlay pixels that match the colour key won't be drawn. Only if colour space conversion & scaling disabled. */
	TRANSPARENCY_TCK_GFXSRC, /* Graphics overlay pixels that match the colour key won't be drawn. Only if colour space conversion & scaling disabled. */
	TRANSPARENCY_TCK_GFXDEST, /* Graphics underlay pixels that match the colour key cause the overlay pixels (VID1, VID2) to be drawn */
	TRANSPARENCY_ALPHA, /* Use alpha value of each overlay pixel */

	TRANSPARENCY_MAX,
} transparencycfg;

/* All the pixel formats defined by RISC OS which we support */
typedef enum
{
	PIXELFORMAT_1_PAL,
	PIXELFORMAT_2_PAL,
	PIXELFORMAT_4_PAL,
	PIXELFORMAT_8_PAL,
	PIXELFORMAT_4444_TBGR,
	PIXELFORMAT_4444_TRGB,
	PIXELFORMAT_4444_ABGR,
	PIXELFORMAT_4444_ARGB,
	PIXELFORMAT_1555_TBGR,
	PIXELFORMAT_1555_TRGB,
	PIXELFORMAT_1555_ABGR,
	PIXELFORMAT_1555_ARGB,
	PIXELFORMAT_565_BGR,
	PIXELFORMAT_565_RGB,
	PIXELFORMAT_888_BGR,
	PIXELFORMAT_888_RGB,
	PIXELFORMAT_8888_TBGR,
	PIXELFORMAT_8888_TRGB,
	PIXELFORMAT_8888_ABGR,
	PIXELFORMAT_8888_ARGB,
	PIXELFORMAT_NORMAL_MAX,

	PIXELFORMAT_POINTER = PIXELFORMAT_NORMAL_MAX, /* Special format for pointer overlay, is more permissive than any formats which are selectable via the GraphicsV interface */

	PIXELFORMAT_MAX,
} pixelformat;

typedef struct
{
	uint32_t omapformat;
	uint8_t features_val;
	uint8_t features_mask;
	uint8_t overlays;
} omapformat_t;

#define FEATURE_CPR 1
#define FEATURE_ALPHA 2
#define FEATURE_PALETTE 4
#define FEATURE_GAMMAHACK 8

/* lcdtimings/lcdconfig/boardconfig structs must match those used by the HAL! */

typedef struct
{
	uint32_t pixelrate; /* Hz */
	uint16_t hsw,hfp,hbp,width;
	uint16_t vsw,vfp,vbp,height;
	uint32_t syncpol; /* vidclist3 syncpol flags */
} lcdtimings_t;

typedef struct
{
	/* General */
	uint8_t dsi_bpp; /* BPP of DSI output */
	uint8_t dsi_lanes; /* Number of data lanes of DSI output */
	uint8_t acbias_freq; /* AC bias pin frequency */
	uint8_t lcd_type; /* LCD type (lcdtype enum) */
	uint32_t flags; /* Extra config flags */
	void (*power)(vdu_device_t *dev,int brightness); /* Set display brightness (0-65536)/power */
	/* Fixed panel stuff */
	lcdtimings_t *lcd_timings; /* Required timings, if fixed panel */
	/* Non-fixed panel stuff */
	uint32_t max_pixelrate; /* Max pixel rate (kHz) */
} lcdconfig_t;

#define LCDCONFIG_RF		0x1 /* DISPC_POL_FREQ.RF setting */
#define LCDCONFIG_IEO		0x2 /* DISPC_POL_FREQ.IEO setting */
#define LCDCONFIG_IPC		0x4 /* DISPC_POL_FREQ.IPC setting */
#define LCDCONFIG_BRIGHTNESS	0x8 /* lcdconfig.power can control brightness */

typedef struct
{
	/* Stuff determined at runtime by HAL */
	uint32_t sys_clk; /* System clock frequency, Hz */
	uint16_t max_porch; /* Max porch value */
	uint16_t max_sync; /* Max sync value */
	struct sdma_regs *dma_ptr; /* SDMA registers */
	uint32_t dma_device; /* IRQ number */
	uint32_t dma_chans; /* Mask of available SDMA channels */
	/* Hardware config */
	uint8_t flags; /* Extra config flags */
	uint8_t num_lcds; /* Number of entries in num_lcds array */
	uint16_t mysize; /* sizeof(boardconfig_t), or 0 for old HAL */
	lcdconfig_t *lcd_configs; /* Array of available LCD outputs */

	/* Warning - Members after this point only exist if 'mysize' is large enough */

	uint32_t (*tvdet_func)(vdu_device_t *dev); /* Poll TV detection signal */
	void (*tvpower_func)(vdu_device_t *dev,bool on); /* Turn TV-out power on/off */
} boardconfig_t;

#define BOARDCONFIG_SVIDEO	0x1 /* Supports SVideo TV-out */
#define BOARDCONFIG_COMPOSITE	0x2 /* Supports composite TV-out */

typedef struct
{
	lcdtimings_t mode; /* Current mode timings */
	uint32_t background; /* Background colour in &BBGGRRSS format */
	uint32_t transparent; /* Transparent colour in hardware format */
	uint8_t dpms; /* Current dpms state */
	bool blanked;
	bool enabled;
	uint8_t features; /* Current features enabled */
	bool interlaced; /* True if it's an interlaced mode */
} headcfg_t;

typedef struct
{
	/* DISPC mode timing registers */
	uint32_t control;
	uint32_t pol_freq;
	uint32_t size_lcd;
	uint32_t timing_h;
	uint32_t timing_v;
} dispcmode_t;

typedef struct
{
	/* Vet a mode
	   interlace & pixelformat have been extracted from the VIDCList for convenience
	   pixelformat has already been checked against the formats the head supports
	   Return true if mode is OK
	*/
	bool (*vetmode)(overlaytarget target,const VIDCList3 *params,bool interlace,pixelformat format);

	/* Reprogram the current mode (as set in headcfgs) */
	void (*setmode)(overlaytarget target);

	/* Reprogram blanking setting from headcfgs */
	void (*setblank)(overlaytarget target);

	/* Reprogram the background colour setting from headcfgs */
	void (*setbackground)(overlaytarget target);

	/* Reprogram the colour key transparency colour from headcfgs */
	void (*settransparent)(overlaytarget target);

	/* Perform an IIC op, as per GraphicsV_IICOp
	   Set r4 to 0 to claim call */
	void (*iicop)(overlaytarget target,_kernel_swi_regs *r);

	/* Return fixed mode timings to use, or NULL */
	const lcdtimings_t *(*fixedtimings)(overlaytarget target);

	/* Table to map pixelformat enum values to OMAP-specific format */
	const omapformat_t *formats;

	/* Mask of which features the head supports */
	uint8_t features_val;
	uint8_t features_mask;

	/* Other flags */
	uint16_t flags;
} headattr_t;

#define HEADATTR_INTERLACED	0x1 /* Output is always interlaced */
#define HEADATTR_CLAMPTIMINGS	0x2 /* Clamp mode timings to within hwconfig limits */

typedef struct
{
	uint16_t width,height;
	int16_t x,y;
	pixelformat format;
	uint32_t ba; /* Buffer physical address */
	uint32_t stride; /* Num bytes from start of one line to start of next */
	uint8_t *la; /* Buffer logical address */
	overlaytarget target;
	bool enabled;
} overlaycfg_t;

typedef struct
{
	uint32_t ba[2]; /* Physical base address registers */
	uint32_t position; /* Position register */
	uint32_t size; /* Size/picture size register */
	uint32_t row_inc; /* Row inc register */
} lloverlaycfg_t;

typedef struct
{
	/* Enable an overlay/modify its parameters */
	void (*enable)(overlayidx overlay,const lloverlaycfg_t *ll);

	/* Disable an overlay */
	void (*disable)(overlayidx overlay);
} overlayattr_t;

typedef struct
{
	uint32_t errnum;
	char     errmess[8];
} internaterr_t;

/* Soft copies of hardware registers/desired states */

extern overlaycfg_t overlaycfgs[OVERLAY_MAX]; /* GFX, VID1, VID2 */
extern headcfg_t headcfgs[TARGET_MAX]; /* LCD, TV */
extern uint32_t vdu_init; /* Physical address of current VDU display bank */

extern uint32_t dsi_pll_current_pixel_rate; /* Current DSI PLL pixel rate (for DISPC); 0 if DSI PLL isn't running */

extern lcdtimings_t current_timings; /* Current timings programmed to hardware */
extern int current_lcd; /* Current LCD index (-1=none?) */

extern tvmode current_tvmode; /* Current TV-out mode */
extern tvouttype current_tvtype; /* Current TV-out type */
extern bool testcard; /* True for TV to display builtin colour bars test image */

extern transparencycfg current_transparencycfgs[TARGET_MAX]; /* Current transparency config for LCD & TV output */


/* Required resources that RISC OS doesn't maintain for us */

extern uint32_t *gfx_palette_l; /* Graphics palette logical addr */
extern uint32_t gfx_palette_p; /* Graphics palette physical addr */
extern uint32_t gfx_palette_ro[256]; /* A copy of the graphics palette in its original form, as received from RISC OS */
extern palette_func_t gfx_palette_func; /* Current function to use for performing palette updates */

extern uint32_t mouse_palette_soft[4]; /* Softcopy of mouse palette */
extern uint32_t mouse_palette_ro[4]; /* A copy of the mouse palette in its original form, as received from RISC OS */
extern uint8_t mouse_image_soft[32*32/4]; /* Softcopy of the 2bpp image */
extern bool mouse_dirty; /* True when palette has been changed */
extern palette_func_t mouse_palette_func; /* Current function to use for performing palette updates */

extern uint32_t *mouse_image_l; /* 32bpp image used by hardware */
extern uint32_t mouse_image_p;

extern overlayidx overlay_desktop,overlay_pointer; /* Indices of overlays used for desktop & mouse pointer */
extern overlaytarget default_display; /* Display that RISC OS is using for desktop & pointer, mode changes, etc. */


/* Const config data & lookup tables */

extern const uint8_t pixel_format_bpp[PIXELFORMAT_MAX]; /* BPP of each pixel format. TODO - will be wrong for some formats? */
extern const uint32_t transparency_lut[TARGET_MAX][TRANSPARENCY_MAX]; /* DISPC_CONFIG settings for each transparency config */

extern const boardconfig_t *hwconfig; /* Fixed board-specific configuration values */
extern const headattr_t headattrs[TARGET_MAX]; /* Hardware-specific head attributes & methods */
extern const overlayattr_t overlayattrs[OVERLAY_MAX]; /* Hardware-specific overlay attributes & methods */
d61 2
a62 5
#ifdef DEBUGLIB
extern const char **targetnames;
extern const char *overlaynames[];
extern const char *featurenames[];
extern const char *pixelformatnames[PIXELFORMAT_MAX+1];
d64 3
a66 2
extern void omap_dump_videoregs(void);
extern void omap_dump_tvregs(void);
d69 2
a70 7
/* Update headcfgs feature mask for given target, pick palette functions, enable/disable palette/gamma/CPR hardware */
extern void omap_update_features(overlaytarget target);

/* Pick the display to use on startup */
extern overlaytarget omap_pick_display(void);

extern void (*dmb)(void);
@


1.11
log
@Add chip-specific functions for *VideoRegs and *TVRegs. Change some OMAP3 register names.
Detail:
  c/cmodule, h/globals, omap3/c/omap, omap4/c/omap - Get rid of all the ugly #if's in *VideoRegs handling by moving video & TV register dump logic into chip-specific functions (omap_dump_videoregs, omap_dump_tvregs).
  h/regs3, omap3/c/dispc_plat, omap3/c/dss, omap3/c/omap, omap3/c/venc - Remove '1' from DISPC control & config register names, was only present for OMAP4 compatibility.
  omap4/c/dsi - Fix debug compile error due to DSI PLL regmf removal
Admin:
  OMAP3/OMAP4 debug/ROM versions all build correctly
  Untested at runtime


Version 0.36. Tagged as 'OMAPVideo-0_36'
@
text
@d371 2
@


1.10
log
@Big code refactor
Detail:
  Support for different OMAP revisions has now been abstracted, with code specific to a certain OMAP revision now located in the omap3 and omap4 folders. This has resulted in some code duplication, but greater readability due to the removal of the #defines that were in use before. This new structure should also make it easier to implement new features, especially those only supported by certain OMAPs.
  Each platform provides a headattrs struct and an overlayattrs struct, which are the primary interface the core code uses to control the backend. Eventually it may be possible to produce one build of the module which supports multiple OMAP revisions at runtime, but for now some #defines and OMAP-specific code remains in the common files.
  This change also adds support for extra pixel formats, gamma table support for OMAP4, and fixes several bugs.
Admin:
  Tested on BeagleBoard, PandaBoard


Version 0.34. Tagged as 'OMAPVideo-0_34'
@
text
@d360 3
@


1.9
log
@Add support for controlling TV-out power
Detail:
  h/globals - Add new tvpower_func entry to board config struct to allow for board-specific TV-out power controls
  c/venc - Enable/disable TV-out power when enabling/disabling TV-out
Admin:
  Tested on Pandora and BB-xM


Version 0.29. Tagged as 'OMAPVideo-0_29'
@
text
@d31 5
a35 1
#include "regs.h"
d43 2
d48 2
a49 1
	TARGET_LCD,
d51 4
d112 30
d144 10
a153 8
	uint16_t width,height;
	int16_t x,y;
	uint32_t format; /* OVERLAY_ATTRIBUTES_FORMAT_* */
	uint32_t ba; /* Buffer physical address */
	uint32_t stride; /* Num bytes from start of one line to start of next */
	uint8_t *la; /* Buffer logical address */
	overlaytarget target;
} overlay_t;
d191 1
a191 1
	sdma_regs_t *dma_ptr; /* SDMA registers */
d211 93
d310 2
a311 1
extern overlay_t overlays[OVERLAY_MAX]; /* GFX, VID1, VID2 */
a344 2
extern bool blanked; /* True if screen should be blanked */

d348 1
a348 2
extern const uint8_t overlay_format_bpp[16]; /* BPP of each overlay format */
extern const uint16_t fifo_preload_for_lcd[LCD_MAX]; /* FIFO preload value for each LCD type */
d352 15
@


1.8
log
@Internationalised
The failure to activate error message is a little tenuous, but distinct and non zero.
Built, but not tested.

Version 0.27. Tagged as 'OMAPVideo-0_27'
@
text
@d160 1
@


1.7
log
@Add support for TV detection and automatic TV mode selection on OMAP3. Make boardconfig_t struct extensible.
Detail:
  c/cmodule - If TV support is enabled (i.e. OMAP3 build), and the boardconfig_t indicates that TV-out is supported, the module will now use the TV detection feature to check if a TV is connected on startup. If a TV is found then a suitable TV mode will be chosen from the configured territory, and the TV output will be set as the main display.
  h/globals - Modified boardconfig_t to make the structure extensible - two padding bytes are now used to store the size of the struct as reported by the HAL device. Added new entry to boardconfig_t for the TV detection function.
Admin:
  Tested on BB-xM with high processor vectors


Version 0.24. Tagged as 'OMAPVideo-0_24'
@
text
@d165 5
@


1.6
log
@Merge of headers with OMAP4Video
For the most part, this is just adding "_t" suffixes to all the typedefs.
The OMAP4 controller registers are in "regs4.h" and OMAP3 in "regs3.h", they are selected between with a compile time switch - hence !MkROM becomes !Ms !MkRom3 and !MkRom4.
OMAP3 version tested & still works, OMAP4 will not work.

Version 0.19. Tagged as 'OMAPVideo-0_19'
@
text
@d154 1
d156 4
@


1.5
log
@Fix black screen on boot issue. Use C99 number types.
Detail:
  c/dss - Fixed the cause of the black screens on boot on OMAP3 machines (DM37xx seems fine). It looks like the cause was due to skipping the step where you disable the LCD output before triggering the DSS reset.
  c/cmodule, c/dispc, c/dss, c/graphicsv, h/globals - Removed code relating to previous attempts to fix the black screen issue
  c/cmodule, c/dispc, c/dsi, c/dss, c/graphicsv, c/palette, c/regs, c/sdma, c/venc, h/dsi, h/dss, h/globals, h/graphicsv, h/palette, h/regs - Use the C99 number types instead of u32, u16, etc.
Admin:
  Tested on rev C2 BB, rev A2 BB-xM


Version 0.13. Tagged as 'OMAPVideo-0_13'
@
text
@d39 2
a40 1
typedef enum {
d48 2
a49 1
typedef enum {
d56 2
a57 1
typedef enum {
d65 2
a66 1
typedef enum {
d76 2
a77 1
typedef enum {
d90 2
a91 1
typedef enum {
d101 2
a102 1
typedef struct {
d110 1
a110 1
} overlay;
d114 2
a115 1
typedef struct {
d120 1
a120 1
} lcdtimings;
d122 2
a123 1
typedef struct {
d130 1
a130 1
	void (*power)(vdu_device *dev,int brightness); /* Set display brightness (0-65536)/power */
d132 1
a132 1
	lcdtimings *lcd_timings; /* Required timings, if fixed panel */
d135 1
a135 1
} lcdconfig;
d142 2
a143 1
typedef struct {
d148 1
a148 1
	sdma_regs *dma_ptr; /* SDMA registers */
d154 2
a155 2
	lcdconfig *lcd_configs; /* Array of available LCD outputs */
} boardconfig;
d163 1
a163 1
extern overlay overlays[OVERLAY_MAX]; /* GFX, VID1, VID2 */
d168 1
a168 1
extern lcdtimings current_timings; /* Current timings programmed to hardware */
d183 1
a183 1
extern palette_func gfx_palette_func; /* Current function to use for performing palette updates */
d189 1
a189 1
extern palette_func mouse_palette_func; /* Current function to use for performing palette updates */
d203 1
a203 1
extern const uint8_t fifo_preload_for_lcd[LCD_MAX]; /* FIFO preload value for each LCD type */
d206 1
a206 1
extern const boardconfig *hwconfig; /* Fixed board-specific configuration values */
@


1.4
log
@Fix GraphicsV_Render operations being performed on wrong screen bank
Detail:
  c/cmodule, c/graphicsv, c/sdma, h/globals - Fixed GraphicsV_Render code to perform render ops to the VDU screen bank instead of the display bank.
  Also disabled the slow left-to-right DMA copy code, since the kernels' assembler loop is many times faster.
Admin:
  Tested on rev A2 BB-xM. Fixes issue reported on forums:
  http://www.riscosopen.org/forum/forums/4/topics/691


Version 0.12. Tagged as 'OMAPVideo-0_12'
@
text
@d96 6
a101 6
	u16 width,height;
	s16 x,y;
	u32 format; /* OVERLAY_ATTRIBUTES_FORMAT_* */
	u32 ba; /* Buffer physical address */
	u32 stride; /* Num bytes from start of one line to start of next */
	u8 *la; /* Buffer logical address */
d108 4
a111 4
	u32 pixelrate; /* Hz */
	u16 hsw,hfp,hbp,width;
	u16 vsw,vfp,vbp,height;
	u32 syncpol; /* vidclist3 syncpol flags */
d116 5
a120 5
	u8 dsi_bpp; /* BPP of DSI output */
	u8 dsi_lanes; /* Number of data lanes of DSI output */
	u8 acbias_freq; /* AC bias pin frequency */
	u8 lcd_type; /* LCD type (lcdtype enum) */
	u32 flags; /* Extra config flags */
d125 1
a125 1
	u32 max_pixelrate; /* Max pixel rate (kHz) */
d135 3
a137 3
	u32 sys_clk; /* System clock frequency, Hz */
	u16 max_porch; /* Max porch value */
	u16 max_sync; /* Max sync value */
d139 2
a140 2
	u32 dma_device; /* IRQ number */
	u32 dma_chans; /* Mask of available SDMA channels */
d142 2
a143 2
	u8 flags; /* Extra config flags */
	u8 num_lcds; /* Number of entries in num_lcds array */
d154 1
a154 1
extern u32 vdu_init; /* Physical address of current VDU display bank */
d156 1
a156 1
extern u32 dsi_pll_current_pixel_rate; /* Current DSI PLL pixel rate (for DISPC); 0 if DSI PLL isn't running */
d170 3
a172 3
extern u32 *gfx_palette_l; /* Graphics palette logical addr */
extern u32 gfx_palette_p; /* Graphics palette physical addr */
extern u32 gfx_palette_ro[256]; /* A copy of the graphics palette in its original form, as received from RISC OS */
d175 3
a177 3
extern u32 mouse_palette_soft[4]; /* Softcopy of mouse palette */
extern u32 mouse_palette_ro[4]; /* A copy of the mouse palette in its original form, as received from RISC OS */
extern u8 mouse_image_soft[32*32/4]; /* Softcopy of the 2bpp image */
d181 2
a182 2
extern u32 *mouse_image_l; /* 32bpp image used by hardware */
extern u32 mouse_image_p;
d192 3
a194 3
extern const u8 overlay_format_bpp[16]; /* BPP of each overlay format */
extern const u8 fifo_preload_for_lcd[LCD_MAX]; /* FIFO preload value for each LCD type */
extern const u32 transparency_lut[TARGET_MAX][TRANSPARENCY_MAX]; /* DISPC_CONFIG settings for each transparency config */
a197 5

/* Experiments */

extern int exp_synclost_count;

@


1.3
log
@Fix GraphicsV_SetBlank. Improve SetBlank to turn off the overlays. Trim dead code.
Detail:
  c/cmodule, c/dispc, c/graphicsv, h/globals - Fixed do_setblank to set DISPC_CONTROL_GOLCD, to ensure the relevant clocks have their states updated. Added 'blanked' flag to allow the graphics overlays to be disabled entirely whenever the screen should be blanked.
  c/dispc - Trim some dead code related to trying to fix the IGEP display issues.
Admin:
  Tested on rev C2 BB, A2 BB-xM, C1 TouchBook.
  Fixes bug #263 - http://www.riscosopen.org/tracker/tickets/263


Version 0.11. Tagged as 'OMAPVideo-0_11'
@
text
@d154 1
@


1.2
log
@Improve OMAPVideo power saving abilities and palette handling
Detail:
  Makefile, c/palette, h/palette, c/cmodule, c/dispc, c/graphicsv, h/globals - Rewrote palette handling code to support multiple different transformations on palettes, to adapt the palettes from the RISC OS formats to the DISPC formats. This means that palettes and the mouse cursor are now correctly R/B swapped for TV-out, RISC OS's gamma correction tables are now supported, and clever use of gamma tables allows 16bpp modes to be displayed correctly by mapping RISC OS's 555 format to the OMAP's 565 format (but there'll only be 4 blue bits instead of 5)
  c/cmodule, c/dispc, c/graphicsv, h/globals - Add support for the HAL's new display power controls, and implement GraphicsV_SetBlank. For fixed LCDs this will ignore the requested DPMS state and instead just turn the power/backlight off.
  h/sdma - Marked the functions as extern.
Admin:
  Tested on rev C2 beagleboard, rev C1 touchbook.
  Requires OMAP3 HAL 0.34.


Version 0.08. Tagged as 'OMAPVideo-0_08'
@
text
@d186 2
@


1.1
log
@Add initial version of OMAP video driver module
Detail:
  All-new OMAP video driver, written as a module in C.
  Functionality-wise it's basically the same as the original HAL-based driver, except it provides support for GraphicsV_Render via use of the OMAP SDMA controller, and there's currently no support for GraphicsV_IICOp.
  However under the hood the module is significantly different, to ensure it can be expanded to expose the full feature set of the video controller once the new GraphicsV API is ready.
Admin:
  Tested on rev C2 beagleboard.


Version 0.01. Tagged as 'OMAPVideo-0_01'
@
text
@d33 1
d121 1
d131 1
d171 2
d175 1
d178 1
d193 1
a193 1
extern boardconfig *hwconfig; /* Fixed board-specific configuration values */
@

