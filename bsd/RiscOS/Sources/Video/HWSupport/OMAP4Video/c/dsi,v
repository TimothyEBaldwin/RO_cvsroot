head	1.2;
access;
symbols
	OMAP4Video-0_02:1.2
	OMAP4Video-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2011.10.19.14.05.45;	author bavison;	state Exp;
branches;
next	1.1;
commitid	lw6qkmKxvYOvYXDv;

1.1
date	2011.09.12.19.10.48;	author bavison;	state Exp;
branches
	1.1.1.1;
next	;
commitid	00CYv1XlrqXHQezv;

1.1.1.1
date	2011.09.12.19.10.48;	author bavison;	state Exp;
branches;
next	;
commitid	00CYv1XlrqXHQezv;


desc
@@


1.2
log
@  Changes for supporting higher display resolutions
Admin:
  Changes received from Willi Theiss

Version 0.02. Tagged as 'OMAP4Video-0_02'
@
text
@/*
 * Copyright (c) 2010, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include "dsi.h"
#include "dss.h"
#include "globals.h"
#include "regs.h"

#include "DebugLib/DebugLib.h"


#ifdef DEBUGLIB
static const char *cmds[4] =
{"OFF","DSI_PLL_ON_HSDIVIDER_OFF","BOTH_ON","BOTH_ON_DSI_COMPLEXIO_OFF"};
#endif

static void dsi_pll_command(uint32_t cmd)
{
	/* DSI_CLK_CTRL can only be written if DSI_CTRL.IF_EN == 0 */
	dsi->ctrl &= ~DSI_CTRL_IF_EN;

	dsi->clk_ctrl = (dsi->clk_ctrl & ~DSI_CLK_CTRL_PLL_PWR_CMD_MASK)
				  | (cmd << DSI_CLK_CTRL_PLL_PWR_CMD_SHIFT);
	int timeout = 1000000;
	while (((dsi->clk_ctrl & DSI_CLK_CTRL_PLL_PWR_STATUS_MASK) >> DSI_CLK_CTRL_PLL_PWR_STATUS_SHIFT != cmd) && --timeout)
	{
		;
	}
	if (!timeout)
	{
		dprintf(("","dsi_pll_command: Timeout waiting for cmd %s; current state %s\n", cmds[cmd], cmds[(dsi->clk_ctrl & DSI_CLK_CTRL_PLL_PWR_STATUS_MASK) >> DSI_CLK_CTRL_PLL_PWR_STATUS_SHIFT]));
	}

#if 0
	/* reenable DSI interface */
	dsi->ctrl |= DSI_CTRL_IF_EN;
#endif
}

void dsi_pll_program_for_dispc(uint32_t pixel_rate)
{
	/* Program the DSI PLL for use by DISPC */
	if (pixel_rate == dsi_pll_current_pixel_rate)
		return;

	clock_divider div = calculate_dss_clock_divider(pixel_rate);

	dprintf(("", "dsi_pll_program_for_dispc: Changing pixel rate from %d to %d\n", dsi_pll_current_pixel_rate, pixel_rate));
	dprintf(("", "REGM=%d REGN=%d REGM4=%d pcd=%d REGMF=%d\n", div.regm, div.regn, div.regm4, div.pcd, div.regmf));

	/* base init of PLL - do it only once (after complete DSS reset) */
	if (0 == dsi_pll_current_pixel_rate)
	{
		/* check that DSI module is enabled */
		if (0 == (dsi->ctrl & DSI_CTRL_IF_EN))
		{
			/* enable module for getting write access */
			dsi->ctrl |= DSI_CTRL_IF_EN;
			/* wait until bit is set */
			while (0 == (dsi->ctrl & DSI_CTRL_IF_EN))
			{
				;
			}
		}

		/* SCPClk is required for PLL registers on OMAP4 */
		dsi->clk_ctrl |= DSI_CLK_CTRL_CIO_CLK_ICG;

		while (!(dsi_pll->status & DSI_PLL_STATUS_PLLCTRL_RESET_DONE))
			;

		/* Turn on PLL & HSDIVIDER */
		dsi_pll_command(DSI_PLL_PWR_CMD_BOTH_ON);
	}

	/* set manual mode */
	dsi_pll->control = 0;
	/* program configuration registers */
	dsi_pll->configuration1 = (div.regn << DSI_PLL_CONFIGURATION1_PLL_REGN_SHIFT)
							| (div.regm << DSI_PLL_CONFIGURATION1_PLL_REGM_SHIFT)
							| (div.regm4 << DSI_PLL_CONFIGURATION1_M4_CLOCK_DIV_SHIFT)
							| DSI_PLL_CONFIGURATION1_PLL_STOPMODE;

	uint32_t config2 = dsi_pll->configuration2;
	config2 &= ~(DSI_PLL_CONFIGURATION2_PHY_CLKINEN | DSI_PLL_CONFIGURATION2_M4_CLOCK_EN);
	config2 |= DSI_PLL_CONFIGURATION2_PLL_REFEN | DSI_PLL_CONFIGURATION2_HSDIVBYPASS;
	dsi_pll->configuration2 = config2;
	dsi_pll->configuration4 = (div.regmf & DSI_PLL_CONFIGURATION4_PLL_REGM_F_MASK)
							| (1 << 18);

	/* lock PLL */
	dsi_pll->go = DSI_PLL_GO_PLL_GO;

	/* wait for GO bit to clear */
	int timeout = 1000000;
	while ((dsi_pll->go & DSI_PLL_GO_PLL_GO) && --timeout)
	{
		;
	}
	if (!timeout)
	{
		dprintf(("", "dsi_pll_program_for_dispc: Timeout waiting for DSI_PLL_GO\n"));
	}

	/* wait for PLL to lock */
	timeout = 1000000;
	while (!(dsi_pll->status & DSI_PLL_STATUS_PLL_LOCK) && --timeout)
	{
		;
	}
	if (!timeout)
	{
		dprintf(("", "dsi_pll_program_for_dispc: Timeout waiting for DSI_PLL_CLOCK\n"));
	}

	/* reenable DISPC clock */
	config2 = dsi_pll->configuration2;
	config2 &= ~DSI_PLL_CONFIGURATION2_HSDIVBYPASS;
	config2 |= DSI_PLL_CONFIGURATION2_PHY_CLKINEN | DSI_PLL_CONFIGURATION2_M4_CLOCK_EN;
	dsi_pll->configuration2 = config2;

	/* Done! */
	dsi_pll_current_pixel_rate = pixel_rate;

	/* set PCD value */
	dispc->divisor2 = (1 << DISPC_DIVISOR_LCD_SHIFT) | (div.pcd << DISPC_DIVISOR_PCD_SHIFT);

	dprintf(("", "dsi_pll_program_for_dispc: Done\n"));
}
@


1.1
log
@Initial revision
@
text
@a58 2
	/* this seems to be not necessary (tested through JTAG) */
	/* writing a power cmd automatically reenables DSI interface */
a60 2
	while (!(dsi->ctrl & DSI_CTRL_IF_EN))
		;
d92 1
a94 1
		/* ?? what else must be done ?? ==> try to find out from linux !! */
d96 2
a97 4
		/* 1. Turn on PLL & HSDIVIDER
		   2. Wait for response */
		/* We don't need the DSI clock, keep it off */
		dsi_pll_command(DSI_PLL_PWR_CMD_BOTH_ON_DSI_COMPLEXIO_OFF);
d100 1
a100 24
	/* 3. - 6. Program configuration1 register */
	uint32_t config1, config2;
	config1  = div.regn << DSI_PLL_CONFIGURATION1_PLL_REGN_SHIFT;
	config1 |= div.regm << DSI_PLL_CONFIGURATION1_PLL_REGM_SHIFT;
	config1 |= div.regm4 << DSI_PLL_CONFIGURATION1_M4_CLOCK_DIV_SHIFT;

#if 0
	/* 7. Enable PLLStopMode */
	config1 |= DSI_PLL_CONFIGURATION1_PLL_STOPMODE;
#endif

	/* 8. Program configuration2 register */
#if 0
	config2 =  DSI_PLL_CONFIGURATION2_PLL_REFEN
			| DSI_PLL_CONFIGURATION2_HSDIVBYPASS;
#else
	config2 =  DSI_PLL_CONFIGURATION2_PLL_REFEN
			| DSI_PLL_CONFIGURATION2_HSDIVBYPASS
			| DSI_PLL_CONFIGURATION2_M4_CLOCK_EN
			| (2 << 1)		/* Linux does this (?) */
			| (3 << 21);	/* DSI_REF_SEL (?) */
#endif

	/* 9. Select manual mode (and program config1, config2) */
d102 9
a110 1
	dsi_pll->configuration1 = config1;
a111 1
#if 1
d113 1
a113 4
							| (1 << 18);	/* linux: undocumented M2 ?? */
#else
	dsi_pll->configuration4 = (div.regmf & DSI_PLL_CONFIGURATION4_PLL_REGM_F_MASK);
#endif
d115 1
a115 1
	/* 10. Lock */
d118 1
a118 1
	/* 11. Wait for GO bit to clear */
d129 1
a129 1
	/* 12. Wait for PLL to lock */
d140 4
a143 13
	/* 13. Turn on PLL & HSDIVIDER - Should already be on? And the rest of the stuff is
	       irrelevant, since we don't use DSI */
#if 0
	config2 =  DSI_PLL_CONFIGURATION2_PLL_REFEN
			| DSI_PLL_CONFIGURATION2_PHY_CLKINEN
			| DSI_PLL_CONFIGURATION2_M4_CLOCK_EN;
#else
	config2 =  DSI_PLL_CONFIGURATION2_PLL_REFEN
			| DSI_PLL_CONFIGURATION2_PHY_CLKINEN
			| DSI_PLL_CONFIGURATION2_M4_CLOCK_EN
			| (2 << 1)		/* Linux does this (?) */
			| (3 << 21);	/* DSI_REF_SEL (?) */
#endif
@


1.1.1.1
log
@  Initial import of OMAP4 video driver
Admin:
  Submission from Willi TheiÃŸ
@
text
@@
