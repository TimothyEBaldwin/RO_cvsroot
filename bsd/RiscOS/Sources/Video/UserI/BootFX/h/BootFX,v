head	1.4;
access;
symbols
	BootFX-0_09:1.4
	BootFX-0_08:1.4
	BootFX-0_07:1.4
	BootFX-0_06:1.3
	BootFX-0_05:1.2
	BootFX-0_04:1.2
	BootFX-0_03:1.1.1.1
	BootFX-0_02:1.1.1.1
	BootFX-0_01:1.1.1.1
	initial:1.1.1.1
	TRUNK:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2016.11.26.13.00.33;	author jlee;	state Exp;
branches;
next	1.3;
commitid	KHBAbvUs5CImFDvz;

1.3
date	2012.10.10.13.44.35;	author srevill;	state Exp;
branches;
next	1.2;
commitid	LNIA6imr7MYHnQnw;

1.2
date	2012.10.08.00.27.12;	author srevill;	state Exp;
branches;
next	1.1;
commitid	TNvgXLWitrR92wnw;

1.1
date	2012.09.02.21.35.21;	author srevill;	state Exp;
branches
	1.1.1.1;
next	;
commitid	hu1BGsyNhEtVc0jw;

1.1.1.1
date	2012.09.02.21.35.21;	author srevill;	state Exp;
branches;
next	;
commitid	hu1BGsyNhEtVc0jw;


desc
@@


1.4
log
@Use different layouts for different screen modes
Detail:
  Rather than using a fixed layout (which assumes a fixed screen size), BootFX now supports multiple layouts, which are able to adjust their scale to fit the current screen.
  First the layout most appropriate to the aspect ratio is chosen, and then coordinates and scale factors are adjusted in order to account for any difference in resolution.
  If the scaling results in a text window which is deemed to be "too small" then another layout will be tried, or in extreme cases BootFX will give up and go inactive for that mode.
  For cases where there is an inexact aspect ratio match, borders will be added to the layout in order to allow it to maintain the correct aspect ratio. This may result in some wasted space but sufficient for most purposes.
  File changes:
  - Docs/Spec.txt - Document BootFX_BarLoad addition to allow custom bar scale factors to be used
  - c/bootfx - Move hard-coded layout parameters into layout_t structs, and implement the layout adjustment logic. Define two layouts for Raspberry Pi; 4:3 layout will crop off the top portion of the splash so that a large text window can be placed underneath.
  - h/bootfx - Remove a few constants which are defined elsewhere in shared headers
Admin:
  Tested on Raspberry Pi, in a variety of screen modes


Version 0.07. Tagged as 'BootFX-0_07'
@
text
@/* @@file BootFX.h
 *
 * Main header file (and exports) for the BootFX module.
 */

#ifndef BOOTFX_H__
#define BOOTFX_H__

/** Internal error codes.
 */
#define BOOTFX_ERR_MALLOC_FAIL     (0x00)
#define BOOTFX_ERR_NO_SPRITES      (0x01)
#define BOOTFX_ERR_INVALID_SPRITES (0x02)
#define BOOTFX_ERR_NO_JPEG         (0x03)
#define BOOTFX_ERR_BAD_BAR_HANDLE  (0x04)

/** Star command syntax error codes.
 */
#define BOOTFX_ERR_SYN_LOAD  (0xFF)
#define BOOTFX_ERR_SYN_POS   (0xFE)
#define BOOTFX_ERR_SYN_PLOT  (0xFD)
#define BOOTFX_ERR_SYN_FREE  (0xFC)
#define BOOTFX_ERR_SYN_DEBUG (0xFB)

/** The path variable published by this module.
 */
#define BOOTFX_SYSVAR "BootFX$Path"

/** This handle is used by BootCommands to update the default booting progress bar.
 */
#define BOOTFX_MAGIC_HANDLE (0xB007CED5)

/** Some stuff that don't seem to be exported by other components (but really should be).
 */
#ifndef JPEG_Info
#define JPEG_Info (0x49980)
#endif
#ifndef JPEG_PlotScaled
#define JPEG_PlotScaled (0x49982)
#endif
#ifndef ScreenFX_Fade
#define ScreenFX_Fade (0x58440)
#endif
/** Global/ModHand.h defines this, but also defines macros that conflict with our CMHG handler functions
 */
#ifndef ModHandReason_LookupName
#define ModHandReason_LookupName (18)
#endif

#endif

/* SWI names from auto-generated CMHG file are appended here in the export_hdrs phase */
@


1.3
log
@Major internal replumbing.

Detail:

Extended the SWI interface to cope with multiple clients using BootFX to plot
progress bars (as originally intended). This did mean making a non-backwards-
compatible change to the BarUpdate SWI call (should only affect BootCmds).

Also fixed some minor bugs.

Finally, added a specification to the Docs directory and an example program
to the Tests directory.

Admin:

Implies BootCmds 1.46later.

Version 0.06. Tagged as 'BootFX-0_06'
@
text
@d44 2
a48 9
#ifndef OSFind_Close
#define OSFind_Close (0)
#endif
#ifndef OSDA_Create
#define OSDA_Create (0)
#endif
#ifndef OSDA_Remove
#define OSDA_Remove (1)
#endif
@


1.2
log
@Lots of changes and improvements.

* Fixed the free error on killing the module;
* Presents a mono logo initially, then splash stuff later;
* Switches flashing cursor off on module init (if pre-desktop);
* Bar sprites are squashed in ROM to save space;
* Miscellaneous tidy-ups and tweaks.

Version 0.04. Tagged as 'BootFX-0_04'
@
text
@d9 24
a56 19
/** Internal error codes.
 */
#define BOOTFX_ERR_MALLOC_FAIL     (0x00)
#define BOOTFX_ERR_NO_SPRITES      (0x01)
#define BOOTFX_ERR_INVALID_SPRITES (0x02)
#define BOOTFX_ERR_NO_JPEG         (0x03)

/** Star command syntax error codes.
 */
#define BOOTFX_ERR_SYN_LOAD  (0xFF)
#define BOOTFX_ERR_SYN_POS   (0xFE)
#define BOOTFX_ERR_SYN_PLOT  (0xFD)
#define BOOTFX_ERR_SYN_FREE  (0xFC)
#define BOOTFX_ERR_SYN_DEBUG (0xFB)

/** The path variable published by this module.
 */
#define BOOTFX_SYSVAR "BootFX$Path"

@


1.1
log
@Initial revision
@
text
@d26 6
@


1.1.1.1
log
@Initial import of the BootFX module.
@
text
@@
